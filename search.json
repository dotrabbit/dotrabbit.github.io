[{"title":"LeetCode-1.Two Sum","url":"http://dotrabbit.tk/算法/000145-LeetCode-1.Two Sum/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Given an array of integers, return indices of the two numbers such that they add up to a specific target.</p>\n<p>You may assume that each input would have exactly one solution, and you may not use the same element twice.</p>\n<p>Example:</p>\n<p>Given nums = [2, 7, 11, 15], target = 9,</p>\n<p>Because nums[0] + nums[1] = 2 + 7 = 9,<br>return [0, 1].</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>给出一个整形数组，返回其中和为目标数字的两个数字的索引。<br>你可以认为每个输入都有且只有一个解，并且不可以使用同一个元素两次。<br>例：<br>nums = [2, 7, 11, 15]，target = 9<br>因为 nums[0] + nums[1] = 2 + 7 = 9<br>返回 [0, 1]。</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><h2 id=\"方法一-暴力解法\"><a href=\"#方法一-暴力解法\" class=\"headerlink\" title=\"方法一 暴力解法\"></a>方法一 暴力解法</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] twoSum(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt; nums.length; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[j] == target - nums[i]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123; i, j &#125;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"No two sum solution\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>时间复杂度：O(n2)<br>空间复杂度：O(1)</p>\n<h2 id=\"方法二-二遍哈希表\"><a href=\"#方法二-二遍哈希表\" class=\"headerlink\" title=\"方法二 二遍哈希表\"></a>方法二 二遍哈希表</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] twoSum(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target) &#123;</span><br><span class=\"line\">    Map&lt;Integer, Integer&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        map.put(nums[i], i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> complement = target - nums[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (map.containsKey(complement) &amp;&amp; map.get(complement) != i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123; i, map.get(complement) &#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"No two sum solution\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>时间复杂度：O(n)<br>空间复杂度：O(n)</p>\n<h2 id=\"方法三-一遍哈希表\"><a href=\"#方法三-一遍哈希表\" class=\"headerlink\" title=\"方法三 一遍哈希表\"></a>方法三 一遍哈希表</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] twoSum(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target) &#123;</span><br><span class=\"line\">    Map&lt;Integer, Integer&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> complement = target - nums[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (map.containsKey(complement)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123; map.get(complement), i &#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        map.put(nums[i], i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"No two sum solution\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>时间复杂度：O(n)<br>空间复杂度：O(n)</p>\n","categories":["算法"],"tags":["算法","LeetCode"]},{"title":"2018年终总结","url":"http://dotrabbit.tk/生活杂记/000144-2018年终总结/","content":"<h1 id=\"工作\"><a href=\"#工作\" class=\"headerlink\" title=\"工作\"></a>工作</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;跟去年一样，第一位还是工作。两个关键字，繁忙。<br>&nbsp;&nbsp;&nbsp;&nbsp;今年的工作，可以说是跌宕起伏……不变的是忙碌，比去年还忙，因为今年担任了项目负责人，身上的责任更重了，除了一线的开发工作外，还要兼顾管理和排期，线上问题解决 ，进度跟踪，问题解答，各方各面的工作都要抓起来。</p>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;没了……</p>\n","categories":["生活杂记"],"tags":["生活杂记"]},{"title":"2017年终总结","url":"http://dotrabbit.tk/生活杂记/000143-2017年终总结/","content":"<h1 id=\"工作\"><a href=\"#工作\" class=\"headerlink\" title=\"工作\"></a>工作</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;今年最大的改变就是换了工作。在央企待了两年多，跳槽到了网易。<br>&nbsp;&nbsp;&nbsp;&nbsp;从年初开始准备，看算法，看基础，准备了挺久，面了几家，各有特点，最后选了网易，写游戏服务器。<br>&nbsp;&nbsp;&nbsp;&nbsp;离职是一道坎儿，跟着组里一起离职的同事跑来跑去，像做任务一样一个个大楼，一个个工位地签子，花了一个多月才算办得差不多。入职之后又慢慢转走了户口和公积金，跟以前的生活彻底说了再见。<br>&nbsp;&nbsp;&nbsp;&nbsp;在网易，相比于以前，繁忙了许多，但是感觉很充实。游戏服务器的逻辑挺有意思，有时候周末自己都会加班写代码，乐在其中~组里同事也都是游戏爱好者，在这儿接触了更多游戏，也很开心。<br>&nbsp;&nbsp;&nbsp;&nbsp;入职之后从改bug入手，逐渐熟悉代码。之前在央企的工作还是不一样的，从头开始，一点一点学习，开发环境、发布环境、数据库和redis环境等等。<br>&nbsp;&nbsp;&nbsp;&nbsp;自己感觉进步是迅速的，半年来，修了不少不好排查的bug，包括并发的。写了不少小功能，也写了横跨玩法的控制系统。完成了一个玩法，临时接手，花了三天，每天加班到半夜，吃夜宵盒饭，搞定了玩法基础流程，也算一个小成就，之后顺利上线，也没出过什么问题。<br>&nbsp;&nbsp;&nbsp;&nbsp;年底开始做另外一个产品，新项目新气象，虽然功能大同小异，但是实现的时候还是做了许多思考，比如道具系统，做了重构，更简单更清晰更合理，更好理解，便于维护。最后一个工作日，跟新来的同事调邮件接口，本可以下午早早下班的日子，忙到了半夜。回家特别晚，导致第二天误了元旦回家的火车……改签了票，到麦当劳吃了早饭，拿出电脑继续写接口，也算是别样的体验。<br>&nbsp;&nbsp;&nbsp;&nbsp;总体来讲，新工作充满新鲜感，忙碌但快乐，有收获，有成长，有贡献，期待明年。</p>\n<h1 id=\"旅行\"><a href=\"#旅行\" class=\"headerlink\" title=\"旅行\"></a>旅行</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;工作忙碌了，出去玩的时间自然就少了。经常忙到日用品都顾不上买，更别说计划出游了。<br>&nbsp;&nbsp;&nbsp;&nbsp;真正的出游只有年初一次，入职之前去了杭州，骑车游了西湖，去了龙井村。吃了好吃的海鲜面，带老妈去了上海，游了迪士尼，挺高兴。<br>&nbsp;&nbsp;&nbsp;&nbsp;勉强算上年底的部门组织古北水镇的话，就是两次。<br>&nbsp;&nbsp;&nbsp;&nbsp;今年的基调主要是工作，出游的事情，等来年吧。</p>\n<h1 id=\"感情\"><a href=\"#感情\" class=\"headerlink\" title=\"感情\"></a>感情</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;Null。<br>&nbsp;&nbsp;&nbsp;&nbsp;太忙了…</p>\n<h1 id=\"期待\"><a href=\"#期待\" class=\"headerlink\" title=\"期待\"></a>期待</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;对于新的一年，定了两个小目标：1、多出门走走；2、少吃外卖。<br>&nbsp;&nbsp;&nbsp;&nbsp;主要原因还是太宅了，平时工作日从早忙到晚，周末基本都是宅着，吃外卖，打游戏，补觉。不忙的时候不觉得，现在忙起来了，这样的生活状态给人的感觉就是没有生活……还是需要多出去走走。还有吃饭，外卖方便好吃，但终归还是不那么健康，希望能自己出去吃，当然，最好能自己做~</p>\n","categories":["生活杂记"],"tags":["生活杂记"]},{"title":"GET vs. POST","url":"http://dotrabbit.tk/Web/000142-GET vs. POST/","content":"<h1 id=\"1、HTTP\"><a href=\"#1、HTTP\" class=\"headerlink\" title=\"1、HTTP\"></a>1、HTTP</h1><p>从HTTP规范的语义角度讲，GET表示从指定的资源请求数据，POST表示向指定的资源提交要被处理的数据<br>GET与POST请求可分别对应CURD中的查询和更新操作<br>另外，GET应为安全的，即GET请求不应产生副作用，向服务器发起的GET请求不应修改服务器上的资源，POST表示可能发生修改</p>\n<h1 id=\"2、参数\"><a href=\"#2、参数\" class=\"headerlink\" title=\"2、参数\"></a>2、参数</h1><p>GET的查询字符串(名称/值对)使用放在GET请求的URL中发送，POST的查询字符串(名称/值对)是在请求的HTTP消息主体重发送<br>因此，由于浏览器对URL长度的限制，GET请求有长度限制，而POST请求对数据长度没有要求<br>另外，因为GET请求将参数放在URL中，会被写入服务器日志，较为不安全</p>\n<h1 id=\"3、记录\"><a href=\"#3、记录\" class=\"headerlink\" title=\"3、记录\"></a>3、记录</h1><p>GET请求可被缓存、保留在浏览器历史记录中、可被收藏为书签<br>POST请求不会被缓存、不会保留在浏览器历史记录中、不能被收藏为书签<br>因此，POST请求更加安全，GET请求不应再处理敏感数据时使用</p>\n<h1 id=\"4、编码\"><a href=\"#4、编码\" class=\"headerlink\" title=\"4、编码\"></a>4、编码</h1><p>GET请求只允许ASCII字符，POST没有限制，也允许二进制数据，支持整个ISO10646字符集，默认使用ISO-8859-1编码<br>对于特殊字符，如中文，GET请求需要通过url encode后才可以发出，浏览器各自行为不同，一般网站都会在js代码中完成编码，替浏览器做好该步骤，统一编码，Java程序可使用java.net.URLEncoder编码</p>\n<h1 id=\"5、扩展：\"><a href=\"#5、扩展：\" class=\"headerlink\" title=\"5、扩展：\"></a>5、扩展：</h1><p>HTTP请求方法：<br>方法    描述<br>HEAD    与GET相同，但只返回HTTP报头，不返回文档主体<br>PUT    上传指定的URI表示<br>DELETE    删除指定资源<br>OPTIONS    返回服务器支持的HTTP方法<br>CONNECT    把请求连接转换到透明的TCP/IP通道</p>\n<p>参考：<br><a href=\"http://www.w3school.com.cn/tags/html_ref_httpmethods.asp\" target=\"_blank\" rel=\"noopener\">http://www.w3school.com.cn/tags/html_ref_httpmethods.asp</a><br><a href=\"http://www.cnblogs.com/hyddd/archive/2009/03/31/1426026.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/hyddd/archive/2009/03/31/1426026.html</a><br><a href=\"http://www.jb51.net/web/12714.html\" target=\"_blank\" rel=\"noopener\">http://www.jb51.net/web/12714.html</a></p>\n","categories":["Web"],"tags":["Web","HTTP"]},{"title":"HTTP代码","url":"http://dotrabbit.tk/Web/000141-HTTP代码/","content":"<h1 id=\"代码段\"><a href=\"#代码段\" class=\"headerlink\" title=\"代码段\"></a>代码段</h1><table>\n<thead>\n<tr>\n<th>状态码</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>100~199</td>\n<td>表示成功接收请求，要求客户端继续提交下一次请求才能完成整个处理过程</td>\n</tr>\n<tr>\n<td>200~299</td>\n<td>表示成功接收请求并已完成整个处理过程，常用200</td>\n</tr>\n<tr>\n<td>300~399</td>\n<td>为完成请求，客户需进一步细化请求。例如，请求的资源已经移动一个新地址，常用302、307和304</td>\n</tr>\n<tr>\n<td>400~499</td>\n<td>客户端的请求有错误，常用404</td>\n</tr>\n<tr>\n<td>500~599</td>\n<td>服务器端出现错误，常用500</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"具体代码\"><a href=\"#具体代码\" class=\"headerlink\" title=\"具体代码\"></a>具体代码</h1><table>\n<thead>\n<tr>\n<th>消息</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong> 1xx </strong></td>\n<td><strong> 信息 </strong></td>\n</tr>\n<tr>\n<td>100 Continue</td>\n<td>服务器仅接收到部分请求，但是一旦服务器并没有拒绝该请求，客户端应该继续发送其余的请求。</td>\n</tr>\n<tr>\n<td>101 Switching Protocols</td>\n<td>服务器转换协议：服务器将遵从客户的请求转换到另外一种协议。</td>\n</tr>\n<tr>\n<td><strong> 2xx </strong></td>\n<td><strong> 成功 </strong></td>\n</tr>\n<tr>\n<td>200 OK</td>\n<td>请求成功（其后是对GET和POST请求的应答文档。）</td>\n</tr>\n<tr>\n<td>201 Created</td>\n<td>请求被创建完成，同时新的资源被创建。</td>\n</tr>\n<tr>\n<td>202 Accepted</td>\n<td>供处理的请求已被接受，但是处理未完成。</td>\n</tr>\n<tr>\n<td>203 Non-authoritative Information</td>\n<td>文档已经正常地返回，但一些应答头可能不正确，因为使用的是文档的拷贝。</td>\n</tr>\n<tr>\n<td>204 No Content</td>\n<td>没有新文档。浏览器应该继续显示原来的文档。如果用户定期地刷新页面，而Servlet可以确定用户文档足够新，这个状态代码是很有用的。</td>\n</tr>\n<tr>\n<td>205 Reset Content</td>\n<td>没有新文档。但浏览器应该重置它所显示的内容。用来强制浏览器清除表单输入内容。</td>\n</tr>\n<tr>\n<td>206 Partial Content</td>\n<td>客户发送了一个带有Range头的GET请求，服务器完成了它。</td>\n</tr>\n<tr>\n<td><strong> 3xx </strong></td>\n<td><strong> 重定向 </strong></td>\n</tr>\n<tr>\n<td>300 Multiple Choices</td>\n<td>多重选择。链接列表。用户可以选择某链接到达目的地。最多允许五个地址。</td>\n</tr>\n<tr>\n<td>301 Moved Permanently</td>\n<td>所请求的页面已经转移至新的url。</td>\n</tr>\n<tr>\n<td>302 Found</td>\n<td>所请求的页面已经临时转移至新的url。</td>\n</tr>\n<tr>\n<td>303 See Other</td>\n<td>所请求的页面可在别的url下被找到。</td>\n</tr>\n<tr>\n<td>304 Not Modified</td>\n<td>未按预期修改文档。客户端有缓冲的文档并发出了一个条件性的请求（一般是提供If-Modified-Since头表示客户只想比指定日期更新的文档）。服务器告诉客户，原来缓冲的文档还可以继续使用。</td>\n</tr>\n<tr>\n<td>305 Use Proxy</td>\n<td>客户请求的文档应该通过Location头所指明的代理服务器提取。</td>\n</tr>\n<tr>\n<td>306 Unused</td>\n<td>此代码被用于前一版本。目前已不再使用，但是代码依然被保留。</td>\n</tr>\n<tr>\n<td>307 Temporary Redirect</td>\n<td>被请求的页面已经临时移至新的url。</td>\n</tr>\n<tr>\n<td><strong> 4xx </strong></td>\n<td><strong> 客户端错误 </strong></td>\n</tr>\n<tr>\n<td>400 Bad Request</td>\n<td>服务器未能理解请求。</td>\n</tr>\n<tr>\n<td>401 Unauthorized</td>\n<td>被请求的页面需要用户名和密码。</td>\n</tr>\n<tr>\n<td>402 Payment Required</td>\n<td>此代码尚无法使用。</td>\n</tr>\n<tr>\n<td>403 Forbidden</td>\n<td>对被请求页面的访问被禁止。</td>\n</tr>\n<tr>\n<td>404 Not Found</td>\n<td>服务器无法找到被请求的页面。</td>\n</tr>\n<tr>\n<td>405 Method Not Allowed</td>\n<td>请求中指定的方法不被允许。</td>\n</tr>\n<tr>\n<td>406 Not Acceptable</td>\n<td>服务器生成的响应无法被客户端所接受。</td>\n</tr>\n<tr>\n<td>407 Proxy Authentication Required</td>\n<td>用户必须首先使用代理服务器进行验证，这样请求才会被处理。</td>\n</tr>\n<tr>\n<td>408 Request Timeout</td>\n<td>请求超出了服务器的等待时间。</td>\n</tr>\n<tr>\n<td>409 Conflict</td>\n<td>由于冲突，请求无法被完成。</td>\n</tr>\n<tr>\n<td>410 Gone</td>\n<td>被请求的页面不可用。</td>\n</tr>\n<tr>\n<td>411 Length Required</td>\n<td>“Content-Length” 未被定义。如果无此内容，服务器不会接受请求。</td>\n</tr>\n<tr>\n<td>412 Precondition Failed</td>\n<td>请求中的前提条件被服务器评估为失败。</td>\n</tr>\n<tr>\n<td>413 Request Entity Too Large</td>\n<td>由于所请求的实体的太大，服务器不会接受请求。</td>\n</tr>\n<tr>\n<td>414 Request-url Too Long</td>\n<td>由于url太长，服务器不会接受请求。当post请求被转换为带有很长的查询信息的get请求时，就会发生这种情况。</td>\n</tr>\n<tr>\n<td>415 Unsupported Media Type</td>\n<td>由于媒介类型不被支持，服务器不会接受请求。</td>\n</tr>\n<tr>\n<td>416</td>\n<td>服务器不能满足客户在请求中指定的Range头。</td>\n</tr>\n<tr>\n<td>417 Expectation Failed</td>\n<td></td>\n</tr>\n<tr>\n<td><strong> 5xx </strong></td>\n<td><strong> 服务器错误 </strong></td>\n</tr>\n<tr>\n<td>500 Internal Server Error</td>\n<td>请求未完成。服务器遇到不可预知的情况。</td>\n</tr>\n<tr>\n<td>501 Not Implemented</td>\n<td>请求未完成。服务器不支持所请求的功能。</td>\n</tr>\n<tr>\n<td>502 Bad Gateway</td>\n<td>请求未完成。服务器从上游服务器收到一个无效的响应。</td>\n</tr>\n<tr>\n<td>503 Service Unavailable</td>\n<td>请求未完成。服务器临时过载或当机。</td>\n</tr>\n<tr>\n<td>504 Gateway Timeout</td>\n<td>网关超时。</td>\n</tr>\n<tr>\n<td>505 HTTP Version Not Supported</td>\n<td>服务器不支持请求中指明的HTTP协议版本。</td>\n</tr>\n</tbody>\n</table>\n<p>参考：<br><a href=\"http://www.cnblogs.com/xdp-gacl/p/3751277.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/xdp-gacl/p/3751277.html</a><br><a href=\"http://www.w3school.com.cn/tags/html_ref_httpmessages.asp\" target=\"_blank\" rel=\"noopener\">http://www.w3school.com.cn/tags/html_ref_httpmessages.asp</a></p>\n","categories":["Web"],"tags":["Web","HTTP"]},{"title":"关于REST","url":"http://dotrabbit.tk/Web/000140-关于REST/","content":"<p>REST，全称REpsentation State Transfer，表现状态转换</p>\n<h1 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h1><p>1、由Roy Thomas Fielding在他2000年的博士论文中提出，他是HTTP协议（1.0版和1.1版）的主要设计者、Apache服务器软件的作者之一、Apache基金会的第一任主席<br>2、以资源为中心<br>资源(Resources)，即网络上的一个实体，或者说是网络上的一个具体信息<br>如文本、图片、歌曲、服务、应用程序对象、数据库记录、算法等<br>每个资源都使用URI(Universal Resource Identifier)得到一个唯一的地址<br>3、显式地使用 HTTP 方法<br>REST要求开发人员显式地使用HTTP方法，并且使用方式与协议定义一致<br>这个基本的REST设计原则建立了创建、读取、更新和删除(create、read、update、delete，CRUD)操作，与HTTP方法之间的一对一映射：<br>使用POST方法，在服务器上创建资源<br>使用GET方法，检索某个资源<br>使用PUT方法，更改资源状态或对其进行更新<br>使用DELETE方法，删除某个资源<br>4、是风格，而不是标准<br>在我看来，风格与标准的最大区别是是否可以准确判定。<br>对于标准，应该是非黑即白的。例如，对于web services标准，一个XML是不是符合SOAP协议的，很简单就可以判定，是或者不是。<br>而对于风格，只是一个高层次的描述，它的边界是模糊的，很难界定一个实现是否是某种风格，但可以说它是符合某种风格的，所以对于REST风格的应用，使用RESTful这个词汇，ful后缀一般用来放在边界较为模糊的形容词上，例如Beautiful。<br>5、无状态的<br>从客户端到服务器的每个请求都必须包含理解请求所必需的信息。如果服务器在请求之间的任何时间点重启，客户端不会得到通知。此外，无状态请求可以由任何可用服务器回答，这十分适合云计算之类的环境。客户端可以缓存数据以改进性能。<br>REST Web 服务需要扩展以满足日益提高的性能要求。 具有负载平衡和故障转移功能、代理和网关的服务器集群通常以形成服务拓扑的方式进行组织，从而允许根据需要将请求从一个服务器路由到另一个服务器，以减少 Web 服务调用的总体响应时间。 要使用中间服务器扩大规模，REST Web 服务需要发送完整、独立的请求；也就是说，发送的请求包括所有需要满足的数据，以便中间服务器中的组件能够进行转发、路由和负载平衡，而不需要在请求之间在本地保存任何状态。<br>完整、独立的请求不要求服务器在处理请求时检索任何类型的应用程序上下文或状态。 REST Web 服务应用程序（或客户端）在 HTTP Header 和请求正文中包括服务器端组件生成响应所需要的所有参数、上下文和数据。 这种意义上的无状态可以改进 Web 服务性能，并简化服务器端组件的设计和实现，因为服务器上没有状态，从而消除了与外部应用程序同步会话数据的需要。<br>6、无法应用于事务性<br>对于事务型的服务，一个简单的例子就是银行事务，在那里用户可以把钱从一个账户转移到另一个账户上。用户不想直接操作资源（钱、银行账户等等），他们只想告诉银行他们想要达到的目的，并且让银行根据他们的利益对资源进行处理。<br>所以从这一条，我们应该明白，选择基于REST或SOAP RPC风格的Web 服务，我们应该首先考虑这个服务是针对资源的还是针对活动的。</p>\n<ul>\n<li>James Snell，面向资源与面向活动的 Web 服务</li>\n</ul>\n<h1 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h1><p>在Web API中，存在很多将HTTP方法用于非预期用途的设计，很不优雅，且容易引起误调用(如使用GET获取内容而不小心向服务器添加了数据)。<br>通过实例，可以更加直接地理解REST解决的问题和优势：<br>糟糕的设计：<br>增加用户：GET /adduser?name=Robert HTTP/1.1<br>更新用户：GET /updateuser?name=Robert&amp;newname=Bob HTTP/1.1<br>REST：<br>增加用户：<br>POST /users HTTP/1.1<br>Host: myserver<br>Content-Type: application/xml<br>&lt;?xml version=”1.0”?&gt;</p>\n<p><user><br>  <name>Robert</name><br></user><br>更新用户：<br>PUT /users/Robert HTTP/1.1<br>Host: myserver<br>Content-Type: application/xml<br>&lt;?xml version=”1.0”?&gt;</p>\n<p><user><br>  <name>Bob</name><br></user><br>查询用户：<br>GET /users/Robert HTTP/1.1<br>Host: myserver<br>Accept: application/xml</p>\n<h1 id=\"REST与SOAP\"><a href=\"#REST与SOAP\" class=\"headerlink\" title=\"REST与SOAP\"></a>REST与SOAP</h1><p>随着RESTful架构高效简洁易用的特性越来越深入人心，Web Services渐渐也引入了REST风格的写法，REST与SOAP相比：<br>1、SOAP面向XML，REST面向HTTP<br>使用SOAP的Web Services实现将HTTP简化为POST方式，行为和参数都封装在SOAP里<br>而REST更加面向HTTP的操作映射，同时支持JSON等多种格式<br>另一方面，REST的提出者是HTTP的主要设计者，这一点就更容易理解了<br>2、SOAP面向操作，REST面向资源<br>SOAP协议描述了提供服务的方法和参数，用来描述用什么数据来做什么样的行为，是面向操作的，有操作，才有资源<br>RESTful的设计中，url表达的是资源，更加关注资源的定位，以资源为中心，其次才是HTTP头中的操作，有资源，才有操作<br>在使用SOAP协议的Web Services中，HTTP请求被简化为全部使用POST请求，而操作封装在SOAP里；使用REST则遵循HTTP的规范，在HTTP头中定义操作<br>3、SOAP更容易扩展，REST无法胜任一些复杂服务<br>对于一些复杂的服务接口来说，按照REST的风格来设计会有些牵强<br>观察各大网站的接口，很多网站还要传入function的名称作为参数，明显已经违背了REST本身的设计思路<br>4、SOAP更加成熟，REST更加高效<br>SOAP发展至今，厂商的支持已经达到了较为成熟的情况，不同平台语言之间通过SOAP来交互的Web Services都能够较好地互通<br>但SOAP由于各种需求不断扩充其本身协议的内容，导致在SOAP处理方面的性能有所下降。同时在易用性方面以及学习成本上也有所增加<br>REST高效简洁，且除了XML还支持JSON、RSS、ATOM等，更加易用<br>5、安全性<br>SOAP使用XML-Security和XML-Signature两个规范，组成WS-Security实现安全控制，且得到了各大厂商和平台的很好支持<br>REST没有任何安全方面的说明，现在开放REST风格API的网站主要分成两种：<br>a. 封装自定义的安全信息在消息中，这和SOAP没有什么区别<br>b. 硬件SSL，只能够保证点到点的安全，如果是需要多点传输的话SSL就无能为力了</p>\n<h1 id=\"拓展阅读\"><a href=\"#拓展阅读\" class=\"headerlink\" title=\"拓展阅读\"></a>拓展阅读</h1><p>RESTful API设计指南： <a href=\"http://www.ruanyifeng.com/blog/2014/05/restful_api.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2014/05/restful_api.html</a><br>各大网站REST风格API设计： <a href=\"http://blog.csdn.net/cenwenchu79/article/details/2112275\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/cenwenchu79/article/details/2112275</a></p>\n<p>参考：<br><a href=\"http://baike.baidu.com/link?url=lPP8IHeih-P3pBDlqaLm3BMRHSPdsCMIJeuuRRRLRLUsPFbC8ygng7kCp5-wGA49EUIgAfMFWfJjws5S5HoG3K\" target=\"_blank\" rel=\"noopener\">http://baike.baidu.com/link?url=lPP8IHeih-P3pBDlqaLm3BMRHSPdsCMIJeuuRRRLRLUsPFbC8ygng7kCp5-wGA49EUIgAfMFWfJjws5S5HoG3K</a><br><a href=\"http://blog.csdn.net/cenwenchu79/article/details/2112275\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/cenwenchu79/article/details/2112275</a><br><a href=\"https://www.ibm.com/developerworks/cn/webservices/ws-restful/\" target=\"_blank\" rel=\"noopener\">https://www.ibm.com/developerworks/cn/webservices/ws-restful/</a><br><a href=\"http://zhangjunhd.blog.51cto.com/113473/47283/\" target=\"_blank\" rel=\"noopener\">http://zhangjunhd.blog.51cto.com/113473/47283/</a><br><a href=\"http://www.ruanyifeng.com/blog/2011/09/restful\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2011/09/restful</a></p>\n","categories":["Web"],"tags":["Web"]},{"title":"XML vs. JSON","url":"http://dotrabbit.tk/Web/000139-XML vs. JSON/","content":"<p>关于XML与JSON的区别和比较，网上有很多讨论，甚至争论。<br>有人坚为JSON终会取代XML，只是时候未到，有人认为JSON天生不如XML。<br>我认为各有适用场景，应该会在很长一段时间内同生共存，只能尝试梳理一些认知。</p>\n<h1 id=\"XML\"><a href=\"#XML\" class=\"headerlink\" title=\"XML\"></a>XML</h1><p>全称Extensible Markup Language，用于标记电子文件使其具有结构性的标记语言，可以用来标记数据、定义数据类型，是一种允许用户对自己的标记语言进行定义的源语言。</p>\n<h1 id=\"JSON\"><a href=\"#JSON\" class=\"headerlink\" title=\"JSON\"></a>JSON</h1><p>全称JavaScript Object Notation，是一种轻量级的数据交换格式，可参见《关于JSON》一文</p>\n<h1 id=\"共同点\"><a href=\"#共同点\" class=\"headerlink\" title=\"共同点\"></a>共同点</h1><p>1、跨平台和语言<br>2、具有很高的可读性<br>3、可扩展<br>4、各平台和语言都有原生支持<br>5、纯文本<br>6、不作为<br>7、主要用于传输数据，可跨系统<br>8、广泛使用</p>\n<h1 id=\"比较\"><a href=\"#比较\" class=\"headerlink\" title=\"比较\"></a>比较</h1><p>对应于共同点，可以梳理出比较一下不同<br>主要考量：是否可设计、使用是否高效、是否可转换、转换是否可逆，最后得出适用场景等</p>\n<h2 id=\"1、可读性\"><a href=\"#1、可读性\" class=\"headerlink\" title=\"1、可读性\"></a>1、可读性</h2><p>可读性分两类，对人的可读性，和对机器的可读性。对机器的可读性放到第3点编解码中讨论，这里只讨论对人的可读性。<br>网上对XML和JSON的可读性意见不一，如果举办投票可能会各获得50%的票数<br>个人认为对可读性的讨论应该分情境：<br>a. 在格式化、不使用第三方阅读软件的情况下，表示相同信息的XML比JSON阅读性强一些<br>因为XML开闭标签对称，树形结构清晰，更加亲人；而JSON相对更加亲机器<br>b. 但同时，有过XML传输相关经验的开发人员应该都体会过，例如在plsql中，以纯文本而不是xml格式查看的时候，从一个连续的XML串中，基本无法人工识别任何信息，而JSON得益于服务器客户端传输的先天特性，即使将所有信息都写作一行，同样拥有一定的可阅读能力<br>综上，XML的可读性略强于JSON</p>\n<h2 id=\"2、扩展性\"><a href=\"#2、扩展性\" class=\"headerlink\" title=\"2、扩展性\"></a>2、扩展性</h2><p>XML：<br>XML中的X就代表扩展的意思，其设计理念就是具有高度的扩展性<br>其展现信息的核心特性为元素标签、元素属性、元素内容、树形结构，且扩展元素后不会影响解析<br>JSON：<br>JSON通过键值对以及对象嵌套，同样可以实现元素标签、元素内容和属性结构的功能<br>对于元素属性，可以提供一种内置的元数据的功能<br>JSON可以通过额外的设计(例如增加嵌套、转换时加入特殊符号标记)，也可以包含任何XML的属性信息，只是在简单性和阅读性上有所损失<br>但有些场景XML比JSON更适合，比如随意打开一个网页的源HTML，改成JSON，工作过程和结果都不会令人满意<br>扩展：<br>对于相同标签，XML拥有顺序性，JSON同样可以实现，一般为数组，但失去了可逆能力，如果想要保留，则需要更复杂的设计。另外，当增加一个新的同名标签时，XML解析程序可以不受影响，而JSON的value可能会由字符串等变为数组，程序受到影响；另一方面，XML实现数组一般使用重复标签，或约定的分割符，而JSON天然支持数组<br>基本上，任何XML可以表示的数据都可以用JSON表示，任何JSON可以表示的数据XML也都可以表示<br>但在描述复杂结构时，JSON没有XML清晰简单<br>综上，XML的扩展性较强一些</p>\n<h2 id=\"3、编解码\"><a href=\"#3、编解码\" class=\"headerlink\" title=\"3、编解码\"></a>3、编解码</h2><p>编码：<br>人工编码：XML和JSON都可以轻易地通过人工手动编码<br>机器编码：1、XML拥有成熟的API，但JSON也成长迅速；2、XML通常需要按照设计逐个元素填充，JSON可以直接转换对象<br>解码：<br>XML解析可以使用DOM或SAX方式，其中，SAX可以逐步解析，适用于大规模数据的解析，JSON不行<br>除了像XML一样逐层逐个解析外，JSON还可以轻易地映射为Java等语言的內建数据结构或对象，XML不行<br>综上，JSON的编解码能力较强，但解析大规模数据时可能会有性能瓶颈</p>\n<h2 id=\"4、数据体积\"><a href=\"#4、数据体积\" class=\"headerlink\" title=\"4、数据体积\"></a>4、数据体积</h2><p>因为JSON中不需要结束标签，额外信息少，所以往往比XML的数据体积要小，传输速率更高</p>\n<h2 id=\"5、应用\"><a href=\"#5、应用\" class=\"headerlink\" title=\"5、应用\"></a>5、应用</h2><p>由于历史的发展，XML是web services的既定标准，广泛用于系统间的数据交换<br>JSON天生适合前端解析，广泛应用于服务器与客户端的数据交换，包括网页和移动端<br>建议：<br>1、对于复杂的数据结构使用XML，简单的数据结构可采用JSON<br>2、在互联网应用中数据传输中，提倡使用JSON<br>3、针对前后端的差异，可以在服务端使用XML，在前端使用JSON，两者之间的转换在服务器端完成，各取所长<br>对于选型，<br>1、首要决定因素是是否有遗留习惯，必须选择XML<br>2、其次看数据复杂度，如果不是特别复杂，尽量用JSON</p>\n<p>参考：<br><a href=\"http://www.w3school.com.cn/xml/index.asp\" target=\"_blank\" rel=\"noopener\">http://www.w3school.com.cn/xml/index.asp</a><br><a href=\"http://www.cnblogs.com/yank/p/4028266.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/yank/p/4028266.html</a><br><a href=\"http://bbs.csdn.net/topics/391013413\" target=\"_blank\" rel=\"noopener\">http://bbs.csdn.net/topics/391013413</a></p>\n","categories":["Web"],"tags":["Web","XML","JSON"]},{"title":"Git核心概念","url":"http://dotrabbit.tk/工具/000138-Git核心概念/","content":"<h1 id=\"工作区和暂存区\"><a href=\"#工作区和暂存区\" class=\"headerlink\" title=\"工作区和暂存区\"></a>工作区和暂存区</h1><p>Git和其他版本控制系统的不同之一就是有暂存区的概念。</p>\n<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p><strong>工作区</strong>(Working Directory)，电脑里的工作目录<br><strong>版本库</strong>(Repository)，工作区下的隐藏目录.git<br>版本库.git包括<strong>暂存区</strong>(stage，或index)，git自动创建的master分支，以及指向当前分支的指针HEAD等</p>\n<h2 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h2><p>在本地修改文件后，先提交到暂存区，再从暂存区提交到当前分支</p>\n<h2 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h2><h3 id=\"提交\"><a href=\"#提交\" class=\"headerlink\" title=\"提交\"></a>提交</h3><p>添加文件修改到暂存区：git add &lt;file(s)&gt;<br>提交暂存区的所有内容到当前分支：git commit -m “&lt;description&gt;”</p>\n<h3 id=\"查看\"><a href=\"#查看\" class=\"headerlink\" title=\"查看\"></a>查看</h3><p>当前仓库状态，并提示可选的操作：git status<br>查看工作文件与暂存区的区别：git diff<br>查看暂存区与上一次提交的区别：git diff –cached</p>\n<h3 id=\"回退\"><a href=\"#回退\" class=\"headerlink\" title=\"回退\"></a>回退</h3><p>从暂存区到工作区(回退工作区文件到上一次git add)：git checkout – &lt;file&gt;<br>从当前分支到暂存区(回退暂存区文件到某一版本的git commit)：git reset &lt;commit id&gt; &lt;file&gt;<br>当前分支回退版本(如下节)：git reset –hard &lt;commit id&gt;</p>\n<h3 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h3><p>删除工作区和暂存区：git rm &lt;file&gt;</p>\n<h2 id=\"实践\"><a href=\"#实践\" class=\"headerlink\" title=\"实践\"></a>实践</h2><p>先在工作区中修改文件，然后利用git status命令查看当前仓库状态(git status命令在仓库状态的同时，会提示目前可以采取的动作)，然后用git add命令将一个或多个改动添加到暂存区，最后用git commit命令将暂存区所有改动提交到当前分支。<br>如果在git add后、git commit之前，又更改了工作区文件，则此时git add会覆盖第一次add，工作区和暂存区一致，与最近的commit不一致；git commit会提交第一次add，暂存区和最近commit一致，与工作区不一致<br>删除文件时，可在本地删除，然后提交到暂存区，再提交到分支；或使用git rm命令同时删除本地和暂存区文件，然后提交到分支</p>\n<h1 id=\"版本\"><a href=\"#版本\" class=\"headerlink\" title=\"版本\"></a>版本</h1><p>每次commit都会生成一个版本<br>每个版本都对应着一个版本号(commit id)，Git使用SHA1计算出的一个十六进制表示的数字作为commit id<br>HEAD表示当前版本，上一个版本为HEAD^，上上个版本为HEAD^^，往上100个版本为HEAD~100<br>当在Git中回退版本时，Git内部只是移动了HEAD指针，并可以通过参数，选择是否重置暂存区和工作树</p>\n<h2 id=\"命令-1\"><a href=\"#命令-1\" class=\"headerlink\" title=\"命令\"></a>命令</h2><p>显示历史版本信息：git log<br>显示历史版本信息(每个版本一行，只显示版本号和注释)：git log –pretty=oneline<br>回退到上一个版本(回退HEAD)：git reset –soft HEAD^<br>回退到上一个版本(回退HEAD，暂存区)：git reset HEAD^<br>回退到上一个版本(回退HEAD，暂存区和工作树)：git reset –hard HEAD^<br>回退到某一个版本：git reset &lt;coimmit id&gt;<br>查看所有动作：git reflog</p>\n<h2 id=\"实践-1\"><a href=\"#实践-1\" class=\"headerlink\" title=\"实践\"></a>实践</h2><p>一般使用git log查看历史版本信息，然后回退到某一版本，此时再使用git log命令则只能显示当前回退到的版本的历史版本，如果想恢复到相对当前版本较新的版本，需要使用git reflog命令，查看历史动作，其中包含版本号，利用版本号进行版本“前进”</p>\n<h1 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h1><p>分支功能可以使产品保证稳定版本，同时开发新功能版本，并且可以实现多个新功能并行开发<br>很多版本管理系统都有分支的功能，然而SVN等工具创建分支时会拷贝整个工作区，所以效率很低，Git使用类似指针的概念，无论是上述版本回退，还是创建分支等功能，在Git中都只是一个指针移动的操作，效率非常高<br>Git版本库中的指针名称叫HEAD，指向当前分支的当前版本。如前所述，可以用HEAD^、HEAD~100来表示前几个版本<br>当commit时，改动被提交到HEAD，HEAD再提交到其指向的分支，因此，改动HEAD指向即可改变提交的分支<br>HEAD默认指向Git自动生成的master分支，可以通过命令新建分支、切换分支、合并分支</p>\n<h2 id=\"命令-2\"><a href=\"#命令-2\" class=\"headerlink\" title=\"命令\"></a>命令</h2><h3 id=\"查看-1\"><a href=\"#查看-1\" class=\"headerlink\" title=\"查看\"></a>查看</h3><p>查看本地分支：git branch，当前分支前以星号标记<br>查看远程分支：git branch -r<br>查看本地和远程分支：git branch -a<br>创建和切换：<br>创建分支：git branch &lt;branch-name&gt;<br>切换分支：git checkout &lt;branch&gt;<br>创建并切换分支：git checkout -b &lt;branch&gt;</p>\n<h3 id=\"合并\"><a href=\"#合并\" class=\"headerlink\" title=\"合并\"></a>合并</h3><p>合并指定分支到当前分支：git merge &lt;branch&gt;<br>禁用Fast-forward模式merge：git merge<br>查看分支合并图：git log –graph –pretty=oneline –abbrev-commit<br>放弃合并：git merge –abort</p>\n<h3 id=\"暂存和恢复\"><a href=\"#暂存和恢复\" class=\"headerlink\" title=\"暂存和恢复\"></a>暂存和恢复</h3><p>暂存工作区：git stash<br>查看暂存：git stash list<br>恢复暂存：git stash apply<br>删除暂存：git stash drop<br>恢复并删除暂存：git stash pop</p>\n<h3 id=\"删除-1\"><a href=\"#删除-1\" class=\"headerlink\" title=\"删除\"></a>删除</h3><p>删除分支：git branch -d &lt;branch&gt;<br>强制删除分支：git branch -D &lt;branch&gt;</p>\n<h2 id=\"实践-2\"><a href=\"#实践-2\" class=\"headerlink\" title=\"实践\"></a>实践</h2><h3 id=\"合并-1\"><a href=\"#合并-1\" class=\"headerlink\" title=\"合并\"></a>合并</h3><p>合并分支后，可以通过有两种情况(以从master分支上新建dev分支为例)：<br>1、dev改动并commit之后merge，master还没有commit过<br>1.a Fast-forward模式merge<br>1.b 禁用Fast-forward模式merge<br>2、dev改动并commit之后merge，而master也被改动并commit过<br>2.a 没有冲突，直接merge<br>2.b 有冲突，手动解决，merge<br>2.c 有冲突，放弃merge<br>对于1.a，master与dev其实是在一条线上开发，只不过dev比master超前一个commit，所以移动master指针到dev指针即可<br>对于1.b，因为1.a中只是简单移动，dev的信息并没有保存，所以在删除dev后，dev的分支信息将被丢弃，且分支合并图没有体现，可以使用git merge的–no-ff参数，强制禁用Fast-forward模式<br>对于2.a，两个分支分别有commit，行成两条分叉线，如果文件中没有冲突(即都有内容且不相同的行)，则可以直接合并<br>对于2.b，当提交merge命令后，Git中会存在一个MERGE_HEAD，此时分支处于合并过程中的状态，使用git status可以查看冲突，手动解决文件冲突后，使用git commit合并<br>对于2.c，如果不想解决冲突，可以选择放弃merge，使用git merge –abort删除MERGE_HEAD，恢复到使用merge命令之前的状态</p>\n<h3 id=\"切换\"><a href=\"#切换\" class=\"headerlink\" title=\"切换\"></a>切换</h3><p>工作树、暂存区和commit会随着分支切换而变化</p>\n<h3 id=\"暂存\"><a href=\"#暂存\" class=\"headerlink\" title=\"暂存\"></a>暂存</h3><p>git stash命令可以将目前的工作区、暂存区改动存储起来，此时使用git status命令查看，工作区是干净的<br>例如在dev分支开发一半，突然有bug修复工作，可以先暂存dev分支，然后从master新建一个bug修复分支，修复并提交到master后，切换回dev分支，恢复刚才的暂存，继续工作</p>\n<h3 id=\"删除-2\"><a href=\"#删除-2\" class=\"headerlink\" title=\"删除\"></a>删除</h3><p>当前分支无法删除<br>使用-d普通删除<br>对于有改动的分支，使用-D强制删除</p>\n<h1 id=\"远程仓库\"><a href=\"#远程仓库\" class=\"headerlink\" title=\"远程仓库\"></a>远程仓库</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>Git是分布式版本控制系统<br>同一个Git仓库，可以通过克隆分布到不同的机器上\u000b每台机器的版本库都一样，没有主次之分<br>可以从任何机器上克隆或拉取文件，例如本地目录、局域网服务器、GitHub等</p>\n<h2 id=\"实践-3\"><a href=\"#实践-3\" class=\"headerlink\" title=\"实践\"></a>实践</h2><p>通过git init生成的仓库没有远程仓库连接<br>可以直接git clone，或在git init后通过git remote add命令，与远程主机连接<br>一个本地仓库可与多个远程仓库连接<br>本地以远程主机名对主机进行区分，主机名只是本地对远程的称呼<br>git clone默认命名为origin，可手动指定；git remote add必须手动指定</p>\n<h2 id=\"1、git-clone\"><a href=\"#1、git-clone\" class=\"headerlink\" title=\"1、git clone\"></a>1、git clone</h2><h3 id=\"简介-1\"><a href=\"#简介-1\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>git clone命令从远程主机克隆一个版本库：git clone &lt;repo&gt; [&lt;dir&gt;]<br>第一个参数是远程主机的版本库地址<br>第二个参数是可选的，指定本地新建目录的名称，默认是远程主机版本库的名称<br>例如：git clone <a href=\"https://github.com/jquery/jquery.git\" target=\"_blank\" rel=\"noopener\">https://github.com/jquery/jquery.git</a></p>\n<h3 id=\"协议\"><a href=\"#协议\" class=\"headerlink\" title=\"协议\"></a>协议</h3><p>git clone支持多种协议，包括HTTP(s)、SSH、Git、本地文件协议等<br>例如：<br>git clone http[s]://example.com/path/to/repo.git/<br>git clone ssh://example.com/path/to/repo.git/<br>git clone git://example.com/path/to/repo.git/<br>git clone /opt/git/project.git<br>git clone file:///opt/git/project.git<br>git clone ftp[s]://example.com/path/to/repo.git/<br>git clone rsync://example.com/path/to/repo.git/<br>SSH协议还有一种写法：git clone [user@]example.com:path/to/repo.git/<br>通常，Git协议下载速度最快，SSH协议用于需要用户认证的场合<br>具体内容可见 <a href=\"https://git-scm.com/book/en/v2/Git-on-the-Server-The-Protocols\" target=\"_blank\" rel=\"noopener\">https://git-scm.com/book/en/v2/Git-on-the-Server-The-Protocols</a></p>\n<h3 id=\"实践-4\"><a href=\"#实践-4\" class=\"headerlink\" title=\"实践\"></a>实践</h3><p>一般直接使用如上命令进行clone，此时远程主机默认命名为origin，如果想要指定名称(例如需要添加多台主机时)，可以使用-o, –origin参数<br>格式：git clone -o &lt;name&gt; &lt;repo&gt; [&lt;dir&gt;] 或 git clone –origin &lt;name&gt; &lt;repo&gt; [&lt;dir&gt;]<br>例子：git clone -o jQuery <a href=\"https://github.com/jquery/jquery.git\" target=\"_blank\" rel=\"noopener\">https://github.com/jquery/jquery.git</a></p>\n<h2 id=\"2、git-remote\"><a href=\"#2、git-remote\" class=\"headerlink\" title=\"2、git remote\"></a>2、git remote</h2><p>用来执行远程主机添加和移除，和对远程主机名的增删改查</p>\n<h3 id=\"查看-2\"><a href=\"#查看-2\" class=\"headerlink\" title=\"查看\"></a>查看</h3><p>查看所有远程主机名：git remote<br>查看所有远程主机名及其网址：git remote -v<br>查看远程主机详细信息：git remote show &lt;name&gt;，指定远程主机名</p>\n<h3 id=\"添加\"><a href=\"#添加\" class=\"headerlink\" title=\"添加\"></a>添加</h3><p>添加远程主机：git remote add &lt;name&gt; &lt;url&gt;，分别指定远程主机名和主机地址</p>\n<h3 id=\"改名\"><a href=\"#改名\" class=\"headerlink\" title=\"改名\"></a>改名</h3><p>重命名远程主机：git remote rename &lt;old&gt; &lt;new&gt;，分别指定原主机名、新主机名</p>\n<h3 id=\"删除-3\"><a href=\"#删除-3\" class=\"headerlink\" title=\"删除\"></a>删除</h3><p>删除远程主机：git remote rm &lt;name&gt;，指定远程主机名</p>\n<h2 id=\"3、git-fetch\"><a href=\"#3、git-fetch\" class=\"headerlink\" title=\"3、git fetch\"></a>3、git fetch</h2><p>当远程主机有了更新(commit)时，将远程主机的更新取回本地<br>git fetch对本地分支没有影响<br>取回本地远程分支要以 远程主机名/分支名 的形式访问，例如 origin/master</p>\n<h3 id=\"命令-3\"><a href=\"#命令-3\" class=\"headerlink\" title=\"命令\"></a>命令</h3><p>取回：<br>取回默认名为origin远程主机的所有分支：git fetch<br>取回指定远程主机的某一分支：git fetch &lt;repo&gt; &lt;branch&gt;，分别指定远程主机名和分支名<br>合并：<br>在远程分支的基础上新建本地分支(并建立追踪关系)：git checkout -b &lt;branch name&gt; &lt;remote branch name&gt;<br>在本地已有分支上合并远程分支：git merge &lt;remote branch name&gt; 或 git rebase &lt;remote branch name&gt;<br>回忆：<br>查看所有远程分支：git branch -r<br>查看所有分支：git branch -a</p>\n<h3 id=\"实践-5\"><a href=\"#实践-5\" class=\"headerlink\" title=\"实践\"></a>实践</h3><p>通过git fetch获取到远程分支后，只能用git checkout -b在其基础上新建分支，并建立追踪；或用git merge/rebase合并到已有的本地分支，但不建立追踪</p>\n<h2 id=\"4、git-pull\"><a href=\"#4、git-pull\" class=\"headerlink\" title=\"4、git pull\"></a>4、git pull</h2><p>取回远程主机某个分支的更新，再与本地的指定分支合并<br>可理解为先git fetch，再git merge</p>\n<h3 id=\"tracking\"><a href=\"#tracking\" class=\"headerlink\" title=\"tracking\"></a>tracking</h3><p>在拉下和推送之前，本地分支与远程分支之间必须有追踪关系(tracking)<br>git clone &lt;repo&gt;和git checkout -b &lt;branch name&gt; &lt;remote branch name&gt;会自动建立相应分支之间的追踪关系<br>可使用git branch –set-upstream &lt;branch name&gt; &lt;remote branch name&gt;</p>\n<h3 id=\"命令-4\"><a href=\"#命令-4\" class=\"headerlink\" title=\"命令\"></a>命令</h3><p>取回某个远程主机的某个分支，并与本地的某个分支合并，但不建立追踪：<br>git pull &lt;remote name&gt; &lt;remote branch name&gt;:&lt;branch name&gt;</p>\n<h3 id=\"实践-6\"><a href=\"#实践-6\" class=\"headerlink\" title=\"实践\"></a>实践</h3><p>1、如果与当前分支合并，则可省略branch name：git pull &lt;remote name&gt; &lt;remote branch name&gt;<br>2、如果已经建立分支追踪关系，则可省略remote branch name：git pull &lt;remote name&gt;<br>3、如果当前分支只追踪了一个远程分支，则可省略remote name：git pull<br>4、使用rebase模式：git pull –rebase &lt;remote name&gt; &lt;remote branch name&gt;:&lt;branch name&gt;<br>5、如果远程分支已经删除，git pull不会删除本地分支，如果想删除，使用-p：<br>git pull -p，等于先git fetch –prune origin，再git fetch -p</p>\n<h2 id=\"5、git-push\"><a href=\"#5、git-push\" class=\"headerlink\" title=\"5、git push\"></a>5、git push</h2><p>将本地更新，推送到远程主机，与git pull命令相仿</p>\n<h3 id=\"命令-5\"><a href=\"#命令-5\" class=\"headerlink\" title=\"命令\"></a>命令</h3><p>推送本地的某个分支，到某个远程主机的某个分支，但不建立追踪：<br>git push &lt;remote name&gt; &lt;branch name&gt;:&lt;remote branch name&gt;<br>(本地分支和远程分支的熟悉怒与git pull命令相反)</p>\n<h3 id=\"实践-7\"><a href=\"#实践-7\" class=\"headerlink\" title=\"实践\"></a>实践</h3><p>1、推送策略<br>1.a 如果省略远程分支名，此时如果存在追踪关系直接推送，如果不存在则会新建远程分支：<br>git push &lt;remote name&gt; &lt;branch name&gt;<br>1.b 如果省略本地分支名，则删除指定的远程分支(可理解为推送一个空的本地分支到远程分支)：<br>git push &lt;remote name&gt; :&lt;remote branch&gt;，等于git push &lt;remote name&gt; –delete &lt;remote branch&gt;<br>1.c 如果当前分支与远程分支有追踪关系，则可省略本地分支和远程分支：git push &lt;remote name&gt;<br>1.d 如果当前分支只有一个追踪分支，则可继续省略主机名：git push<br>1.e 如果当前分支与多个主机存在追踪关系，可使用-u指定一个默认主机，进而直接使用git push而不加参数：git push -u &lt;remote name&gt; &lt;branch name&gt;，将指定本地分支推送到指定远程主机，并指定该远程主机为默认主机<br>2、推送模式<br>git push有两种模式，simple和matching；simple只推送当前分支，matching会推送所有对应分支；Git 2.0以前默认采用matching，现在默认使用simple；可使用git config更改：<br>git config –global push.default matching 或 git config –global push.default simple<br>还有一种可选模式，是不管是否存在远程分支，将本地分支都推送到远程主机：git push –all &lt;remote name&gt;<br>3、解决冲突<br>当远程分支版本较新时，需要先git pull，手工合并差异，再push<br>但可以使用–force强制推送：git push –force &lt;remote name&gt;，覆盖远程分支的文件，谨慎使用<br>4、推送标签<br>默认不会推送标签，使用–tags：git push &lt;remote name&gt; –tags</p>\n<h1 id=\"本地分支与远程分支实践\"><a href=\"#本地分支与远程分支实践\" class=\"headerlink\" title=\"本地分支与远程分支实践\"></a>本地分支与远程分支实践</h1><h2 id=\"本地分支\"><a href=\"#本地分支\" class=\"headerlink\" title=\"本地分支\"></a>本地分支</h2><p>1、通过git init生成本地仓库，本地是无分支的，可以新建分支，或commit文件后生成默认的master分支<br>2、通过git clone生成本地仓库，会取回所有远程分支，并默认在本地新建远程仓库的HEAD指向的分支，以远程分支的名称命名，并连接；可以使用-b或–branch参数指定远程分支</p>\n<h2 id=\"远程分支\"><a href=\"#远程分支\" class=\"headerlink\" title=\"远程分支\"></a>远程分支</h2><p>1、通过git checkout &lt;remote branch name&gt;，切换到远程分支时，会进入detached HEAD状态，以“(HEAD detached at &lt;remote branch name&gt;)”标记，工作树会显示远程分支的文件，可以修改提交，但不会造成修改，当切换到本地分支后，该分支立即消失<br>2、通过git checkout -b &lt;branch name&gt; &lt;remote branch name&gt;，则会在本地新建分支，并拷贝远程分支文件，并建立两个分支之间的连接</p>\n<h1 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h1><p>指向commit的一个指针，与commit id功能一样，但名称更加容易记忆，好找<br>git push的时候默认不会推送标签，除非使用–tag参数</p>\n<h2 id=\"命令-6\"><a href=\"#命令-6\" class=\"headerlink\" title=\"命令\"></a>命令</h2><h3 id=\"查看-3\"><a href=\"#查看-3\" class=\"headerlink\" title=\"查看\"></a>查看</h3><p>查看所有标签(按名称排序)：git tag<br>查看某个标签详细信息：git show &lt;tag name&gt;</p>\n<h3 id=\"添加-1\"><a href=\"#添加-1\" class=\"headerlink\" title=\"添加\"></a>添加</h3><p>打在最新的commit上：git tag &lt;tag name&gt;<br>打在某一个commit上：git tag &lt;tag name&gt; &lt;commit id&gt;</p>\n<h3 id=\"删除-4\"><a href=\"#删除-4\" class=\"headerlink\" title=\"删除\"></a>删除</h3><p>删除标签：git tag -d &lt;tag name&gt;</p>\n<h3 id=\"推送\"><a href=\"#推送\" class=\"headerlink\" title=\"推送\"></a>推送</h3><p>推送标签到远程主机：git push &lt;remote name&gt; &lt;tag name&gt;<br>推送所有标签到远程主机：git push &lt;remote name&gt; –tags</p>\n<h2 id=\"实践-8\"><a href=\"#实践-8\" class=\"headerlink\" title=\"实践\"></a>实践</h2><h3 id=\"添加标签\"><a href=\"#添加标签\" class=\"headerlink\" title=\"添加标签\"></a>添加标签</h3><p>使用-a指定标签名，-m添加有说明的标签：git tag -a &lt;tag name&gt; -m “&lt;description&gt;” &lt;commit id&gt;<br>使用-s使用GPG签名(不可伪造，可验证)的标签：git tag -s &lt;tag name&gt; -m “&lt;description&gt;” &lt;commit id&gt;</p>\n<h3 id=\"删除远程标签\"><a href=\"#删除远程标签\" class=\"headerlink\" title=\"删除远程标签\"></a>删除远程标签</h3><p>先删除本地标签，git tag -d &lt;tag name&gt;，再删除远程主机标签，git push &lt;remote name&gt; :refs/tags/&lt;tag name&gt;</p>\n<h1 id=\"自定义Git\"><a href=\"#自定义Git\" class=\"headerlink\" title=\"自定义Git\"></a>自定义Git</h1><h2 id=\"1、git-config\"><a href=\"#1、git-config\" class=\"headerlink\" title=\"1、git config\"></a>1、git config</h2><p>例如username和email，例如开启颜色：git config –global color.ui true</p>\n<h2 id=\"2、git-ignore\"><a href=\"#2、git-ignore\" class=\"headerlink\" title=\"2、git ignore\"></a>2、git ignore</h2><p>通过在仓库根目录放置 .gitignore 文件，可以配置Git忽略的不追踪的文件，如class文件、操作系统生成的文件、包含敏感信息的文件等<br>文件模板可见： <a href=\"https://github.com/github/gitignore\" target=\"_blank\" rel=\"noopener\">https://github.com/github/gitignore</a><br>add被ignore的文件类型时，会提示已经ignore并失败，如果一定要上传，有两种选择：<br>一是添加-f参数强制添加：git add -f &lt;filename&gt;<br>二是删除相应规则，可以先查看对应的是哪条规则：git check-ignore -v &lt;filename&gt;</p>\n<h2 id=\"3、配置别名\"><a href=\"#3、配置别名\" class=\"headerlink\" title=\"3、配置别名\"></a>3、配置别名</h2><p>添加别名：<br>git config –global alias.&lt;别名&gt; &lt;命令&gt;，–global针对当前用户起效果，不加则只针对当前仓库<br>例如，<br>git config –global alias.st status，st表示status<br>git config –global alias.co checkout，co表示checkout<br>git config –global alias.ci commit，ci表示commit<br>git config –global alias.br branch，br表示branch<br>git config –global alias.unstage ‘reset HEAD’，unstage表示撤销暂存区<br>git config –global alias.last ‘log -1’，last显示最后一次提交信息<br>git config –global alias.lg “log –color –graph –pretty=format:’%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset’ –abbrev-commit”，lg显示提交图<br>删除别名：<br>Git仓库配置文件：打开 .git/config/.gitconfig<br>Git用户配置文件：~/.gitconfig<br>在[alias]段落中配置了别名规则，修改文件内容即可</p>\n<h1 id=\"继续深入\"><a href=\"#继续深入\" class=\"headerlink\" title=\"继续深入\"></a>继续深入</h1><p>1、命令详解<br>参见Git官网： <a href=\"https://git-scm.com/docs\" target=\"_blank\" rel=\"noopener\">https://git-scm.com/docs</a><br>2、Pro Git<br>官网推荐书籍，内容详实<br>豆瓣读书： <a href=\"https://book.douban.com/subject/26208470/\" target=\"_blank\" rel=\"noopener\">https://book.douban.com/subject/26208470/</a><br>官网阅读： <a href=\"https://git-scm.com/book/en/v2\" target=\"_blank\" rel=\"noopener\">https://git-scm.com/book/en/v2</a></p>\n<h1 id=\"拓展阅读\"><a href=\"#拓展阅读\" class=\"headerlink\" title=\"拓展阅读\"></a>拓展阅读</h1><p>《常用 Git 命令清单》 <a href=\"http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html</a><br>《Git 工作流程》 <a href=\"http://www.ruanyifeng.com/blog/2015/12/git-workflow.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2015/12/git-workflow.html</a><br>《Git 使用规范流程》 <a href=\"http://www.ruanyifeng.com/blog/2015/08/git-use-process.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2015/08/git-use-process.html</a><br>《Git分支管理策略》 <a href=\"http://www.ruanyifeng.com/blog/2012/07/git.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2012/07/git.html</a><br>《GitHub Flow》 <a href=\"http://scottchacon.com/2011/08/31/github-flow.html\" target=\"_blank\" rel=\"noopener\">http://scottchacon.com/2011/08/31/github-flow.html</a><br>《Commit message 和 Change log 编写指南》 <a href=\"http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html</a><br>《Github 的清点对象算法》 <a href=\"http://www.ruanyifeng.com/blog/2015/09/git-bitmap.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2015/09/git-bitmap.html</a></p>\n<p>参考：<br><a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"noopener\">http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000</a><br><a href=\"http://www.ruanyifeng.com/blog/2014/06/git_remote.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2014/06/git_remote.html</a></p>\n","categories":["工具"],"tags":["工具","Git"]},{"title":"Git入门","url":"http://dotrabbit.tk/工具/000137-Git入门/","content":"<p>源地址：<a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"noopener\">Git简介 - 廖雪峰的官方网站</a></p>\n<h1 id=\"Git简介\"><a href=\"#Git简介\" class=\"headerlink\" title=\"Git简介\"></a>Git简介</h1><p>git是目前世界上最先进的分布式版本控制系统<br>版本控制帮助我们管理文件改动，和协作编辑</p>\n<h2 id=\"Git的诞生\"><a href=\"#Git的诞生\" class=\"headerlink\" title=\"Git的诞生\"></a>Git的诞生</h2><p>Git是由Linux的创始人Linus花两周时间为Linux用C编写的分布式版本控制系统</p>\n<h2 id=\"集中式vs分布式\"><a href=\"#集中式vs分布式\" class=\"headerlink\" title=\"集中式vs分布式\"></a>集中式vs分布式</h2><p>CVS和SVN是集中式的：<br>1、版本库集中存放在中央服务器<br>2、必须联网才能工作<br>Git是分布式版本控制系统：<br>1、没有“中央服务器”的概念<br>2、每个电脑上都是一个完整的版本库<br>3、通过推送修改来完成协作<br>4、通常会设置一台充当“中央服务器”的电脑，但仅仅是为了更方便“交换”所有人的修改，没有也可以工作</p>\n<h1 id=\"安装Git\"><a href=\"#安装Git\" class=\"headerlink\" title=\"安装Git\"></a>安装Git</h1><h2 id=\"在Linux上安装Git\"><a href=\"#在Linux上安装Git\" class=\"headerlink\" title=\"在Linux上安装Git\"></a>在Linux上安装Git</h2><p>1、输入git命令，可能系统已经安装<br>2、如果没有，可以通过apt-get等命令进行安装(参考<a href=\"https://git-scm.com/download/linux\" target=\"_blank\" rel=\"noopener\">https://git-scm.com/download/linux</a>)<br>3、或者下载源码make install安装</p>\n<h2 id=\"在Mac-OS-X上安装Git\"><a href=\"#在Mac-OS-X上安装Git\" class=\"headerlink\" title=\"在Mac OS X上安装Git\"></a>在Mac OS X上安装Git</h2><p>1、输入git命令，查看是否已经安装<br>2、通过Xcode，安装Command Line Tools、<br>3、通过homebrew安装(homebrew参考其官方网站)<br>3、下载：<a href=\"https://git-scm.com/download/mac\" target=\"_blank\" rel=\"noopener\">https://git-scm.com/download/mac</a></p>\n<h2 id=\"在Windows上安装Git\"><a href=\"#在Windows上安装Git\" class=\"headerlink\" title=\"在Windows上安装Git\"></a>在Windows上安装Git</h2><p>下载：<a href=\"https://git-scm.com/downloads\" target=\"_blank\" rel=\"noopener\">https://git-scm.com/downloads</a></p>\n<p>安装完成后可通过以下命令，设置Git的全局用户名和邮箱：<br><strong> <em> git config –global user.name “Your Name” </em> </strong><br><strong> <em> git config –global user.email “<a href=\"mailto:email@example.com\" target=\"_blank\" rel=\"noopener\">email@example.com</a>“ </em> </strong><br>所有仓库都将使用该配置，也可以对某个仓库指定不同的</p>\n<h1 id=\"创建版本库\"><a href=\"#创建版本库\" class=\"headerlink\" title=\"创建版本库\"></a>创建版本库</h1><p>版本库，又叫仓库，英文为repository<br>可以理解成一个目录，目录下所有文件都被Git管理，追踪文件的修改删除等操作，可以查询历史，或还原<br>1、初始化Git仓库<br>在任何目录下，使用命令：<br><strong> <em> git init </em> </strong><br>即可将目录变成Git管理的仓库，目录下出现.git隐藏文件夹(一般不要手动更改其中内容)<br>2、添加文件到Git仓库<br>在Git仓库下，新建文件，如readme.txt，内容为：<br>Git is a version control system.<br>Git is free software.<br>使用以下命令，将文件添加到仓库：<br><strong> <em> git add readme.txt </em> </strong><br>可以添加多个文件<br>使用以下命令，将文件提交到仓库：<br><strong> <em> git commit -m “wrote a readme file” </em> </strong><br>-m指定提交说明</p>\n<p>注：<br>Git像其他所有版本控制系统一样，只跟踪文本文件的改动，如txt、网页、源代码等，可以记录每次改动的位置和内容<br>像图片、视频、office文件等二进制格式的文件，只能记录文件有所改动，而不能记录改动内容<br>文本编码强烈建议使用UTF-8</p>\n<p>参考：<br><a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"noopener\">http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000</a></p>\n","categories":["工具"],"tags":["工具","Git"]},{"title":"关于Web Services","url":"http://dotrabbit.tk/Web/000136-关于Web Services/","content":"<h1 id=\"Web-Services简介\"><a href=\"#Web-Services简介\" class=\"headerlink\" title=\"Web Services简介\"></a>Web Services简介</h1><p>Web Services的主要目的是实现跨平台、跨语言、跨系统的功能调用和数据传输<br>Web Services = HTTP + XML，具有平台无关性<br>使不同实现方式的应用间可以进行数据传输，可以用来完成面向服务的架构，实现应用松耦合、高复用、模块化等<br>因为基于HTTP，因此可以绕过防火墙</p>\n<h1 id=\"Web-Services核心概念\"><a href=\"#Web-Services核心概念\" class=\"headerlink\" title=\"Web Services核心概念\"></a>Web Services核心概念</h1><p>1、WSDL：<br>全称Web Services Description Language，ws描述语言<br>基于XML，用于描述ws的地址、服务、调用方式、返回参数等<br>系统之间通过WSDL交流，服务端发布WSDL，客户端根据WSDL调用方法获取数据<br>2、SOAP：<br>全称Simple Object Access Protocol，简单对象访问协议<br>协议定义了通信方式(HTTP，也可以是SMTP、消息队列等)和通信内容(XML)<br>通信方式：HTTP，只使用POST方式<br>通信内容：使用SOAP Envelope命名空间的xml<br>SOAP目前有两个版本，1.1和1.2，区别：<br>a. 对于HTTP header，1.1中Content-Type为text/xml，1.2中为application/soap+xml<br>b. 对于HTTP header，1.1中有SOAPAction行，1.2没有<br>c. xmlns不同(<a href=\"http://www.cnblogs.com/JeffreySun/archive/2009/12/14/1623766.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/JeffreySun/archive/2009/12/14/1623766.html</a>)</p>\n<p>以上具体内容可参见：<br><a href=\"http://www.w3school.com.cn/wsdl/index.asp\" target=\"_blank\" rel=\"noopener\">http://www.w3school.com.cn/wsdl/index.asp</a><br><a href=\"http://www.w3school.com.cn/soap/index.asp\" target=\"_blank\" rel=\"noopener\">http://www.w3school.com.cn/soap/index.asp</a><br><a href=\"http://blog.csdn.net/steveguoshao/article/details/8657745\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/steveguoshao/article/details/8657745</a></p>\n<h1 id=\"Java实现Web-Services\"><a href=\"#Java实现Web-Services\" class=\"headerlink\" title=\"Java实现Web Services\"></a>Java实现Web Services</h1><h2 id=\"1、使用JAX-WS\"><a href=\"#1、使用JAX-WS\" class=\"headerlink\" title=\"1、使用JAX-WS\"></a>1、使用JAX-WS</h2><p><a href=\"http://www.cnblogs.com/yisheng163/p/4524808.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/yisheng163/p/4524808.html</a><br><a href=\"http://docs.oracle.com/cd/E17904_01/web.1111/e13734/\" target=\"_blank\" rel=\"noopener\">http://docs.oracle.com/cd/E17904_01/web.1111/e13734/</a></p>\n<h2 id=\"2、使用AXIS2开发\"><a href=\"#2、使用AXIS2开发\" class=\"headerlink\" title=\"2、使用AXIS2开发:\"></a>2、使用AXIS2开发:</h2><p><a href=\"http://blog.csdn.net/xumengxing/article/details/13093573\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/xumengxing/article/details/13093573</a><br><a href=\"http://axis.apache.org/axis2/java/core/docs/quickstartguide.html\" target=\"_blank\" rel=\"noopener\">http://axis.apache.org/axis2/java/core/docs/quickstartguide.html</a></p>\n<h2 id=\"3、Spring整合\"><a href=\"#3、Spring整合\" class=\"headerlink\" title=\"3、Spring整合\"></a>3、Spring整合</h2><p><a href=\"http://axis.apache.org/axis2/java/core/docs/spring.html\" target=\"_blank\" rel=\"noopener\">http://axis.apache.org/axis2/java/core/docs/spring.html</a></p>\n<h2 id=\"4、开启Session\"><a href=\"#4、开启Session\" class=\"headerlink\" title=\"4、开启Session\"></a>4、开启Session</h2><p>JAX-WS: <a href=\"http://docs.oracle.com/cd/E17904_01/web.1111/e13734/stateful.htm#WSADV234\" target=\"_blank\" rel=\"noopener\">http://docs.oracle.com/cd/E17904_01/web.1111/e13734/stateful.htm#WSADV234</a><br>AXIS2: <a href=\"http://axis.apache.org/axis2/java/core/docs/jaxws-guide.html#HTTPSession\" target=\"_blank\" rel=\"noopener\">http://axis.apache.org/axis2/java/core/docs/jaxws-guide.html#HTTPSession</a></p>\n","categories":["Web"],"tags":["Web"]},{"title":"《黑镜》第三季","url":"http://dotrabbit.tk/生活杂记/000136-《黑镜》第三季/","content":"<p>　　第一集，每个人给每个人打分的时代，分数影响你生活的一切。<br>　　从结尾监狱对骂，暂且理解作者是要表达排解情绪的重要性吧……<br>靠人主观打分来评价的世界，存在根基就很薄弱，根不深，思考自然就没有了。</p>\n<p>　　第二集，旅客为凑钱参加虚拟现实游戏实验，因忘关手机身亡。<br>　　评论说最可怕的一集，像玩儿VR版的生化危机7一样。<br>　　片子里是增强版的VR，增强指两方面，一是不光视觉，而是完全身临其境。二是内容不是提前设定死的，而是根据游戏者的记忆提取营造的，进而导致最后悲剧发生。<br>结论是，不要往身上嵌入电子设备……</p>\n<p>　　第三集，妹妹上网用哥哥电脑，中了病毒哥哥下载360清除，结果被开启摄像头录下了打飞机，然后被操纵抢劫，最后还是被曝光……<br>　　好像跟科幻都没关系了这集……结论是，不要把电脑借给妹妹用……</p>\n<p>　　第四集，老年人的虚拟青春体验，局域网网恋加同性恋加黄昏恋，最后幸福地生活在了一起<br>　　感动无数网友，然而并没什么精神内核，叙事手法营造的意外而已，一个简单的爱情故事。</p>\n<p>　　第五集，士兵被植入AR程序杀害DNA缺陷人，发现真相后又被VR，最后没办法选择被重置……<br>　　设定本身比较上帝视角，既能AR又能VR又能重置记忆，其实完全不用考虑人权，随意操纵就好了……也就不会有故事里揭露真相的过程，有些为了讲故事而讲故事的感觉。<br>　　不过这集还是挺让人有思考的，首先是PTSD，创伤后应激障碍，为了规避士兵杀人的PTSD，利用增强现实使士兵以为在杀怪物。是不是我们所有的不顺利，都可以用视觉来美化？当我们的视嗅听被遮掩，我们还凭什么来判断虚拟和现实，真相和错误？然后是人的自由意志，当big brother掌握了你的感官甚至是记忆的时候，你就丢失了自己的价值观，只是一件工具罢了。DNA缺陷的人被下令屠杀，士兵被控制实施屠杀，所有人的意志都不重要了，甚至连洗脑也不重要。反观现在，虽然科技还没有那么发达，但是教育和媒体，不也在做同样的工作吗？<br>　　然后，结论是，不要往身上嵌入电子设备……</p>\n<p>　　第六集，反社会工程师发起微博话题杀人，设下圈套使警方按下回车导致参加话题所有人被杀<br>　　这集虽然一个半小时，但是观感却是最流畅的，三场蜜蜂杀人，到最后的圈套，没有让人感到无聊想快进的地方，虽然结尾假死跟踪直接结束有些刻意留白……<br>　　尽管如此，故事本身比较一般，科幻上的bug很多，很多观众的疑点没有给解释，诸如为什么不带头盔不去地下不去水里不用磁铁不用EMP等……寓意上也比较浅，机器蜂的概念没有展开，只是作为一个杀人载体，表达了网络暴力的可怕而已，跟第二个故事一样没有想象力。</p>\n<p>　　第一次看黑镜，看到很多弹幕说失望，交手Netflix之后质量下滑严重。没看过前两季所以无从比较，但从评论中也能提取出前两季的质感，至少是科幻的延展的充满想象的。<br>　　而这一季看下来，除了有一些点子确实可以算奇思妙想外，没什么惊艳的地方，包括叙事，包括主题。美剧惯有的简单粗暴，一个简单主题可以平铺直叙整整一集，而且铺垫节奏缓慢，为了结尾爆发而强行拖时间，然而结尾也没有爆发出来，因为没有思想内核。<br>　　看完了第三季紧接着看了圣诞特别篇白色圣诞节，确实要惊艳很多，表达了多个主题，每一个科幻的点子都是为主题服务的，科技的发展没那么突飞猛进，但却足够亮眼，而且能够自圆其说。从开头的视网膜直播，中间的吵架屏蔽，到最后的抽取意识打杂，和类似于催眠的意识中交流认罪，层层递进娓娓道来，贯穿始终的孤独感，给人无限的思考空间。反观第三季，只继承到了结尾的被所有人屏蔽这样的黑色结局，但是没有前面的蜿蜒，后面的戛然实在有些突兀。<br>　　下一季由朱迪福斯特指导了，希望可以变好些，虽然目前还没看到什么有利因素……</p>\n","categories":["生活杂记"],"tags":["生活杂记","电影"]},{"title":"《降临》和非零和理论","url":"http://dotrabbit.tk/生活杂记/000135-《降临》和非零和理论/","content":"<p>　　很早之前就看了《降临》的预告片，但上映的时候工作忙没去看，春节回来才找了周末看了。看完电影的感觉是，这片子的确是一个披着科幻外衣的文艺电影。<br>　　相对于物理上的合理性，片子把大部分笔墨都放在了语言符号上面，至于看到未来后，行动是否会改变、不行动是否会不改变、改变的话会有什么衍生影响，都没有给出一个完整的模型。杰瑞米雷纳扮演的物理学家相对于赴险上前线研究的科学英雄，更像是成功女人背后的沉默男人……专业知识上并没有相关贡献，唯一起到的作用是陪伴……和结尾时意义不大的挡门，在飞船里的作用甚至不如探测空气的笼子里的鸟。<br>　　可以看出导演是想拍出《星际穿越》的感觉的（虽然为了区别于《星际穿越》而特意取消了原著中飞船给各个国家传授了不同技能的设定），然而剪辑略显苍白了，闪回平淡缓慢，而现实仍然平淡缓慢……导致整部片子都给人一种闷闷的感觉，科幻得软得过分。<br>　　而作为一部文艺片，片子的情感动机也显得牵强。本片最大的内核就是“我预见了所有悲伤，但我依然愿意前往”，也就是爱情版的“明知山有虎，偏向虎山行”……可以用很多词来评价这种行为，勇敢，浪漫，或者，轴。如果女主是在怀孕后预见了女儿会早夭，但毅然决然选择生产并陪伴，尚且可以理解为出于母性，感于血浓于水的天然情感纽带。而剧情是女主认识男主之前便看到了婚后丈夫离开女儿去世的结局，而且与男主并无太多情感互动的情况下，还是选择恋爱结婚生子离婚，难以让人信服和代入，进而产生感动。另外，对于女主并不尝试改变结局的做法也没有给出解释。<br>　　对于结尾女主获取到中国将军电话号码的情节，有影评说这是表达了“不是既是因又是果，而是本无因果，从虚无中产生因果”的禅的意味，虽然不太理解，但是感觉挺有趣，或许如假说里，语言限制了我们看待事物时的思考吧。<br>　　影片最让我感兴趣的，是闪回片段中提到的non-zero-sum game，即非零和博弈。“博弈中各方的收益或损失的总和不是零值”，总和可以为正，也可以为负，如恋爱中双方的博弈。最具代表性的囚徒困境，是挺有趣的博弈，且在单次进行，和确定次数的重复进行，以及不确定次数的重复进行的情况下，还会衍生不同的结果。理性利己前提，像初中军训时讨论的海盗分硬币问题一样~知乎上有人问人生是零和博弈还是非零和博弈，有人回答是非零和博弈，因为人可以从逆境中寻找意义，可以产生并不存在的东西，挺有趣。其实对生活并没有什么作用……希望可以有一天需要说服别人合作时，可以摘下眼镜，在手里边把玩，边幽幽说道，你知道经济学中有一个原理叫非零和博弈么……如果有这种情境的话，如果我有眼镜的话……<br>　　最后，电影最让我不满的地方，是把中国将军跟外星人打麻将，比作下国际象棋，简直生气……国际象棋怎么可以跟麻将相比，麻将这么舒缓身心陶冶情操的运动……相比于国际象棋，麻将无论从受众、内涵、变化和社交等附加属性上来讲都是不可被比拟的，而且，麻将到底是不是零和博弈，我觉得有待讨论……</p>\n","categories":["生活杂记"],"tags":["生活杂记","电影"]},{"title":"LeetCode-387.First Unique Character in a String","url":"http://dotrabbit.tk/算法/000133-LeetCode-387.First Unique Character in a String/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Given a string, find the first non-repeating character in it and return it’s index. If it doesn’t exist, return -1.</p>\n<p><strong>Examples:</strong><br>s = “leetcode”<br>return 0.</p>\n<p>s = “loveleetcode”,<br>return 2.</p>\n<p><strong>Note:</strong> You may assume the string contain only lowercase letters.</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>给出一个字符串，找出第一个未重复的字符，并返回其下标。如果不存在，返回-1。<br>例如：<br>s = “leetcode”，返回0。<br>s = “loveleetcode”，返回2<br>注意：<br>你可以认为字符串只包含小写字母</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><p>第一个无重复字母，即只出现一次的所有字母中，位置最靠前的。<br>首先求出现次数：因为只有小写字母，利用一个长度为26的int数组，记录每个字母出现的次数。<br>然后求最靠前的：遍历数组，当值为1时即为无重复字符，所有满足条件的字母中，位置最靠前的即为所求：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">firstUniqChar</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] chars = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">26</span>];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> minIndex = s.length();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">char</span> c : s.toCharArray()) chars[c - <span class=\"string\">'a'</span>]++;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">26</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (chars[i] == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> index = s.indexOf((<span class=\"keyword\">char</span>) (<span class=\"string\">'a'</span> + i));</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (index &lt; minIndex) minIndex = index;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> minIndex == s.length() ? -<span class=\"number\">1</span> : minIndex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","categories":["算法"],"tags":["算法","LeetCode"]},{"title":"LeetCode-409.Longest Palindrome","url":"http://dotrabbit.tk/算法/000132-LeetCode-409.Longest Palindrome/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Given a string which consists of lowercase or uppercase letters, find the length of the longest palindromes that can be built with those letters.</p>\n<p>This is case sensitive, for example “Aa” is not considered a palindrome here.</p>\n<p><strong>Note:</strong><br>Assume the length of given string will not exceed 1,010.</p>\n<p><strong>Example:</strong><br>Input:<br>“abccccdd”</p>\n<p>Output:<br>7</p>\n<p>Explanation:<br>One longest palindrome that can be built is “dccaccd”, whose length is 7.</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>给出由大写字母或小写字母组成的字符串，找出可由这些字母组成的最长的回文字符串。<br>大小写敏感，例如”Aa”在这里不是回文的。<br>注意：假设给出字符串的长度不超过1010.<br>例如：<br>输入：”abccccdd”<br>输出：7<br>解释：可构造的最长回文字符串为”dccaccd”，长度为7。</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><h2 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2><p>利用int数组，记录每个字母出现次数<br>ASCII中，65到90为A-Z，97到122为a-z，中间有6个字符，所以可以设立一个长度为58的int数组；<br>回文字符串有两种情况：A.全都是成对字符，B.除成对字符外，有一个单独的字符，<br>对每个字母出现次数判断，当对2求余为0时，直接计入总和，当对2求余为1时，计入偶数部分，同时更新标识位，最后结果加1：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">longestPalindrome</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> isSingle = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] chars = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">58</span>];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> sumLen = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">char</span> c : s.toCharArray()) chars[c - <span class=\"string\">'A'</span>]++;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i : chars) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i % <span class=\"number\">2</span> == <span class=\"number\">0</span>) sumLen += i;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                isSingle = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                sumLen += i - <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> isSingle ? sumLen + <span class=\"number\">1</span> : sumLen;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Runtime: 9 ms</p>\n<h2 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2><p>设立Set，每个字母出现第一次加入，第二次则删除，总数加2。若最后Set不为空，总数加1：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">longestPalindrome</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">        Set&lt;Character&gt; chars = <span class=\"keyword\">new</span> HashSet&lt;Character&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> sumLen = <span class=\"number\">0</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">char</span> c : s.toCharArray()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (chars.contains(c)) &#123;</span><br><span class=\"line\">                sumLen += <span class=\"number\">2</span>;</span><br><span class=\"line\">                chars.remove(c);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> chars.add(c);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> chars.isEmpty() ? sumLen : sumLen + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Runtime: 19 ms</p>\n<p>参考：<br><a href=\"http://blog.csdn.net/u012985132/article/details/52738055\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/u012985132/article/details/52738055</a></p>\n","categories":["算法"],"tags":["算法","LeetCode"]},{"title":"LeetCode-383.Ransom Note","url":"http://dotrabbit.tk/算法/000131-LeetCode-383.Ransom Note/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Given an arbitrary ransom note string and another string containing letters from all the magazines, write a function that will return true if the ransom note can be constructed from the magazines ; otherwise, it will return false.</p>\n<p>Each letter in the magazine string can only be used once in your ransom note.</p>\n<p><strong>Note:</strong><br>You may assume that both strings contain only lowercase letters.</p>\n<p>canConstruct(“a”, “b”) -&gt; false<br>canConstruct(“aa”, “ab”) -&gt; false<br>canConstruct(“aa”, “aab”) -&gt; true</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>给出一个赎金字条字符串，和另一个包含杂志上所有字母的字符串，编写函数，当可以用杂志字母组成赎金字符串时返回true，否则返回false。<br>杂志字符串中的每个字母在赎金字条中只能使用一次。<br>注意：你可以认为两个字符串都只包含小写字母。<br>canConstruct(“a”, “b”) -&gt; false<br>canConstruct(“aa”, “ab”) -&gt; false<br>canConstruct(“aa”, “aab”) -&gt; true</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><p>因为都是小写字母，所以可以用一个长度为26的数组来记录每个字母出现次数：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">canConstruct</span><span class=\"params\">(String ransomNote, String magazine)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] chars = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">26</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">char</span> c : magazine.toCharArray()) chars[c - <span class=\"string\">'a'</span>]++;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">char</span> c : ransomNote.toCharArray()) <span class=\"keyword\">if</span> (--chars[c - <span class=\"string\">'a'</span>] &lt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Runtime: 14 ms</p>\n","categories":["算法"],"tags":["算法","LeetCode"]},{"title":"LeetCode-389.Find the Difference","url":"http://dotrabbit.tk/算法/000130-LeetCode-389.Find the Difference/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Given two strings <strong> <em> s </em> </strong> and <strong> <em> t </em> </strong> which consist of only lowercase letters.</p>\n<p>String <strong> <em> t </em> </strong> is generated by random shuffling string <strong> <em> s </em> </strong> and then add one more letter at a random position.</p>\n<p>Find the letter that was added in <strong> <em> t </em> </strong>.</p>\n<p><strong>Example:</strong></p>\n<p>Input:<br>s = “abcd”<br>t = “abcde”</p>\n<p>Output:<br>e</p>\n<p>Explanation:<br>‘e’ is the letter that was added.</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>给出两个由小写字母组成的字符串，s和t。<br>字符串t是由字符串s经过随机整理后，在一个随机位置增加一个字母生成的。<br>找出t中增加的字母。<br>例如：<br>输入：s = “abcd”，t = “abcde”<br>输出：e<br>解释：字母’e’是增加的</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><h2 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2><p>第一想法便是利用加减，将t所有字母的和，减去s所有字母的和，即为所求：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">char</span> <span class=\"title\">findTheDifference</span><span class=\"params\">(String s, String t)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = s.length();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">            sum += t.charAt(i);</span><br><span class=\"line\">            sum -= s.charAt(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        sum += t.charAt(len);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Runtime: 7 ms</p>\n<h2 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2><p>类似136. Single Number，将方法一改为采用异或：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">char</span> <span class=\"title\">findTheDifference</span><span class=\"params\">(String s, String t)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = s.length();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">            sum ^= t.charAt(i);</span><br><span class=\"line\">            sum ^= s.charAt(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        sum ^= t.charAt(len);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Runtime: 7 ms</p>\n<h2 id=\"方法三\"><a href=\"#方法三\" class=\"headerlink\" title=\"方法三\"></a>方法三</h2><p>记录一个Map，将s中所有字母放入，并记录出现次数，然后遍历t，减去相应字母，当出现-1次的字母便是所求：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">char</span> <span class=\"title\">findTheDifference</span><span class=\"params\">(String s, String t)</span> </span>&#123;</span><br><span class=\"line\">        Map&lt;Character, Integer&gt; chars = <span class=\"keyword\">new</span> HashMap&lt;Character, Integer&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">char</span> c : s.toCharArray())</span><br><span class=\"line\">            chars.put(c, chars.get(c) == <span class=\"keyword\">null</span> ? <span class=\"number\">1</span> : chars.get(c) + <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">char</span> c : t.toCharArray()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (chars.get(c) == <span class=\"keyword\">null</span> || chars.get(c) == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">            chars.put(c, chars.get(c) - <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">' '</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Runtime: Time Limit Exceeded</p>\n<h2 id=\"方法四\"><a href=\"#方法四\" class=\"headerlink\" title=\"方法四\"></a>方法四</h2><p>因为都是小写字母，所以可以用一个长度为26的数组来代替方法三中的map，记录每个字母出现次数：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">char</span> <span class=\"title\">findTheDifference</span><span class=\"params\">(String s, String t)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] chars = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">26</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">char</span> c : s.toCharArray()) chars[c - <span class=\"string\">'a'</span>]++;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">char</span> c : t.toCharArray()) <span class=\"keyword\">if</span> (--chars[c - <span class=\"string\">'a'</span>] == -<span class=\"number\">1</span>) <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">' '</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Runtime: 8 ms</p>\n<p>参考：<br><a href=\"http://www.cnblogs.com/grandyang/p/5816418.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/grandyang/p/5816418.html</a></p>\n","categories":["算法"],"tags":["算法","LeetCode"]},{"title":"LeetCode-404.Sum of Left Leaves","url":"http://dotrabbit.tk/算法/000129-LeetCode-404.Sum of Left Leaves/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Find the sum of all left leaves in a given binary tree.</p>\n<p>Example:</p>\n<p>　　　3<br>　　/　\\<br>　9　　　20<br>　　　　/　\\<br>　　　15　　7</p>\n<p>There are two left leaves in the binary tree, with values 9 and 15 respectively. Return 24.</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>给出一颗二叉树，找出所有左叶子结点的和。<br>例如：<br>　　　3<br>　　/　\\<br>　9　　　20<br>　　　　/　\\<br>　　　15　　7<br>树中有两个左叶子节点，值分别为9和15。返回24。</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><p>先序遍历，注意当根不为空时，需要判断其左孩子是否为叶子节点，若是则加和，并且可跳过左孩子遍历，若不是继续遍历：<br>A.根为空，返回0；<br>B.根左孩子为叶子节点，返回左孩子值和遍历右孩子的值的和；<br>C.根左孩子不为叶子节点，返回遍历左孩子的值和遍历右孩子的值的和：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * public class TreeNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode left;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode right;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">sumOfLeftLeaves</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root.left != <span class=\"keyword\">null</span> &amp;&amp; root.left.left == <span class=\"keyword\">null</span> &amp;&amp; root.left.right == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> root.left.val + sumOfLeftLeaves(root.right);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> sumOfLeftLeaves(root.left) + sumOfLeftLeaves(root.right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","categories":["算法"],"tags":["算法","LeetCode"]},{"title":"LeetCode-136.Single Number","url":"http://dotrabbit.tk/算法/000128-LeetCode-136.Single Number/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Given an array of integers, every element appears twice except for one. Find that single one.</p>\n<p><strong>Note:</strong><br>Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>给出一个整数数组，其中除了一个元素外，其他元素均出现了两次。找出单身的那个。<br>注意：你的算法的时间复杂度应当时线性的。你可以不使用额外空间实现吗？</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><p>题目要求线性运行时间，并且不使用额外空间，因此利用异或运算。<br>根据异或运算的特性：<br>A. a ^ b = b ^ a<br>B. 0 ^ a = a<br>C. 0 ^ 0 = 0<br>可得出结论：将所有数字逐一进行异或，即可得结果：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">singleNumber</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> num : nums)</span><br><span class=\"line\">          res ^= num;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Runtime: 2 ms</p>\n<h1 id=\"拓展\"><a href=\"#拓展\" class=\"headerlink\" title=\"拓展\"></a>拓展</h1><h2 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2><p>逐个比较，时间复杂度O(n2)，空间复杂度O(1)<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">singleNumber</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = nums.length;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> ( ; j &lt; len; j++)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (nums[i] == nums[j] &amp;&amp; i != j) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (j == len) <span class=\"keyword\">return</span> nums[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> nums[len - <span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Runtime: 117 ms</p>\n<h2 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2><p>维护一个List，开始为空，出现未包含数字则加入，再次出现则删除，最后剩下一个元素即是。时间复杂度O(1)，空间复杂度O(n)<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">singleNumber</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;Integer&gt; numRecord = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> num : nums) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> index = numRecord.indexOf(num);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (index == -<span class=\"number\">1</span>) numRecord.add(num);</span><br><span class=\"line\">            <span class=\"keyword\">else</span> numRecord.remove(index);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> numRecord.get(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Runtime: 193 ms</p>\n<h2 id=\"方法三\"><a href=\"#方法三\" class=\"headerlink\" title=\"方法三\"></a>方法三</h2><p>先排序，此时有三种情况：A.唯一数字在头部；B.唯一数字在尾部；C.唯一数字在中间，分别判断即可。时间复杂度O(nlgn)（取决于排序），空间复杂度O(n)（不影响原数组情况下）<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">singleNumber</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = nums.length;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (len == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] sortedNums = Arrays.copyOf(nums, len);</span><br><span class=\"line\">        Arrays.sort(sortedNums);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sortedNums[<span class=\"number\">0</span>] != sortedNums[<span class=\"number\">1</span>]) <span class=\"keyword\">return</span> sortedNums[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sortedNums[len - <span class=\"number\">1</span>] != sortedNums[len - <span class=\"number\">2</span>]) <span class=\"keyword\">return</span> sortedNums[len - <span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; len - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (sortedNums[i - <span class=\"number\">1</span>] != sortedNums[i] &amp;&amp; sortedNums[i] != sortedNums[i + <span class=\"number\">1</span>]) <span class=\"keyword\">return</span> sortedNums[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Runtime: 8 ms</p>\n<p>参考：<br><a href=\"http://www.cnblogs.com/changchengxiao/p/3413294.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/changchengxiao/p/3413294.html</a><br><a href=\"http://www.powerxing.com/leetcode-single-number/\" target=\"_blank\" rel=\"noopener\">http://www.powerxing.com/leetcode-single-number/</a></p>\n","categories":["算法"],"tags":["算法","LeetCode"]},{"title":"LeetCode-412.Fizz Buzz","url":"http://dotrabbit.tk/算法/000127-LeetCode-412.Fizz Buzz/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Write a program that outputs the string representation of numbers from 1 to n.</p>\n<p>But for multiples of three it should output “Fizz” instead of the number and for the multiples of five output “Buzz”. For numbers which are multiples of both three and five output “FizzBuzz”.</p>\n<p><strong>Example:</strong></p>\n<p>n = 15,</p>\n<p>Return:<br>[<br>　　“1”,<br>　　“2”,<br>　　“Fizz”,<br>　　“4”,<br>　　“Buzz”,<br>　　“Fizz”,<br>　　“7”,<br>　　“8”,<br>　　“Fizz”,<br>　　“Buzz”,<br>　　“11”,<br>　　“Fizz”,<br>　　“13”,<br>　　“14”,<br>　　“FizzBuzz”<br>]</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>编写程序，输出从1到n的字符串<br>但当遇到3的倍数时，输出”Fizz”；当遇到5的倍数时，输出”Buzz”。当遇到既是3又是5的倍数的数字时，输出”FizzBuzz”。</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><p>一共四种情况：<br>A.既能被3又能被5整除，放入FizzBuzz；<br>B.只能被3整除，放入Fizz；<br>C.只能被5整除，放入Buzz；<br>D.既不能被3整除又不能被5整除，放入当前数字。<br>按照顺序判断即可，但判断A情况时不用先判断3再判断5，直接判断是否可被15整除即可：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">fizzBuzz</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;String&gt; res = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">            String cur = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i % <span class=\"number\">15</span> == <span class=\"number\">0</span>) cur = <span class=\"string\">\"FizzBuzz\"</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (i % <span class=\"number\">3</span> == <span class=\"number\">0</span>) cur = <span class=\"string\">\"Fizz\"</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (i % <span class=\"number\">5</span> == <span class=\"number\">0</span>) cur = <span class=\"string\">\"Buzz\"</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> cur += i;</span><br><span class=\"line\">            res.add(cur);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["算法"],"tags":["算法","LeetCode"]},{"title":"2016年终总结","url":"http://dotrabbit.tk/生活杂记/000126-2016年终总结/","content":"<p>　　既然写博客，一定免不了年终总结的俗，对过去一年的沉淀，对未来一年的参考。</p>\n<h1 id=\"关于工作\"><a href=\"#关于工作\" class=\"headerlink\" title=\"关于工作\"></a>关于工作</h1><p>　　在我理解，工作无非为了两件事，赚钱和自我实现，这两个目标应该不是并列关系，而是递进的。<br>　　对于第一个，今年还是老样子……对于第二个，倒是有不小的进步。<br>　　今年完成了移动项目服务端的开发，并且领导了移动端的推进，虽然团队很小，但是也算自己带人完成了项目，还是很有自豪感的，赶在年底上线了机场，算是对这个世界有所影响。<br>　　其他增量开发和维护的工作林林总总，也有不小的工作量，学习了不少新知识，无论开发还是上线，框架还是硬件。下半年出差上线，对这个世界的影响更大了。<br>　　总体来讲，是值得欣慰的一年。</p>\n<h1 id=\"关于学习\"><a href=\"#关于学习\" class=\"headerlink\" title=\"关于学习\"></a>关于学习</h1><p>　　学习是一辈子的事情，从去年开始记日记，到今年的读书笔记、学习笔记，以及维护的博客，技术文章、解题记录，感觉自己变化还是挺大的，学习的主观能动性提升了许多，而且跃过了不求甚解的阶段，开始记录和沉淀，现阶段目标是看过的东西都能变成自己的，长期目标是自己的东西能影响别人。</p>\n<h1 id=\"关于旅行\"><a href=\"#关于旅行\" class=\"headerlink\" title=\"关于旅行\"></a>关于旅行</h1><p>　　6月份完成了第一个自己规划自己实施自己享受的一个人的旅行，去了趟香港，去了维多利亚港去了兰桂坊去了迪士尼，很尽兴。<br>　　国庆假期跟另外七个小伙伴一起自驾游了川西，两辆车分别从成都重庆出发，路况和高反都很痛苦，但是稻城亚丁的美景和共同的体验很珍贵。<br>希望明年可以去更多的地方，有更多的回忆。</p>\n<h1 id=\"关于音乐\"><a href=\"#关于音乐\" class=\"headerlink\" title=\"关于音乐\"></a>关于音乐</h1><p>　　今年看了四场演唱会。<br>　　在香港红馆看了五月天，在五棵松看了周杰伦，在鸟巢又看了五月天，在鸟巢看了陈奕迅。<br>　　看演唱会不是为了追星，是为了沉浸在那种氛围里，享受音乐的洗礼。唯一美中不足是没有一场是跟女朋友看的，因为没有女朋友……</p>\n<h1 id=\"关于电影\"><a href=\"#关于电影\" class=\"headerlink\" title=\"关于电影\"></a>关于电影</h1><p>　　除了日记和博客，还在豆瓣上维护了看过的电影，回望一年，颇有成就。电影是梦想，爱电影就是爱生活，看电影不只是娱乐，也学到了许多东西，有机会再总结电影教给我的事。这里汇总今年看的片单和日期如下：<br>2016.01.04 《007：幽灵党》<br>2016.01.15 《恐怖直播》<br>2016.01.24 《追击者》<br>2016.01.31 《万万没想到》<br>2016.02.03 《功夫熊猫3》 @CGV 4DX<br>2016.02.10 《美人鱼》 @邯郸大剧院<br>2016.02.16 《神探夏洛克：可恶的新娘》<br>2016.02.19 《聚焦》<br>2016.02.20 《飞屋环游记》<br>2016.02.25 《杀人回忆》<br>2016.02.26 《死侍》<br>2016.02.29 《心迷宫》<br>2016.03.01 《我要复仇》<br>2016.03.04 《疯狂动物城》 @万达IMAX<br>2016.03.05 《疯狂动物城》 二刷@CGV<br>2016.03.08 《他其实没那么喜欢你》<br>2016.03.10 《不可饶恕》<br>2016.03.12 《我是杀人犯》<br>2016.03.16 《邻居》<br>2016.03.19 《母亲》<br>2016.03.21 《那家伙的声音》<br>2016.03.22 《万箭穿心》<br>2016.03.26 《抓住那个家伙》<br>2016.03.28 《走到尽头》<br>2016.03.31 《辩护人》<br>2016.04.04 《汉江怪物》<br>2016.04.11 《秘密特工》<br>2016.04.19 《边境杀手》<br>2016.04.22 《致命ID》<br>2016.04.22 《守坝员》<br>2016.04.24 《千与千寻》<br>2016.04.29 《北京遇上西雅图之不二情书》 @中关村美嘉<br>2016.05.08 《美国队长3》 @中关村美嘉<br>2016.05.12 《北京遇上西雅图》<br>2016.06.03 《王牌贱谍：格林斯比》<br>2016.06.08 《真心话大冒险》<br>2016.06.08 《魔兽》 @邯郸UME<br>2016.06.11 《梦醒之前》<br>2016.06.25 《火锅英雄》<br>2016.07.03 《老笠》<br>2016.07.08 《大鱼海棠》 @科技馆<br>2016.07.10 《寒战2》 @moma<br>2016.07.17 《踏雪寻梅》<br>2016.07.18 《树大招风》<br>2016.07.19 《解救吾先生》<br>2016.07.21 《熔炉》<br>2016.07.30 《三人行》<br>2016.08.01 《暗杀》<br>2016.08.03 《夺宝联盟》<br>2016.08.08 《绝地逃亡》 @安贞UME<br>2016.08.14 《24：逆转时空》<br>2016.08.14 《爱宠大机密》 @CGV<br>2016.08.18 《唐人街探案》<br>2016.08.21 《拆弹部队》<br>2016.08.23 《谍影重重5》 @三里屯美嘉<br>2016.09.12 《烈日灼心》<br>2016.09.14 《釜山行》<br>2016.09.15 《追凶者也》<br>2016.09.23 《一个勺子》<br>2016.09.29 《从你的全世界路过》 @春熙路太平洋<br>2016.10.07 《湄公河行动》 @成都<br>2016.10.14 《暗杀游戏》 @CGV<br>2016.10.29 《黑处有什么》<br>2016.11.15 《屏住呼吸》 @旺角朗豪坊<br>2016.11.17 《驴得水》 @东环影城<br>2016.11.18 《玩命直播》<br>2016.11.24 《科比的缪斯》<br>2016.11.24 《伦敦陷落》<br>2016.11.27 《神奇动物在哪里》 @moma<br>2016.12.02 《你的名字》 @科技馆<br>2016.12.04 《机械师2：复活》<br>2016.12.09 《警戒结束》<br>2016.12.10 《自杀小队》<br>2016.12.10 《愤怒的小鸟》<br>2016.12.16 《长城》 @CGV</p>\n","categories":["生活杂记"],"tags":["生活杂记"]},{"title":"编译无效对象","url":"http://dotrabbit.tk/数据库/000125-编译无效对象/","content":"<p>1、PL/SQL Developer，登录后点击compile invalid objects按钮，点击运行；<br>2、运行oracle目录下的utlrp.sql</p>\n<p>可通过命令查询无效对象：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> object_name <span class=\"keyword\">from</span> user_objects <span class=\"keyword\">where</span> <span class=\"keyword\">status</span>=<span class=\"string\">'INVALID'</span></span><br></pre></td></tr></table></figure></p>\n<p>参考：<br><a href=\"http://johnlxj.blog.163.com/blog/static/16586556420144445124767\" target=\"_blank\" rel=\"noopener\">http://johnlxj.blog.163.com/blog/static/16586556420144445124767</a></p>\n","categories":["数据库"],"tags":["Oracle"]},{"title":"Oracle常用命令","url":"http://dotrabbit.tk/数据库/000124-Oracle常用命令/","content":"<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">user</span>    <span class=\"comment\">-- 显示当前用户</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">name</span> <span class=\"keyword\">from</span> v$<span class=\"keyword\">database</span>    <span class=\"comment\">-- 显示当前数据库名</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> instance_name <span class=\"keyword\">from</span> v$<span class=\"keyword\">instance</span>    <span class=\"comment\">-- 显示当前实例名</span></span><br><span class=\"line\"><span class=\"keyword\">show</span> parameter instance_name    <span class=\"comment\">-- 显示当前实例名</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">count</span>(*) <span class=\"keyword\">from</span> user_tables    <span class=\"comment\">-- 查询当前用户表数</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">count</span>(*) <span class=\"keyword\">from</span> user_views    <span class=\"comment\">-- 查询当前用户视图数</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">count</span>(*) <span class=\"keyword\">from</span> user_sequences    <span class=\"comment\">-- 查询当前用户序列数</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">count</span>(*) <span class=\"keyword\">from</span> user_jobs    <span class=\"comment\">-- 查询当前用户任务数</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> job <span class=\"keyword\">from</span> dba_jobs    <span class=\"comment\">-- 查询所有job(sys)用户</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">count</span>(*) <span class=\"keyword\">from</span> user_source    <span class=\"comment\">-- 查询当前用户源码数</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> object_name, <span class=\"keyword\">status</span> <span class=\"keyword\">from</span> user_objects <span class=\"keyword\">where</span> object_type=<span class=\"string\">'FUNCTION'</span>    <span class=\"comment\">-- 查询函数</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> object_name, <span class=\"keyword\">status</span> <span class=\"keyword\">from</span> user_objects <span class=\"keyword\">where</span> object_type=<span class=\"string\">'PROCEDURE'</span>    <span class=\"comment\">-- 查询存储过程</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"built_in\">text</span> <span class=\"keyword\">from</span> all_source <span class=\"keyword\">where</span> owner=%<span class=\"keyword\">USER</span>% <span class=\"keyword\">and</span> <span class=\"keyword\">name</span>=<span class=\"keyword\">upper</span>(<span class=\"string\">'%NAME%'</span>)    <span class=\"comment\">--查询函数或存储过程源码</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> username, default_tablespace <span class=\"keyword\">from</span> user_users    <span class=\"comment\">--查看当前用户缺省表空间</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">tablespace</span> %<span class=\"keyword\">NAME</span>% <span class=\"keyword\">INCLUDING</span> <span class=\"keyword\">CONTENTS</span> <span class=\"keyword\">AND</span> <span class=\"keyword\">DATAFILES</span>    <span class=\"comment\">--删除tablespace</span></span><br><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">user</span> %<span class=\"keyword\">NAME</span>% <span class=\"keyword\">cascade</span>    <span class=\"comment\">--删除用户</span></span><br></pre></td></tr></table></figure>\n<p>参考：<br><a href=\"http://www.cnblogs.com/yongtaiyu/archive/2013/09/13/3318539.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/yongtaiyu/archive/2013/09/13/3318539.html</a><br><a href=\"http://blog.csdn.net/oscar999/article/details/7468153\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/oscar999/article/details/7468153</a><br><a href=\"http://blog.sina.com.cn/s/blog_489d82ef01015h0t.html\" target=\"_blank\" rel=\"noopener\">http://blog.sina.com.cn/s/blog_489d82ef01015h0t.html</a><br><a href=\"http://blog.csdn.net/f_zongjian/article/details/5832676\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/f_zongjian/article/details/5832676</a></p>\n","categories":["数据库"],"tags":["数据库","Oracle"]},{"title":"临时表空间相关问题","url":"http://dotrabbit.tk/数据库/000122-临时表空间相关问题/","content":"<p>查询临时表空间sql：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Select</span> se.username,se.sid,su.extents,su.blocks*to_number(<span class=\"keyword\">rtrim</span>(p.value))<span class=\"keyword\">as</span>    <span class=\"keyword\">Space</span>,<span class=\"keyword\">tablespace</span>,segtype,sql_text</span><br><span class=\"line\"><span class=\"keyword\">from</span> v$sort_usage su,v$parameter p,v$<span class=\"keyword\">session</span> se,v$<span class=\"keyword\">sql</span> s</span><br><span class=\"line\"><span class=\"keyword\">where</span> p.name=<span class=\"string\">'db_block_size'</span> <span class=\"keyword\">and</span> su.session_addr=se.saddr <span class=\"keyword\">and</span> s.hash_value=su.sqlhash <span class=\"keyword\">and</span> s.address=su.sqladdr</span><br><span class=\"line\"><span class=\"keyword\">order</span> <span class=\"keyword\">by</span> se.username,se.sid</span><br></pre></td></tr></table></figure></p>\n<p>或是：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Select</span> su.username,su.Extents,<span class=\"keyword\">tablespace</span>,segtype,sql_text</span><br><span class=\"line\"><span class=\"keyword\">from</span> v$sort_usage su,v$<span class=\"keyword\">sql</span> s</span><br><span class=\"line\"><span class=\"keyword\">Where</span> su.SQL_ID = s.SQL_ID</span><br></pre></td></tr></table></figure></p>\n<p>参考：<br><a href=\"http://blog.itpub.net/30036720/viewspace-2121272/\" target=\"_blank\" rel=\"noopener\">http://blog.itpub.net/30036720/viewspace-2121272/</a><br><a href=\"http://www.cnblogs.com/kerrycode/p/4006840.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/kerrycode/p/4006840.html</a></p>\n","categories":["数据库"],"tags":["数据库","Oracle"]},{"title":"Oracle问题排查","url":"http://dotrabbit.tk/数据库/000121-Oracle问题排查/","content":"<p>查询表空间信息：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">UPPER</span>(F.TABLESPACE_NAME) <span class=\"string\">\"表空间名 \"</span>,</span><br><span class=\"line\">       D.MAX_GROOTTE_MB <span class=\"string\">\"表空间最大值 (M)\"</span>,</span><br><span class=\"line\">       D.TOT_GROOTTE_MB <span class=\"string\">\"当前已分配表空间 (M)\"</span>,</span><br><span class=\"line\">       D.TOT_GROOTTE_MB - F.TOTAL_BYTES <span class=\"string\">\"当前已使用表空间 (M)\"</span>,</span><br><span class=\"line\">       TO_CHAR(<span class=\"keyword\">ROUND</span>((D.TOT_GROOTTE_MB - F.TOTAL_BYTES) / D.MAX_GROOTTE_MB * <span class=\"number\">100</span>,</span><br><span class=\"line\">                     <span class=\"number\">2</span>),</span><br><span class=\"line\">               <span class=\"string\">'990.99'</span>) <span class=\"string\">\"总表空间使用比\"</span>,</span><br><span class=\"line\">       TO_CHAR(<span class=\"keyword\">ROUND</span>((D.TOT_GROOTTE_MB - F.TOTAL_BYTES) / D.TOT_GROOTTE_MB * <span class=\"number\">100</span>,</span><br><span class=\"line\">                     <span class=\"number\">2</span>),</span><br><span class=\"line\">               <span class=\"string\">'990.99'</span>) <span class=\"string\">\"当前已分配表空间使用比 \"</span>,</span><br><span class=\"line\">       F.TOTAL_BYTES<span class=\"string\">\"当前已分配表空间空闲 (M) \"</span>,</span><br><span class=\"line\">       F.MAX_BYTES <span class=\"string\">\"最大块 (M) \"</span></span><br><span class=\"line\">  <span class=\"keyword\">FROM</span> (<span class=\"keyword\">SELECT</span> TABLESPACE_NAME,</span><br><span class=\"line\">               <span class=\"keyword\">ROUND</span>(<span class=\"keyword\">SUM</span>(<span class=\"keyword\">BYTES</span>) / (<span class=\"number\">1024</span> * <span class=\"number\">1024</span>), <span class=\"number\">2</span>) TOTAL_BYTES,</span><br><span class=\"line\">               <span class=\"keyword\">ROUND</span>(<span class=\"keyword\">MAX</span>(<span class=\"keyword\">BYTES</span>) / (<span class=\"number\">1024</span> * <span class=\"number\">1024</span>), <span class=\"number\">2</span>) MAX_BYTES</span><br><span class=\"line\">          <span class=\"keyword\">FROM</span> SYS.DBA_FREE_SPACE</span><br><span class=\"line\">         <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> TABLESPACE_NAME) F,</span><br><span class=\"line\">       (<span class=\"keyword\">SELECT</span> DD.TABLESPACE_NAME,</span><br><span class=\"line\">               <span class=\"keyword\">ROUND</span>(<span class=\"keyword\">SUM</span>(DD.BYTES) / (<span class=\"number\">1024</span> * <span class=\"number\">1024</span>), <span class=\"number\">2</span>) TOT_GROOTTE_MB,</span><br><span class=\"line\">               <span class=\"keyword\">ROUND</span>(<span class=\"keyword\">SUM</span>(DD.MAXBYTES) / (<span class=\"number\">1024</span> * <span class=\"number\">1024</span>), <span class=\"number\">2</span>) MAX_GROOTTE_MB</span><br><span class=\"line\">          <span class=\"keyword\">FROM</span> SYS.DBA_DATA_FILES DD</span><br><span class=\"line\">         <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> DD.TABLESPACE_NAME) D</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> D.TABLESPACE_NAME = F.TABLESPACE_NAME</span><br><span class=\"line\">   <span class=\"keyword\">and</span> D.TABLESPACE_NAME <span class=\"keyword\">like</span> <span class=\"string\">'AMB%'</span></span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> <span class=\"number\">5</span> <span class=\"keyword\">DESC</span>;</span><br></pre></td></tr></table></figure></p>\n<p>查询是否有失败Job：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> user_jobs <span class=\"keyword\">where</span> broken=<span class=\"string\">'Y'</span> <span class=\"keyword\">or</span> failures&gt;<span class=\"number\">0</span> <span class=\"keyword\">or</span> next_date&lt;trunc(<span class=\"keyword\">SYSDATE</span>);</span><br></pre></td></tr></table></figure></p>\n<p>查询是否存在重复Job：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> t.JOB, t.WHAT, t.INTERVAL <span class=\"keyword\">from</span> user_jobs t <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> t.WHAT</span><br></pre></td></tr></table></figure></p>\n<p>两个timestamp时间相差5分钟以内：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> <span class=\"keyword\">table</span> t <span class=\"keyword\">where</span> <span class=\"keyword\">extract</span>(<span class=\"keyword\">minute</span> <span class=\"keyword\">from</span> (t.time1 - t.time2) &lt;= <span class=\"number\">5</span></span><br></pre></td></tr></table></figure></p>\n","categories":["数据库"],"tags":["数据库","Oracle"]},{"title":"数据库删除——delete、drop、truncate","url":"http://dotrabbit.tk/数据库/000120-数据库删除——delete、drop、truncate/","content":"<h1 id=\"1、语言\"><a href=\"#1、语言\" class=\"headerlink\" title=\"1、语言\"></a>1、语言</h1><p>drop和truncate属于DDL(data definition languate)<br>delete是DML(data manilupation language)</p>\n<h1 id=\"2、功能\"><a href=\"#2、功能\" class=\"headerlink\" title=\"2、功能\"></a>2、功能</h1><p>truncate和delete只删除数据，不删除表结构(定义)<br>drop语句将删除表的结构，以及约束(constrain)、触发器(trigger)、索引(index)，依赖于表的存储过程/函数将保留，但是变为invalid状态</p>\n<h1 id=\"3、提交、回滚\"><a href=\"#3、提交、回滚\" class=\"headerlink\" title=\"3、提交、回滚\"></a>3、提交、回滚</h1><p>delete是DML，所以操作会放到回滚段中，事务提交才生效，可回滚<br>drop和truncate是DDL，所以执行后会自动提交立即生效，原数据不会放到rollback segment中，不能回滚</p>\n<h1 id=\"4、trigger\"><a href=\"#4、trigger\" class=\"headerlink\" title=\"4、trigger\"></a>4、trigger</h1><p>delete可触发trigger，drop和truncate不能触发trigger</p>\n<h1 id=\"5、高水位线-high-water-mark\"><a href=\"#5、高水位线-high-water-mark\" class=\"headerlink\" title=\"5、高水位线(high-water-mark)\"></a>5、高水位线(high-water-mark)</h1><p>delete高水位线保持原位置不动<br>truncate语句会将高水位线复位(回到最开始)<br>drop语句将表所占用的空间全部释放<br>关于高水位线，可参考： <a href=\"http://www.blogjava.net/decode360/archive/2009/07/14/287767.html\" target=\"_blank\" rel=\"noopener\">http://www.blogjava.net/decode360/archive/2009/07/14/287767.html</a></p>\n<h1 id=\"6、索引\"><a href=\"#6、索引\" class=\"headerlink\" title=\"6、索引\"></a>6、索引</h1><p>truncate语句会重置所有索引，delete不会</p>\n<h1 id=\"7、extent\"><a href=\"#7、extent\" class=\"headerlink\" title=\"7、extent\"></a>7、extent</h1><p>delete语句不影响表所占用的extend<br>truncate语句缺省情况下见空间释放到minextents个extent，除非使用reuse storage<br>drop语句将表所占用的空间全部释放</p>\n<h1 id=\"8、速度\"><a href=\"#8、速度\" class=\"headerlink\" title=\"8、速度\"></a>8、速度</h1><p>一般来说，drop &gt; truncate &gt; delete</p>\n<h1 id=\"9、资源\"><a href=\"#9、资源\" class=\"headerlink\" title=\"9、资源\"></a>9、资源</h1><p>truncate使用的系统事务日志资源较少<br>delete语句每删除一条数据，会在事务日志中为所删除的每一行记录一项，<br>truncate table 通过释放存储表数据所用的数据页来删除数据，并只在事务日志中记录页的释放</p>\n<h1 id=\"10、应用\"><a href=\"#10、应用\" class=\"headerlink\" title=\"10、应用\"></a>10、应用</h1><p>删除表使用drop<br>保留表但删除数据，可使用truncate，<br>但需要注意，truncate不能使用在有foreign key约束的表，不能用于参与了索引视图的表，因为不记录在日志中所以不能激活trigger，应使用不带where字句的delete语句<br>如果是整理表内部的碎片，可以用truncate跟上reuse stroage，再重新导入/插入数据。</p>\n<p>参考：<br><a href=\"http://www.cnblogs.com/8765h/archive/2011/11/25/2374167.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/8765h/archive/2011/11/25/2374167.html</a><br><a href=\"http://blog.csdn.net/gumengkai/article/details/51079270\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/gumengkai/article/details/51079270</a></p>\n","categories":["数据库"],"tags":["数据库","Oracle"]},{"title":"数据库事务隔离级别","url":"http://dotrabbit.tk/数据库/000119-数据库事务隔离级别/","content":"<h1 id=\"事务的特性\"><a href=\"#事务的特性\" class=\"headerlink\" title=\"事务的特性\"></a>事务的特性</h1><p>事务具备四大特性，ACID：<br>1、Atomicity，原子性，事务中的操作要么全部成功，要么全部回滚失败<br>2、Consistency，一致性，事务执行前后，系统必须从一个一致性的状态转换到另一个，保证数据的完整性和业务状态的一致性，例如转账前后总余额不变<br>3、Isolation，隔离性，隔离并行事务，事务的运行不会被另一个事务干扰<br>4、Durability，持久性，事务一旦提交，对数据库所做的改变会被永久保存，不会被回滚，不会因断电等故障丢失</p>\n<h1 id=\"隔离级别的作用\"><a href=\"#隔离级别的作用\" class=\"headerlink\" title=\"隔离级别的作用\"></a>隔离级别的作用</h1><p>保证数据库并发操作时，数据的正确性，保证隔离性</p>\n<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>当对数据库进行并发操作时，有可能发生以下几种问题：<br>1、丢失更新<br>两个事务同时更新一行数据，一个事务的操作覆盖了另一个的<br>2、脏读<br>一个事务读取到了另一个事务未提交的数据操作结果。这是相当危险的，因为很可能所有的操作都被回滚。<br>3、不可重复读<br>对于数据库中的某个数据，一个事务范围内，多次查询却返回了不同的数据值<br>这是由于在查询间隔，被另一个事务修改并提交了<br>脏读是读取了另一个事务未提交的脏数据，而不可重复读是读取了另一个事务提交前后的数据<br>4、幻读/虚读<br>对于数据库中的某批数据，事务的多次操作得到了不同结果，像出现了幻觉一样<br>原因为另一个事务做了操作：<br>增，多了之前未出现的数据记录<br>删，少了数据记录<br>改，多了不该有的记录，或少了该有的记录</p>\n<h1 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h1><p>标准SQL规范中，定义了4个事务隔离级别，不同的隔离级别对事务的处理不同<br>1、未授权读取/读未提交，Read Uncommitted<br>定义：如果一个事务已经开始写数据，则另外一个事务则不允许同时进行写操作，但允许其他事务读此行数据<br>隔离：允许脏读取，但不允许更新丢失<br>实现：该隔离级别可以通过“排他写锁”实现</p>\n<p>2、授权读取/读提交，Read Committed<br>定义：读取数据的事务允许其他事务继续访问该行数据，但是未提交的写事务将会禁止其他事务访问该行<br>隔离：允许不可重复读取，但不允许脏读取。<br>实现：这可以通过“瞬间共享读锁”和“排他写锁”实现</p>\n<p>3、可重复读取，Repeatable Read<br>定义：读取数据的事务将会禁止写事务（但允许读事务），写事务则禁止任何其他事务<br>隔离：禁止不可重复读取和脏读取，但是有时可能出现幻读数据<br>实现：这可以通过“共享读锁”和“排他写锁”实现</p>\n<p>4、序列化，Serializable<br>定义：提供严格的事务隔离。它要求事务序列化执行，事务只能一个接着一个地执行，不能并发执行<br>实现：仅仅通过“行级锁”是无法实现事务序列化的，必须通过其他机制保证新插入的数据不会被刚执行查询操作的事务访问到</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><table>\n<thead>\n<tr>\n<th>隔离级别</th>\n<th>丢失更新</th>\n<th>脏读</th>\n<th>不可重复读</th>\n<th>幻读</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>未提交读</td>\n<td>Y</td>\n<td>Y</td>\n<td>Y</td>\n<td>Y</td>\n</tr>\n<tr>\n<td>已提交读</td>\n<td>Y</td>\n<td>N</td>\n<td>Y</td>\n<td>Y</td>\n</tr>\n<tr>\n<td>可重复读</td>\n<td>N</td>\n<td>N</td>\n<td>N</td>\n<td>Y</td>\n</tr>\n<tr>\n<td>可串行读</td>\n<td>N</td>\n<td>N</td>\n<td>N</td>\n<td>N</td>\n</tr>\n</tbody>\n</table>\n<p>(Y表示可能发生，N表示不会发生)</p>\n<p>隔离级别越高，越能保证数据的完整性和一致性，但是对并发性能的影响也越大。<br>对于多数应用程序，可以优先考虑把数据库系统的隔离级别设为Read Committed。它能够避免脏读取，而且具有较好的并发性能。尽管它会导致不可重复读、幻读和第二类丢失更新这些并发问题，在可能出现这类问题的个别场合，可以由应用程序采用悲观锁或乐观锁来控制。</p>\n<h1 id=\"拓展\"><a href=\"#拓展\" class=\"headerlink\" title=\"拓展\"></a>拓展</h1><p>Spring的五个事务隔离级别，和七个事务传播行为<br><a href=\"http://blog.csdn.net/it_man/article/details/5074371\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/it_man/article/details/5074371</a><br><a href=\"http://www.cnblogs.com/shitianzeng/articles/2319090.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/shitianzeng/articles/2319090.html</a><br><a href=\"http://www.2cto.com/kf/201312/264064.html\" target=\"_blank\" rel=\"noopener\">http://www.2cto.com/kf/201312/264064.html</a><br><a href=\"http://blog.csdn.net/it_wangxiangpan/article/details/24180085\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/it_wangxiangpan/article/details/24180085</a><br><a href=\"http://blog.csdn.net/edward0830ly/article/details/7569954\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/edward0830ly/article/details/7569954</a></p>\n<p>参考：<br><a href=\"http://www.cnblogs.com/fjdingsd/p/5273008.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/fjdingsd/p/5273008.html</a><br><a href=\"http://baike.baidu.com/item/%E4%BA%8B%E5%8A%A1/5945882\" target=\"_blank\" rel=\"noopener\">http://baike.baidu.com/item/%E4%BA%8B%E5%8A%A1/5945882</a><br><a href=\"http://baike.baidu.com/item/%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB\" target=\"_blank\" rel=\"noopener\">http://baike.baidu.com/item/%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB</a><br><a href=\"http://blog.csdn.net/shuaihj/article/details/14163713\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/shuaihj/article/details/14163713</a></p>\n","categories":["数据库"],"tags":["数据库"]},{"title":"加密算法","url":"http://dotrabbit.tk/工具/000118-加密算法/","content":"<h1 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h1><p>明文：加密前的信息<br>密文：加密后的信息<br>密钥：控制加密及解密过程的指令<br>算法：算法是一组规则，规定如何进行加密和解密</p>\n<h1 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h1><p>对称加密：<br>定义：也称密钥加密，采用单钥密码系统的加密方法，同一个密钥可以同时用作信息的加密和解密<br>优点：算法公开、计算量小、加密速度快、加密效率高，通常在消息发送方需要加密大量数据时使用<br>缺点：安全性取决于加密算法本身，以及密钥的管理，如果一方密钥泄露，加密信息就不安全了；另外，如果使用每次使用唯一密钥的方式，则收发双方所拥有的钥匙数量巨大，密钥管理成为双方的负担<br>例子：DES、3DES、TDEA、Blowfish、RC2、RC4、RC5、IDEA、SKIPJACK、AES等<br>常用：AES<br>比较：<br>DES是一种分组数据加密技术（先将数据分成固定长度的小数据块，之后进行加密），速度较快，适用于大量数据加密，而3DES是一种基于DES的加密算法，使用3个不同密匙对同一个分组数据块进行3次加密，如此以使得密文强度更高。<br>相较于DES和3DES算法而言，AES算法有着更高的速度和资源使用效率，安全级别也较之更高了，被称为下一代加密标准。</p>\n<p>非对称加密：<br>定义：非对称加密算法需要两个密钥来进行加密和解密，这两个秘钥是公开密钥(public key，简称公钥)和私有密钥(private key，简称私钥)<br>机制：公开密钥与私有密钥是一对，如果用公开密钥对数据进行加密，只有用对应的私有密钥才能解密；如果用私有密钥对数据进行加密，那么只有用对应的公开密钥才能解密。因为加密和解密使用的是两个不同的密钥，所以这种算法叫作非对称加密算法。<br>优点：安全性更好<br>缺点：解密时间长、速度慢，适合对少量数据进行加密<br>例子：RSA、Elgamal、背包算法、Rabin、D-H、ECC(椭圆曲线加密算法)等<br>常用：RSA<br>比较：<br>RSA和DSA的安全性及其它各方面性能都差不多，而ECC较之则有着很多的性能优越，包括处理速度，带宽要求，存储空间等等。</p>\n<p>散列算法：<br>定义：产生一些数据片段（例如消息或会话项）的散列值的算法<br>特点：1、任何两个不同的输入不会得到相同的输出；2、不可逆<br>例子：MD2、MD4、MD5、SHA-1、HMAC<br>常用：MD5、SHA-1<br>比较：<br>这几种算法只生成一串不可逆的密文，经常用其效验数据传输过程中是否经过修改，因为相同的生成算法对于同一明文只会生成唯一的密文，若相同算法生成的密文不同，则证明传输数据进行过了修改。通常在数据传说过程前，使用MD5和SHA1算法均需要发送和接收数据双方在数据传送之前就知道密匙生成算法，而HMAC与之不同的是需要生成一个密匙，发送方用此密匙对数据进行摘要处理（生成密文），接收方再利用此密匙对接收到的数据进行摘要处理，再判断生成的密文是否相同。</p>\n<h1 id=\"选用\"><a href=\"#选用\" class=\"headerlink\" title=\"选用\"></a>选用</h1><p>由于对称加密算法的密钥管理是一个复杂的过程，密钥的管理直接决定着他的安全性，因此当数据量很小时，我们可以考虑采用非对称加密算法。<br>在实际的操作过程中，我们通常采用的方式是：采用非对称加密算法管理对称算法的密钥，然后用对称加密算法加密数据，这样我们就集成了两类加密算法的优点，既实现了加密速度快的优点，又实现了安全方便管理密钥的优点。<br>如果在选定了加密算法后，那采用多少位的密钥呢？一般来说，密钥越长，运行的速度就越慢，应该根据的我们实际需要的安全级别来选择，一般来说，RSA建议采用1024位的数字，ECC建议采用160位，AES采用128为即可。</p>\n<p>参考：<br><a href=\"http://baike.baidu.com/item/%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86\" target=\"_blank\" rel=\"noopener\">http://baike.baidu.com/item/%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86</a><br><a href=\"http://baike.baidu.com/item/%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86\" target=\"_blank\" rel=\"noopener\">http://baike.baidu.com/item/%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86</a><br><a href=\"http://baike.baidu.com/item/%E6%95%A3%E5%88%97%E7%AE%97%E6%B3%95\" target=\"_blank\" rel=\"noopener\">http://baike.baidu.com/item/%E6%95%A3%E5%88%97%E7%AE%97%E6%B3%95</a><br><a href=\"http://blog.csdn.net/cws1214/article/details/18604075\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/cws1214/article/details/18604075</a></p>\n","categories":["工具"],"tags":["工具"]},{"title":"第四遍《恋爱的犀牛》","url":"http://dotrabbit.tk/生活杂记/000117-第四遍《恋爱的犀牛》/","content":"<p>　　晚上下班去看了《恋爱的犀牛》，在蜂巢剧场，第四遍，跟宇哥，宇哥是个女的。<br>　　不知道是看过太多遍，还是最近状态不太好，还是因为旁边的宇哥气场不是这种忧郁的，看的过程中注意力比较涣散，也没有收获像之前的感动。尽管这样，第二天早上看语录的时候，还是动情了一把，先把喜欢的话记录下来：</p>\n<blockquote>\n<p>你是我温暖的手套，冰冷的啤酒，带着阳光味道的衬衫，日复一日的梦想。</p>\n</blockquote>\n<blockquote>\n<p>相信我，上天会厚待那些勇敢的、坚强的、多情的人。如果你们爱什么东西，渴望什么东西，相信我，你就去爱吧、去渴望吧！只要你有足够强大的愿望，你就是不可战胜的！</p>\n</blockquote>\n<blockquote>\n<p>爱她，是我做过最好的事。</p>\n</blockquote>\n<blockquote>\n<p>忘掉是一般人能做的惟一的事，但是我决定不忘掉她。</p>\n</blockquote>\n<blockquote>\n<p>爱之于我，不是肌肤之亲，不是一蔬一饭，它是一种不死的欲望，是疲惫生活中的英雄梦想。</p>\n</blockquote>\n<p>最喜欢最后一句杜拉斯的话，只是周围并没有多少人有共鸣。可能是老了，可能是天性朴实。</p>\n<p>愿未来的生活是浪漫的，和一个浪漫的人。</p>\n<p>附歌词：</p>\n<blockquote>\n<p>你永远不知道，你是我渴望已久的晴天，<br>你永远不知道，你是我难以忍受的饥饿，<br>你永远不知道，你是我赖以呼吸的空气<br>你是不同的，惟一的，柔软的，干净的，天空一样的，<br>你是纯洁的，天真的，玻璃一样的，<br>你是纯洁的，天真的，水流一样的，<br>什么也改变不了，什么也污染不了，<br>阳光穿过你，却改变了自己的方向。<br>我的爱人，我的爱人，我的爱人……</p>\n</blockquote>\n<p>另外，突然感觉《园游会》的“我顶着大太阳，只想为你撑伞”，挺美好~</p>\n","categories":["生活杂记"],"tags":["生活杂记"]},{"title":"书应该怎么读","url":"http://dotrabbit.tk/生活杂记/000116-书应该怎么读/","content":"<p>　　转眼间，坚持记日记的习惯已经坚持了快一年半了，五百多天，每天一篇没有间断。<br>　　去年初时有段时间，回忆前一个冬天都做了什么生活是什么样的，一片空白……感到有些恐慌，决定开始写日记，记录生活状态，让日子没白过。当时给自己的口号是，“记录下来，就是胜利”。所以虽然写下的都是流水账，但关于最初的这个目标，目前来看，是实现了的，而且实现得还不错。<br>　　现在已经养成了每天中晚各记一次的习惯，因为流水账写起来比较多，还因为如果隔了一天，就忘记了……不知道是现在年纪大了，记不住事情，还是每天的生活重复而枯燥，一天天并没有什么不同，导致细节太模糊。例如去看演唱会或话剧的日子，即使间隔很久过程也会记得很清晰。<br>　　记录流年琐事的过程中，偶尔也会迸发一些小感悟小点子，写进日记埋没进了大段文字里，有些可惜，所以在这儿另外开辟一片空间，每篇可能不多，但是记录下这些小感悟小点子，供以后把玩~</p>\n<p>　　今天下午的感悟是关于读书的。<br>　　最近一段时间状态一直不是很好，可能来大姨夫了……读书计划搁置，今天下午同样。随手拿起一本并不算厚内容也并不算深的GitHub实践书，想想这本已经看了挺长时间了，还是没看完……<br>　　好像已经很久没有很快地完整地看完一本书了，为什么看书这么慢，总也看不完……再一想，最近电影方面倒是刷了不少片子，为什么电影总能看完而书不行呢？抛去电影比书多出来的娱乐性，但就获取到的知识和感悟方面，差别到底在哪里？<br>　　思考结果是，或许因为电影不管有多少内容，它是一直在行进着的，电影结束，也就看完了，不管你真正接受了多少。可能哪天再看第二遍第三遍会有新的收获，但不管怎样，第一遍是看完了的。对比看书，不如为一本书定一个周期，在这段时间内，一定把这本书读完，不管吸收了多少，先看完，然后不断温故知新，进展应该会顺利很多~</p>\n","categories":["生活杂记"],"tags":["生活杂记"]},{"title":"Oracle表增加列","url":"http://dotrabbit.tk/数据库/000115-Oracle表增加列/","content":"<p>Oracle中不可修改列名，但可以删除、增加列</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">altertable Tablename dropcolumn column1</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">altertable Tablename add(column1 varchar2(20), column2 number(7,2)...)</span><br></pre></td></tr></table></figure>\n<p>参考：<a href=\"http://www.cnblogs.com/gsk99/archive/2011/05/26/2058042.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/gsk99/archive/2011/05/26/2058042.html</a></p>\n","categories":["数据库"],"tags":["数据库","Oracle"]},{"title":"LeetCode-371.Sum of Two Integers","url":"http://dotrabbit.tk/算法/000114-LeetCode-371.Sum of Two Integers/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Calculate the sum of two integers a and b, but you are not allowed to use the operator + and -.</p>\n<p><strong>Example:</strong><br>Given a = 1 and b = 2, return 3.</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>计算两个整数a和b的和，但不能使用+和-<br>例如：<br>给出a=1，b=2，返回3。</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><h2 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2><p>分两步计算，先利用异或，计算出没有进位的数，然后利用与运算并左移一位，算出进位，循环求和：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getSum</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (b != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> carrier = (a &amp; b) &lt;&lt; <span class=\"number\">1</span>;</span><br><span class=\"line\">            a = a ^ b;</span><br><span class=\"line\">            b = carrier;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2><p>模拟加法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getSum</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> r = <span class=\"number\">0</span>, c = <span class=\"number\">0</span>, p = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ((a | b | c) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (((a ^ b ^ c) &amp; <span class=\"number\">1</span>) != <span class=\"number\">0</span>)</span><br><span class=\"line\">                r |= p;</span><br><span class=\"line\">            p &lt;&lt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">            c = (a &amp; b | b &amp; c | a &amp; c) &amp; <span class=\"number\">1</span>;</span><br><span class=\"line\">            a &gt;&gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">            b &gt;&gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>参考：<br><a href=\"http://www.tuicool.com/articles/amIzymq\" target=\"_blank\" rel=\"noopener\">http://www.tuicool.com/articles/amIzymq</a></p>\n","categories":["算法"],"tags":["算法","LeetCode"]},{"title":"LeetCode-344.Reverse String","url":"http://dotrabbit.tk/算法/000113-LeetCode-344.Reverse String/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Write a function that takes a string as input and returns the string reversed.</p>\n<p><strong>Example:</strong><br>Given s = “hello”, return “olleh”.</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>编写函数，将输入字符串反转并返回。<br>例如：给出s=”hello”，返回”olleh”。</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><h2 id=\"方法一：char数组逆序\"><a href=\"#方法一：char数组逆序\" class=\"headerlink\" title=\"方法一：char数组逆序\"></a>方法一：char数组逆序</h2><p>设立一个与s长度相同的char数组chars，和low、high指针分别指向s的头尾，不断调换位置填入chars，并逐渐向中间逼近：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">reverseString</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s == <span class=\"keyword\">null</span> || s.length() &lt;= <span class=\"number\">1</span>) <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> low = <span class=\"number\">0</span>, len = s.length(), high = len - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">char</span>[] chars = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[len];</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (low &lt;= high) &#123;</span><br><span class=\"line\">            chars[low] = s.charAt(high);</span><br><span class=\"line\">            chars[high--] = s.charAt(low++);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> String(chars);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Run Time: 3ms<br>或逐个扫描：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">reverseString</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = s.length();</span><br><span class=\"line\">        <span class=\"keyword\">char</span>[] chars = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[len];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++) chars[i] = s.charAt(len - i - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> String(chars);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Run time: 3ms</p>\n<h2 id=\"方法二：StringBuffer不断添加\"><a href=\"#方法二：StringBuffer不断添加\" class=\"headerlink\" title=\"方法二：StringBuffer不断添加\"></a>方法二：StringBuffer不断添加</h2><p>设立指针从s尾部逐渐向头部扫描，逐个添加到StringBuffer中：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">reverseString</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">        StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = s.length() - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) sb.append(s.charAt(i));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sb.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Run Time: 7ms</p>\n<h2 id=\"方法三：库函数\"><a href=\"#方法三：库函数\" class=\"headerlink\" title=\"方法三：库函数\"></a>方法三：库函数</h2><p>利用StringBuffer()的reverse()方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">reverseString</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> StringBuffer(s).reverse().toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>查看JDK源码可得reverse()函数如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> AbstractStringBuilder <span class=\"title\">reverse</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> hasSurrogate = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = count - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = (n-<span class=\"number\">1</span>) &gt;&gt; <span class=\"number\">1</span>; j &gt;= <span class=\"number\">0</span>; --j) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> temp = value[j];</span><br><span class=\"line\">        <span class=\"keyword\">char</span> temp2 = value[n - j];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!hasSurrogate) &#123;</span><br><span class=\"line\">\t    hasSurrogate = (temp &gt;= Character.MIN_SURROGATE &amp;&amp; temp &lt;= Character.MAX_SURROGATE)</span><br><span class=\"line\">\t        || (temp2 &gt;= Character.MIN_SURROGATE &amp;&amp; temp2 &lt;= Character.MAX_SURROGATE);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        value[j] = temp2;</span><br><span class=\"line\">        value[n - j] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hasSurrogate) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Reverse back all valid surrogate pairs</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">\t    <span class=\"keyword\">char</span> c2 = value[i];</span><br><span class=\"line\">\t    <span class=\"keyword\">if</span> (Character.isLowSurrogate(c2)) &#123;</span><br><span class=\"line\">\t        <span class=\"keyword\">char</span> c1 = value[i + <span class=\"number\">1</span>];</span><br><span class=\"line\">\t        <span class=\"keyword\">if</span> (Character.isHighSurrogate(c1)) &#123;</span><br><span class=\"line\">\t\t    value[i++] = c1;</span><br><span class=\"line\">\t\t    value[i] = c2;</span><br><span class=\"line\">\t        &#125;</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Run Time: 4ms</p>\n","categories":["算法"],"tags":["算法","LeetCode"]},{"title":"Oracle中查询存储过程调用关系","url":"http://dotrabbit.tk/数据库/000112-Oracle中查询存储过程调用关系/","content":"<h1 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h1><p>利用Eclipse编写Java时，对于一个方法，如果想知道都有谁调用过它，可以通过ctrl+H全局搜索方法名，也可以通过ctrl+shift+G直接查询调用关系。<br>而在Oracle中，没有这么方便的工具，当存储过程很多，函数很多，且代码量很大时，维护代码的任务就显得很繁重。</p>\n<h1 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h1><p>例如我们有一个存储过程：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Procedure proc(id Test_Table.id%Type, </span><br><span class=\"line\">\t                 name Test_Table.name%Type,</span><br><span class=\"line\">                           phone  Test_Table.phone%Type,</span><br><span class=\"line\">                           addr Test_Table.address%Type)</span><br></pre></td></tr></table></figure></p>\n<p>想要知道proc都被谁调用过，只要搜索user_source表即可：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> user_source <span class=\"keyword\">where</span> <span class=\"built_in\">text</span> <span class=\"keyword\">like</span> <span class=\"string\">'%proc%'</span></span><br></pre></td></tr></table></figure></p>\n<p>除了proc本身的定义和代码，可以列出所有proc出现的位置。</p>\n<p>参考：<br><a href=\"http://blog.csdn.net/xing_sky/article/details/8425626\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/xing_sky/article/details/8425626</a></p>\n","categories":["数据库"],"tags":["数据库","Oracle"]},{"title":"LeetCode-3.Longest Substring Without Repeating Charaters","url":"http://dotrabbit.tk/算法/000111-LeetCode-3.Longest Substring Without Repeating Charaters/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Given a string, find the length of the <strong> longest substring </strong> without repeating characters.</p>\n<p><strong>Examples:</strong></p>\n<p>Given <strong> “abcabcbb” </strong>, the answer is <strong> “abc” </strong>, which the length is 3.</p>\n<p>Given <strong> “bbbbb” </strong>, the answer is <strong> “b” </strong>, with the length of 1.</p>\n<p>Given <strong> “pwwkew” </strong>, the answer is <strong> “wke” </strong>, with the length of 3. Note that the answer must be a <strong> substring </strong>, <strong> “pwke” </strong> is a subsequence and not a substring.</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>给出一个字符串，找到其没有重复字符的<strong> 最长子串 </strong>的长度。<br>例如：<br>给出 <strong> “abcabcbb” </strong>，答案是<strong> “abc” </strong>，其长度为3。<br>给出 <strong> “bbbbb” </strong>，答案是<strong> “b” </strong>，其长度为1。<br>给出 <strong> “pwwkew” </strong>，答案是<strong> “wke” </strong>，其长度为3。<br>注意答案必须是一个<strong> 子字符串 </strong>，<strong> “pwke” </strong>是一个序列而不是子串。</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><h2 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2><p>看到题目第一反应就是滑动窗口法，设定左和右两个指针left和right，作为窗口的起止。<br>right不断步进，每次判断新字符是否已经出现过，如果有重复，则循环步进left，直至找到重复字符所在位置停止。<br>利用一个set记录已经出现过的字符，当left和right步进时更新：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">lengthOfLongestSubstring</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>, right = <span class=\"number\">0</span>, res = <span class=\"number\">0</span>;</span><br><span class=\"line\">        Set&lt;Character&gt; chars = <span class=\"keyword\">new</span> HashSet&lt;Character&gt;();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span> (right &lt; s.length()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (chars.contains(s.charAt(right))) &#123;</span><br><span class=\"line\">                res = Math.max(res, right - left);</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (s.charAt(left) != s.charAt(right)) &#123;</span><br><span class=\"line\">                    chars.remove(s.charAt(left));</span><br><span class=\"line\">                    left++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                left++;</span><br><span class=\"line\">                right++;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                chars.add(s.charAt(right));</span><br><span class=\"line\">                right++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        res = Math.max(res, right - left);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>时间复杂度为2n，即O(n)</p>\n<h2 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2><p>将方法一种的set，替换为一个boolean数组，记录每个字符是否出现过。<br>在Java中，char类型代表一个unicode字符，占两字节，16位，共65536个字符。<br>转换为int后输出可见：<br>Character.MIN_VALUE = 0<br>Character.MAX_VALUE = 65535<br>将所有字符写入文件可知，A-Z为68-93，a-z为100-125。<br>而题中未指定字符范围，因此，设定范围从空格符(32)开始，到“~”符(126)结束，共95个字符，概括了常见字符，也是键盘上可以打出的所有半角字符：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">lengthOfLongestSubstring</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>, right = <span class=\"number\">0</span>, res = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span>[] chars = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[<span class=\"number\">95</span>];</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span> (right &lt; s.length()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (chars[s.charAt(right) - <span class=\"string\">' '</span>] == <span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                res = Math.max(res, right - left);</span><br><span class=\"line\">                <span class=\"keyword\">while</span>(s.charAt(left) != s.charAt(right)) &#123;</span><br><span class=\"line\">                    chars[s.charAt(left) - <span class=\"string\">' '</span>] = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                    left++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                left++;</span><br><span class=\"line\">                right++;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                chars[s.charAt(right) - <span class=\"string\">' '</span>] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                right++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        res = Math.max(res, right - left);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>时间复杂度为2n，即O(n)</p>\n<h2 id=\"方法三\"><a href=\"#方法三\" class=\"headerlink\" title=\"方法三\"></a>方法三</h2><p>将方法二中的boolean数组，替换为一个int数组，记录遇到的每个字符，最近一次出现的index。<br>当right遇到重复字符时，直接将left设定为index+1，省略循环操作，提高效率：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">lengthOfLongestSubstring</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>, right = <span class=\"number\">0</span>, res = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] locs = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">95</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">95</span>; i++) locs[i] = -<span class=\"number\">1</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span> (right &lt; s.length()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (locs[s.charAt(right) - <span class=\"string\">' '</span>] &gt;= left &amp;&amp; left != right) &#123; <span class=\"comment\">// 新字符在当前子串中;当字串长度为1时不更新left</span></span><br><span class=\"line\">                res = Math.max(res, right - left);</span><br><span class=\"line\">                left = locs[s.charAt(right) - <span class=\"string\">' '</span>] + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            locs[s.charAt(right) - <span class=\"string\">' '</span>] = right;</span><br><span class=\"line\">            right++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        res = Math.max(res, right - left);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>时间复杂度为n+C，即O(n)</p>\n<p>参考：<br><a href=\"http://www.cnblogs.com/dollarzhaole/p/3155712.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/dollarzhaole/p/3155712.html</a><br><a href=\"http://articles.leetcode.com/longest-substring-without-repeating-characters\" target=\"_blank\" rel=\"noopener\">http://articles.leetcode.com/longest-substring-without-repeating-characters</a></p>\n","categories":["算法"],"tags":["算法","LeetCode"]},{"title":"Mac工具","url":"http://dotrabbit.tk/工具/000110-Mac工具/","content":"<p>编程：Xcode<br>解压缩：Unarchiver<br>压缩：BetterZip<br>终端：iTerm2<br>效率：Alfred<br>卸载：AppCleaner<br>包管理：homebrew<br>下载：迅雷<br>视频：sPlayer、MPlayerX<br>音乐：网易云音乐<br>MarkDown：Mou<br>API查询、代码片段：dash</p>\n<p>(随时更新)</p>\n","categories":["工具"],"tags":["工具","Mac"]},{"title":"Python脚本寻人","url":"http://dotrabbit.tk/Python/000109-Python脚本寻人/","content":"<p>校庆返校食堂蹭饭，求助同学帮忙刷饭卡转账，之后保持联系。<br>在只有一张支付宝收款的截图的情况下，找到微信。</p>\n<p>截图信息有：<br>1、手机号首三位：123<br>2、手机号末四位：4567<br>3、支付宝头像</p>\n<p>技术分享……</p>\n<h1 id=\"手机号\"><a href=\"#手机号\" class=\"headerlink\" title=\"手机号\"></a>手机号</h1><p>循环频出所有可能手机号，共10000种可能：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f = file(<span class=\"string\">\"~/phones\"</span>,<span class=\"string\">\"a+\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, <span class=\"number\">10000</span>):</span><br><span class=\"line\">    tmp = i</span><br><span class=\"line\">    digits = <span class=\"number\">0</span></span><br><span class=\"line\">    prefix = <span class=\"string\">''</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> tmp != <span class=\"number\">0</span>:</span><br><span class=\"line\">        tmp /= <span class=\"number\">10</span></span><br><span class=\"line\">        digits += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> digits &lt; <span class=\"number\">4</span>:</span><br><span class=\"line\">        prefix += <span class=\"string\">'0'</span></span><br><span class=\"line\">        digits += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    phone = <span class=\"string\">'123'</span> + prefix + str(i) + <span class=\"string\">'4567'</span></span><br><span class=\"line\">    f.write(phone + <span class=\"string\">'\\n'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">f.close()</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"归属地\"><a href=\"#归属地\" class=\"headerlink\" title=\"归属地\"></a>归属地</h1><p>根据手机号，调用在线接口，取得归属地：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> urllib2</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"comment\"># import time</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> xml.etree.ElementTree <span class=\"keyword\">as</span> ET</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># encoding</span></span><br><span class=\"line\">reload(sys)</span><br><span class=\"line\">sys.setdefaultencoding(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">resfile = file(<span class=\"string\">\"~/phones.txt\"</span>, <span class=\"string\">\"a+\"</span>)</span><br><span class=\"line\">failfile = file(<span class=\"string\">\"~/fails.txt\"</span>, <span class=\"string\">\"a+\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, <span class=\"number\">10000</span>):</span><br><span class=\"line\">  prefix = <span class=\"string\">''</span></span><br><span class=\"line\">  tmp = i</span><br><span class=\"line\">  digits = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> tmp != <span class=\"number\">0</span>:</span><br><span class=\"line\">    tmp /= <span class=\"number\">10</span></span><br><span class=\"line\">    digits += <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> digits &lt; <span class=\"number\">4</span>:</span><br><span class=\"line\">    digits += <span class=\"number\">1</span></span><br><span class=\"line\">    prefix += <span class=\"string\">'0'</span></span><br><span class=\"line\"></span><br><span class=\"line\">  phone = <span class=\"string\">'123'</span> + prefix + str(i) + <span class=\"string\">'4567'</span></span><br><span class=\"line\"></span><br><span class=\"line\">  url = <span class=\"string\">'http://life.tenpay.com/cgi-bin/mobile/MobileQueryAttribution.cgi?chgmobile='</span> + phone</span><br><span class=\"line\">  <span class=\"keyword\">try</span>:</span><br><span class=\"line\">    xmlres = urllib2.urlopen(url).read()</span><br><span class=\"line\">    xmlres = xmlres.decode(<span class=\"string\">'gb2312'</span>).encode(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">    xmlres = xmlres.replace(<span class=\"string\">'gb2312'</span>, <span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">  <span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'Fail: '</span> + phone)</span><br><span class=\"line\">    failfile.write(phone + <span class=\"string\">'\\n'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">continue</span></span><br><span class=\"line\"></span><br><span class=\"line\">  root = ET.fromstring(xmlres)</span><br><span class=\"line\">  province = root.find(<span class=\"string\">'province'</span>)</span><br><span class=\"line\">  city = root.find(<span class=\"string\">'city'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  resfile.write(phone + <span class=\"string\">'\\t'</span> + province.text + <span class=\"string\">'\\t'</span> + city.text + <span class=\"string\">'\\n'</span>)</span><br><span class=\"line\">  print(phone + <span class=\"string\">'\\t'</span> + province.text + <span class=\"string\">'\\t'</span> + city.text)</span><br><span class=\"line\">  <span class=\"comment\"># time.sleep(2)</span></span><br><span class=\"line\">resfile.close()</span><br><span class=\"line\">failfile.close()</span><br></pre></td></tr></table></figure></p>\n<p>结果：</p>\n<table>\n<thead>\n<tr>\n<th>手机号</th>\n<th style=\"text-align:center\">省</th>\n<th style=\"text-align:center\">市</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>12320004567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12320014567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12320024567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12320034567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12320044567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12320054567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12320064567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12320074567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12320084567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12320094567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12320104567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12320114567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12320124567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12320134567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12320144567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12320154567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12320164567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12320174567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12320184567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12320194567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12320204567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12320214567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12320224567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12320234567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12320244567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12320254567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12320264567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12320274567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12320284567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12320294567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12320304567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12320314567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12320324567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12320334567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12320344567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12320354567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12320364567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12320374567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12320384567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12320394567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12320404567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12320414567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12320424567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12320434567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12320444567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12320454567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12320464567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12320474567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12320484567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12320494567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321004567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321014567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321024567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321034567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321044567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321054567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321064567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321074567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321084567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321094567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321104567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321114567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321124567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321134567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321144567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321154567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321164567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321174567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321184567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321194567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321204567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321214567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321224567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321234567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321244567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321254567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321264567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321274567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321284567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321294567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321304567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321234567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321324567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321334567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321344567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321354567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321364567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321374567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321384567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321394567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321404567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321414567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321424567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321434567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321454567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321464567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321474567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321484567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321494567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321504567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321514567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321524567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321534567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321544567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321554567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321564567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321574567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321584567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321594567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321604567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321614567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321624567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321634567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321644567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321654567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321664567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321674567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321684567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321694567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321704567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321714567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321724567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321734567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321754567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321764567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321774567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321784567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321794567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321804567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321814567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321824567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321834567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321844567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321854567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321864567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321874567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321884567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321894567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321904567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321914567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321924567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321934567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321944567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321954567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321964567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321974567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321984567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12321994567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12324704567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12324714567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12324724567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12324734567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12324744567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12324754567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12324764567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12324774567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12324784567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12324794567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12326504567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12326514567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12326524567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12326534567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12326554567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12326564567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12326574567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12326584567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12326594567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12326604567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12326614567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12326624567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12326634567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12326644567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12326654567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12326664567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12326674567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12326684567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12326694567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12326704567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12326714567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12326724567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12326734567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12326754567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12326764567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12326774567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12326784567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12326794567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12326804567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12326814567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12326824567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12326834567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12326854567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12326864567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12326874567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12326884567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12326894567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12326904567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12326914567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12326924567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12326934567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12326954567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12326964567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12326974567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12326984567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12326994567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12341004567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12341014567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12341024567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12341034567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12341044567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12341054567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12341064567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12341074567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12341084567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12341094567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12341104567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12341114567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12341124567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12341134567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12341144567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12341154567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12341164567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12341174567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12341184567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12341194567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12341204567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12341214567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12341224567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12341234567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12341244567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12341254567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12341264567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12341274567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12341284567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12341294567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12341304567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12341234567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12341324567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12341334567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12341344567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12341354567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12341364567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12341374567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12341384567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12341394567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12341404567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12341414567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12341424567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12341434567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12341444567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12341454567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12341464567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12341474567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12341484567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12341494567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346004567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346014567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346024567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346034567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346044567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346054567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346064567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346074567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346084567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346094567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346104567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346114567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346124567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346134567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346144567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346154567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346164567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346174567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346184567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346194567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346204567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346214567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346224567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346234567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346244567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346254567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346264567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346274567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346284567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346294567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346304567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346314567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346324567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346334567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346344567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346354567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346364567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346374567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346384567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346394567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346404567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346414567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346424567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346434567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346444567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346454567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346464567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346474567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346484567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346494567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346504567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346514567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346524567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346534567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346544567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346554567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346564567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346574567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346584567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346594567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346604567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346614567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346624567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346634567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346644567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346654567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346664567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346674567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346684567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346694567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346704567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346714567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346724567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346734567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346744567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346754567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346764567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346774567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346784567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346794567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346804567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346814567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346824567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346834567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346844567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346854567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346864567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346874567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346884567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346894567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346904567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346914567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346924567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346934567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346944567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346954567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346964567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346974567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346984567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12346994567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361004567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361014567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361024567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361034567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361044567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361054567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361064567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361074567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361084567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361094567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361104567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361114567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361124567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361134567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361144567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361154567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361164567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361174567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361184567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361194567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361204567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361214567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361224567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361234567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361244567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361254567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361264567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361274567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361284567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361294567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361304567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361234567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361324567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361334567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361344567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361354567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361364567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361374567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361384567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361394567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361404567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361414567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361424567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361434567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361444567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361454567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361464567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361474567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361484567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361494567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361504567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361514567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361524567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361534567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361544567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361554567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361564567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361574567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361584567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361594567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361604567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361614567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361624567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361634567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361644567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361654567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361664567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361674567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361684567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361694567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361704567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361714567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361724567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361734567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361744567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361754567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361764567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361774567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361784567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361794567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361804567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361814567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361824567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361834567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361844567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361854567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361864567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361874567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361884567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361894567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361904567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361914567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361924567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361934567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361944567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361954567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361964567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361974567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361984567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12361994567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12364204567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12364214567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12364224567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12364234567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12364244567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12364254567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12364264567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12364274567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12364284567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12364294567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12367304567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12367314567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12367324567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12367334567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12367344567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12367354567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12367364567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12367374567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12367384567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12367394567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12367504567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12367514567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12367524567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12367534567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12367544567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12367554567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12367564567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12367574567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12367584567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n<tr>\n<td>12367594567</td>\n<td style=\"text-align:center\">北京</td>\n<td style=\"text-align:center\">北京</td>\n</tr>\n</tbody>\n</table>\n<p>本意是根据归属地简单过滤一下，然后逐个在支付宝上搜索，但是效果不好……</p>\n<h1 id=\"生成vCard文件\"><a href=\"#生成vCard文件\" class=\"headerlink\" title=\"生成vCard文件\"></a>生成vCard文件</h1><p>iCloud导出通讯录vCard文件，根据格式，生成所有号码的通讯录记录，名称即为手机号，方便管理<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f1 = file(<span class=\"string\">\"~/test.vcard\"</span>, <span class=\"string\">\"a+\"</span>)</span><br><span class=\"line\">f = open(<span class=\"string\">\"~/phones\"</span>,<span class=\"string\">\"r\"</span>)</span><br><span class=\"line\">lines = f.readlines()</span><br><span class=\"line\"><span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> lines:</span><br><span class=\"line\">  line=line.strip(<span class=\"string\">'\\n'</span>)</span><br><span class=\"line\">  f1.write(<span class=\"string\">\"BEGIN:VCARD\\nVERSION:3.0\\nN:#\"</span> + line + <span class=\"string\">\";;;;\\nFN:#\"</span> + line + <span class=\"string\">\"\\nTEL;TYPE=CELL;TYPE=pref;TYPE=VOICE:\"</span> + line + <span class=\"string\">\"\\nPRODID:-//Apple Inc.//iCloud Web Address Book XXXXX//EN\\nREV:2016-07-05T00:00:00Z\\nEND:VCARD\\n\"</span>)</span><br><span class=\"line\">f1.close()</span><br><span class=\"line\">f.close()</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"导入手机号\"><a href=\"#导入手机号\" class=\"headerlink\" title=\"导入手机号\"></a>导入手机号</h1><p>登录iCloud导入vCard文件，同步到手机通讯录</p>\n<h1 id=\"支付宝查看头像\"><a href=\"#支付宝查看头像\" class=\"headerlink\" title=\"支付宝查看头像\"></a>支付宝查看头像</h1><p>开启支付宝访问通讯录，查看所有新导入的手机号的支付宝账号头像，与转账截图比对。<br>加支付宝好友，加微信，删除之前导入的vCard通讯录，结束……</p>\n<h1 id=\"trouble-shooting\"><a href=\"#trouble-shooting\" class=\"headerlink\" title=\"trouble shooting\"></a>trouble shooting</h1><p>1、ValueError: multi-byte encodings are not supported<br>解：<br>解析xml报错，原因是xml文档为gb2312编码，如下：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"gb2312\" ?&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">root</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ENV_CgiName</span>&gt;</span>/cgi-bin/mobile/MobileQueryAttribution.cgi<span class=\"tag\">&lt;/<span class=\"name\">ENV_CgiName</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ENV_ClientAgent</span>&gt;</span></span><br><span class=\"line\">    XXXX</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ENV_ClientAgent</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ENV_ClientIp</span>&gt;</span>xxx.xxx.xx.xx<span class=\"tag\">&lt;/<span class=\"name\">ENV_ClientIp</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ENV_QueryString</span>&gt;</span>chgmobile=12300011234<span class=\"tag\">&lt;/<span class=\"name\">ENV_QueryString</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ENV_RequestMethod</span>&gt;</span>GET<span class=\"tag\">&lt;/<span class=\"name\">ENV_RequestMethod</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ENV_referer</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">chgmobile</span>&gt;</span>12300011234<span class=\"tag\">&lt;/<span class=\"name\">chgmobile</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">city</span>&gt;</span>太原<span class=\"tag\">&lt;/<span class=\"name\">city</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">province</span>&gt;</span>山西<span class=\"tag\">&lt;/<span class=\"name\">province</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">retcode</span>&gt;</span>0<span class=\"tag\">&lt;/<span class=\"name\">retcode</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">retmsg</span>&gt;</span>OK<span class=\"tag\">&lt;/<span class=\"name\">retmsg</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">supplier</span>&gt;</span>XX<span class=\"tag\">&lt;/<span class=\"name\">supplier</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tid</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>解决办法为先用gb2312解码，再用utf-8编码，同时xml中的encoding由gb2312替换为utf-8：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xmlres = xmlres.decode(<span class=\"string\">'gb2312'</span>).encode(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">xmlres = xmlres.replace(<span class=\"string\">'gb2312'</span>, <span class=\"string\">'utf-8'</span>)</span><br></pre></td></tr></table></figure></p>\n<p>2、UnicodeEncodeError: ‘ascii’ codec can’t encode characters in position ..<br>解：<br>Python默认ascii编码，需要转换为utf-8：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\">reload(sys)</span><br><span class=\"line\">sys.setdefaultencoding(<span class=\"string\">'utf-8'</span>)</span><br></pre></td></tr></table></figure></p>\n","categories":["Python"],"tags":["Python"]},{"title":"Python爬取Arxiv论文","url":"http://dotrabbit.tk/Python/000108-Python爬取Arxiv论文/","content":"<p>帮高中兄弟写的爬取论文的脚本，并发送邮件~</p>\n<h1 id=\"脚本\"><a href=\"#脚本\" class=\"headerlink\" title=\"脚本\"></a>脚本</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keyword = <span class=\"string\">''</span></span><br><span class=\"line\">mailFrom = <span class=\"string\">''</span></span><br><span class=\"line\">password = <span class=\"string\">''</span></span><br><span class=\"line\">smtpserver = <span class=\"string\">''</span></span><br><span class=\"line\">mailTo = <span class=\"string\">''</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib2</span><br><span class=\"line\"><span class=\"keyword\">from</span> BeautifulSoup <span class=\"keyword\">import</span> BeautifulSoup</span><br><span class=\"line\"></span><br><span class=\"line\">url = <span class=\"string\">'https://arxiv.org/list/cs.CV/recent'</span></span><br><span class=\"line\">soup = BeautifulSoup(urllib2.urlopen(url))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> link <span class=\"keyword\">in</span> soup.findAll(<span class=\"string\">'a'</span>):</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> link.string == <span class=\"string\">'all'</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\">url = <span class=\"string\">'https://arxiv.org'</span> + link.attrs[<span class=\"number\">0</span>][<span class=\"number\">1</span>]</span><br><span class=\"line\">soup = BeautifulSoup(urllib2.urlopen(url))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"></span><br><span class=\"line\">yesterday = (datetime.datetime.now() - datetime.timedelta(days = <span class=\"number\">1</span>)).strftime(<span class=\"string\">'%a, %-d %b %G'</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> h3 <span class=\"keyword\">in</span> soup.findAll(<span class=\"string\">'h3'</span>):</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> h3.string == yesterday:</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">essays = h3.findNextSibling(<span class=\"string\">'dl'</span>).findAll([<span class=\"string\">'dt'</span>, <span class=\"string\">'dd'</span>])</span><br><span class=\"line\">content = <span class=\"string\">''</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>, len(essays) / <span class=\"number\">2</span>):</span><br><span class=\"line\">\ttitle = essays[<span class=\"number\">2</span> * i + <span class=\"number\">1</span>].find(<span class=\"string\">'div'</span>, attrs=&#123;<span class=\"string\">'class'</span>: <span class=\"string\">'list-title'</span>&#125;).contents[<span class=\"number\">-1</span>].string</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> keyword <span class=\"keyword\">in</span> title.lower():</span><br><span class=\"line\">\t\tlink = <span class=\"string\">'https://arxiv.org'</span> + essays[<span class=\"number\">2</span> * i].find(<span class=\"string\">'a'</span>, title=<span class=\"string\">'Abstract'</span>).attrs[<span class=\"number\">0</span>][<span class=\"number\">1</span>]</span><br><span class=\"line\">\t\tcontent += <span class=\"string\">'title: '</span> + title + <span class=\"string\">'\\nlink: '</span> + link + <span class=\"string\">'\\n\\n'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> smtplib</span><br><span class=\"line\"><span class=\"keyword\">from</span> email.mime.text <span class=\"keyword\">import</span> MIMEText  </span><br><span class=\"line\"><span class=\"keyword\">from</span> email.header <span class=\"keyword\">import</span> Header  </span><br><span class=\"line\">  </span><br><span class=\"line\">subject = <span class=\"string\">'arxiv_'</span> + yesterday  </span><br><span class=\"line\">smtpserver = <span class=\"string\">'smtp.sina.com'</span></span><br><span class=\"line\"></span><br><span class=\"line\">msg = MIMEText(content,<span class=\"string\">'plain'</span>,<span class=\"string\">'utf-8'</span>)  </span><br><span class=\"line\">msg[<span class=\"string\">'Subject'</span>] = Header(subject, <span class=\"string\">'utf-8'</span>)  </span><br><span class=\"line\"></span><br><span class=\"line\">smtp = smtplib.SMTP()  </span><br><span class=\"line\">smtp.connect(smtpserver)</span><br><span class=\"line\">smtp.login(mailFrom, password)  </span><br><span class=\"line\">smtp.sendmail(mailFrom, mailTo, msg.as_string())  </span><br><span class=\"line\">smtp.quit()</span><br></pre></td></tr></table></figure>\n<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><p>1、修改getArxiv.py文件：<br>keyword： 需要订阅的关键词<br>mailFrom： 发件邮箱地址<br>password： 发件邮箱密码<br>smtpserver： 发件邮箱smtp服务地址<br>mailTo： 订阅邮箱</p>\n<p>2、在本机定时运行：<br>打开terminal，<br>$ crontab -e<br>0 8 <em> </em> * python %getArxiv.py路径%<br>:wq<br>(每天早上8点发送邮件)</p>\n<h1 id=\"BeautifulSoup\"><a href=\"#BeautifulSoup\" class=\"headerlink\" title=\"BeautifulSoup\"></a>BeautifulSoup</h1><p>另附BeautifulSoup源码:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br><span class=\"line\">449</span><br><span class=\"line\">450</span><br><span class=\"line\">451</span><br><span class=\"line\">452</span><br><span class=\"line\">453</span><br><span class=\"line\">454</span><br><span class=\"line\">455</span><br><span class=\"line\">456</span><br><span class=\"line\">457</span><br><span class=\"line\">458</span><br><span class=\"line\">459</span><br><span class=\"line\">460</span><br><span class=\"line\">461</span><br><span class=\"line\">462</span><br><span class=\"line\">463</span><br><span class=\"line\">464</span><br><span class=\"line\">465</span><br><span class=\"line\">466</span><br><span class=\"line\">467</span><br><span class=\"line\">468</span><br><span class=\"line\">469</span><br><span class=\"line\">470</span><br><span class=\"line\">471</span><br><span class=\"line\">472</span><br><span class=\"line\">473</span><br><span class=\"line\">474</span><br><span class=\"line\">475</span><br><span class=\"line\">476</span><br><span class=\"line\">477</span><br><span class=\"line\">478</span><br><span class=\"line\">479</span><br><span class=\"line\">480</span><br><span class=\"line\">481</span><br><span class=\"line\">482</span><br><span class=\"line\">483</span><br><span class=\"line\">484</span><br><span class=\"line\">485</span><br><span class=\"line\">486</span><br><span class=\"line\">487</span><br><span class=\"line\">488</span><br><span class=\"line\">489</span><br><span class=\"line\">490</span><br><span class=\"line\">491</span><br><span class=\"line\">492</span><br><span class=\"line\">493</span><br><span class=\"line\">494</span><br><span class=\"line\">495</span><br><span class=\"line\">496</span><br><span class=\"line\">497</span><br><span class=\"line\">498</span><br><span class=\"line\">499</span><br><span class=\"line\">500</span><br><span class=\"line\">501</span><br><span class=\"line\">502</span><br><span class=\"line\">503</span><br><span class=\"line\">504</span><br><span class=\"line\">505</span><br><span class=\"line\">506</span><br><span class=\"line\">507</span><br><span class=\"line\">508</span><br><span class=\"line\">509</span><br><span class=\"line\">510</span><br><span class=\"line\">511</span><br><span class=\"line\">512</span><br><span class=\"line\">513</span><br><span class=\"line\">514</span><br><span class=\"line\">515</span><br><span class=\"line\">516</span><br><span class=\"line\">517</span><br><span class=\"line\">518</span><br><span class=\"line\">519</span><br><span class=\"line\">520</span><br><span class=\"line\">521</span><br><span class=\"line\">522</span><br><span class=\"line\">523</span><br><span class=\"line\">524</span><br><span class=\"line\">525</span><br><span class=\"line\">526</span><br><span class=\"line\">527</span><br><span class=\"line\">528</span><br><span class=\"line\">529</span><br><span class=\"line\">530</span><br><span class=\"line\">531</span><br><span class=\"line\">532</span><br><span class=\"line\">533</span><br><span class=\"line\">534</span><br><span class=\"line\">535</span><br><span class=\"line\">536</span><br><span class=\"line\">537</span><br><span class=\"line\">538</span><br><span class=\"line\">539</span><br><span class=\"line\">540</span><br><span class=\"line\">541</span><br><span class=\"line\">542</span><br><span class=\"line\">543</span><br><span class=\"line\">544</span><br><span class=\"line\">545</span><br><span class=\"line\">546</span><br><span class=\"line\">547</span><br><span class=\"line\">548</span><br><span class=\"line\">549</span><br><span class=\"line\">550</span><br><span class=\"line\">551</span><br><span class=\"line\">552</span><br><span class=\"line\">553</span><br><span class=\"line\">554</span><br><span class=\"line\">555</span><br><span class=\"line\">556</span><br><span class=\"line\">557</span><br><span class=\"line\">558</span><br><span class=\"line\">559</span><br><span class=\"line\">560</span><br><span class=\"line\">561</span><br><span class=\"line\">562</span><br><span class=\"line\">563</span><br><span class=\"line\">564</span><br><span class=\"line\">565</span><br><span class=\"line\">566</span><br><span class=\"line\">567</span><br><span class=\"line\">568</span><br><span class=\"line\">569</span><br><span class=\"line\">570</span><br><span class=\"line\">571</span><br><span class=\"line\">572</span><br><span class=\"line\">573</span><br><span class=\"line\">574</span><br><span class=\"line\">575</span><br><span class=\"line\">576</span><br><span class=\"line\">577</span><br><span class=\"line\">578</span><br><span class=\"line\">579</span><br><span class=\"line\">580</span><br><span class=\"line\">581</span><br><span class=\"line\">582</span><br><span class=\"line\">583</span><br><span class=\"line\">584</span><br><span class=\"line\">585</span><br><span class=\"line\">586</span><br><span class=\"line\">587</span><br><span class=\"line\">588</span><br><span class=\"line\">589</span><br><span class=\"line\">590</span><br><span class=\"line\">591</span><br><span class=\"line\">592</span><br><span class=\"line\">593</span><br><span class=\"line\">594</span><br><span class=\"line\">595</span><br><span class=\"line\">596</span><br><span class=\"line\">597</span><br><span class=\"line\">598</span><br><span class=\"line\">599</span><br><span class=\"line\">600</span><br><span class=\"line\">601</span><br><span class=\"line\">602</span><br><span class=\"line\">603</span><br><span class=\"line\">604</span><br><span class=\"line\">605</span><br><span class=\"line\">606</span><br><span class=\"line\">607</span><br><span class=\"line\">608</span><br><span class=\"line\">609</span><br><span class=\"line\">610</span><br><span class=\"line\">611</span><br><span class=\"line\">612</span><br><span class=\"line\">613</span><br><span class=\"line\">614</span><br><span class=\"line\">615</span><br><span class=\"line\">616</span><br><span class=\"line\">617</span><br><span class=\"line\">618</span><br><span class=\"line\">619</span><br><span class=\"line\">620</span><br><span class=\"line\">621</span><br><span class=\"line\">622</span><br><span class=\"line\">623</span><br><span class=\"line\">624</span><br><span class=\"line\">625</span><br><span class=\"line\">626</span><br><span class=\"line\">627</span><br><span class=\"line\">628</span><br><span class=\"line\">629</span><br><span class=\"line\">630</span><br><span class=\"line\">631</span><br><span class=\"line\">632</span><br><span class=\"line\">633</span><br><span class=\"line\">634</span><br><span class=\"line\">635</span><br><span class=\"line\">636</span><br><span class=\"line\">637</span><br><span class=\"line\">638</span><br><span class=\"line\">639</span><br><span class=\"line\">640</span><br><span class=\"line\">641</span><br><span class=\"line\">642</span><br><span class=\"line\">643</span><br><span class=\"line\">644</span><br><span class=\"line\">645</span><br><span class=\"line\">646</span><br><span class=\"line\">647</span><br><span class=\"line\">648</span><br><span class=\"line\">649</span><br><span class=\"line\">650</span><br><span class=\"line\">651</span><br><span class=\"line\">652</span><br><span class=\"line\">653</span><br><span class=\"line\">654</span><br><span class=\"line\">655</span><br><span class=\"line\">656</span><br><span class=\"line\">657</span><br><span class=\"line\">658</span><br><span class=\"line\">659</span><br><span class=\"line\">660</span><br><span class=\"line\">661</span><br><span class=\"line\">662</span><br><span class=\"line\">663</span><br><span class=\"line\">664</span><br><span class=\"line\">665</span><br><span class=\"line\">666</span><br><span class=\"line\">667</span><br><span class=\"line\">668</span><br><span class=\"line\">669</span><br><span class=\"line\">670</span><br><span class=\"line\">671</span><br><span class=\"line\">672</span><br><span class=\"line\">673</span><br><span class=\"line\">674</span><br><span class=\"line\">675</span><br><span class=\"line\">676</span><br><span class=\"line\">677</span><br><span class=\"line\">678</span><br><span class=\"line\">679</span><br><span class=\"line\">680</span><br><span class=\"line\">681</span><br><span class=\"line\">682</span><br><span class=\"line\">683</span><br><span class=\"line\">684</span><br><span class=\"line\">685</span><br><span class=\"line\">686</span><br><span class=\"line\">687</span><br><span class=\"line\">688</span><br><span class=\"line\">689</span><br><span class=\"line\">690</span><br><span class=\"line\">691</span><br><span class=\"line\">692</span><br><span class=\"line\">693</span><br><span class=\"line\">694</span><br><span class=\"line\">695</span><br><span class=\"line\">696</span><br><span class=\"line\">697</span><br><span class=\"line\">698</span><br><span class=\"line\">699</span><br><span class=\"line\">700</span><br><span class=\"line\">701</span><br><span class=\"line\">702</span><br><span class=\"line\">703</span><br><span class=\"line\">704</span><br><span class=\"line\">705</span><br><span class=\"line\">706</span><br><span class=\"line\">707</span><br><span class=\"line\">708</span><br><span class=\"line\">709</span><br><span class=\"line\">710</span><br><span class=\"line\">711</span><br><span class=\"line\">712</span><br><span class=\"line\">713</span><br><span class=\"line\">714</span><br><span class=\"line\">715</span><br><span class=\"line\">716</span><br><span class=\"line\">717</span><br><span class=\"line\">718</span><br><span class=\"line\">719</span><br><span class=\"line\">720</span><br><span class=\"line\">721</span><br><span class=\"line\">722</span><br><span class=\"line\">723</span><br><span class=\"line\">724</span><br><span class=\"line\">725</span><br><span class=\"line\">726</span><br><span class=\"line\">727</span><br><span class=\"line\">728</span><br><span class=\"line\">729</span><br><span class=\"line\">730</span><br><span class=\"line\">731</span><br><span class=\"line\">732</span><br><span class=\"line\">733</span><br><span class=\"line\">734</span><br><span class=\"line\">735</span><br><span class=\"line\">736</span><br><span class=\"line\">737</span><br><span class=\"line\">738</span><br><span class=\"line\">739</span><br><span class=\"line\">740</span><br><span class=\"line\">741</span><br><span class=\"line\">742</span><br><span class=\"line\">743</span><br><span class=\"line\">744</span><br><span class=\"line\">745</span><br><span class=\"line\">746</span><br><span class=\"line\">747</span><br><span class=\"line\">748</span><br><span class=\"line\">749</span><br><span class=\"line\">750</span><br><span class=\"line\">751</span><br><span class=\"line\">752</span><br><span class=\"line\">753</span><br><span class=\"line\">754</span><br><span class=\"line\">755</span><br><span class=\"line\">756</span><br><span class=\"line\">757</span><br><span class=\"line\">758</span><br><span class=\"line\">759</span><br><span class=\"line\">760</span><br><span class=\"line\">761</span><br><span class=\"line\">762</span><br><span class=\"line\">763</span><br><span class=\"line\">764</span><br><span class=\"line\">765</span><br><span class=\"line\">766</span><br><span class=\"line\">767</span><br><span class=\"line\">768</span><br><span class=\"line\">769</span><br><span class=\"line\">770</span><br><span class=\"line\">771</span><br><span class=\"line\">772</span><br><span class=\"line\">773</span><br><span class=\"line\">774</span><br><span class=\"line\">775</span><br><span class=\"line\">776</span><br><span class=\"line\">777</span><br><span class=\"line\">778</span><br><span class=\"line\">779</span><br><span class=\"line\">780</span><br><span class=\"line\">781</span><br><span class=\"line\">782</span><br><span class=\"line\">783</span><br><span class=\"line\">784</span><br><span class=\"line\">785</span><br><span class=\"line\">786</span><br><span class=\"line\">787</span><br><span class=\"line\">788</span><br><span class=\"line\">789</span><br><span class=\"line\">790</span><br><span class=\"line\">791</span><br><span class=\"line\">792</span><br><span class=\"line\">793</span><br><span class=\"line\">794</span><br><span class=\"line\">795</span><br><span class=\"line\">796</span><br><span class=\"line\">797</span><br><span class=\"line\">798</span><br><span class=\"line\">799</span><br><span class=\"line\">800</span><br><span class=\"line\">801</span><br><span class=\"line\">802</span><br><span class=\"line\">803</span><br><span class=\"line\">804</span><br><span class=\"line\">805</span><br><span class=\"line\">806</span><br><span class=\"line\">807</span><br><span class=\"line\">808</span><br><span class=\"line\">809</span><br><span class=\"line\">810</span><br><span class=\"line\">811</span><br><span class=\"line\">812</span><br><span class=\"line\">813</span><br><span class=\"line\">814</span><br><span class=\"line\">815</span><br><span class=\"line\">816</span><br><span class=\"line\">817</span><br><span class=\"line\">818</span><br><span class=\"line\">819</span><br><span class=\"line\">820</span><br><span class=\"line\">821</span><br><span class=\"line\">822</span><br><span class=\"line\">823</span><br><span class=\"line\">824</span><br><span class=\"line\">825</span><br><span class=\"line\">826</span><br><span class=\"line\">827</span><br><span class=\"line\">828</span><br><span class=\"line\">829</span><br><span class=\"line\">830</span><br><span class=\"line\">831</span><br><span class=\"line\">832</span><br><span class=\"line\">833</span><br><span class=\"line\">834</span><br><span class=\"line\">835</span><br><span class=\"line\">836</span><br><span class=\"line\">837</span><br><span class=\"line\">838</span><br><span class=\"line\">839</span><br><span class=\"line\">840</span><br><span class=\"line\">841</span><br><span class=\"line\">842</span><br><span class=\"line\">843</span><br><span class=\"line\">844</span><br><span class=\"line\">845</span><br><span class=\"line\">846</span><br><span class=\"line\">847</span><br><span class=\"line\">848</span><br><span class=\"line\">849</span><br><span class=\"line\">850</span><br><span class=\"line\">851</span><br><span class=\"line\">852</span><br><span class=\"line\">853</span><br><span class=\"line\">854</span><br><span class=\"line\">855</span><br><span class=\"line\">856</span><br><span class=\"line\">857</span><br><span class=\"line\">858</span><br><span class=\"line\">859</span><br><span class=\"line\">860</span><br><span class=\"line\">861</span><br><span class=\"line\">862</span><br><span class=\"line\">863</span><br><span class=\"line\">864</span><br><span class=\"line\">865</span><br><span class=\"line\">866</span><br><span class=\"line\">867</span><br><span class=\"line\">868</span><br><span class=\"line\">869</span><br><span class=\"line\">870</span><br><span class=\"line\">871</span><br><span class=\"line\">872</span><br><span class=\"line\">873</span><br><span class=\"line\">874</span><br><span class=\"line\">875</span><br><span class=\"line\">876</span><br><span class=\"line\">877</span><br><span class=\"line\">878</span><br><span class=\"line\">879</span><br><span class=\"line\">880</span><br><span class=\"line\">881</span><br><span class=\"line\">882</span><br><span class=\"line\">883</span><br><span class=\"line\">884</span><br><span class=\"line\">885</span><br><span class=\"line\">886</span><br><span class=\"line\">887</span><br><span class=\"line\">888</span><br><span class=\"line\">889</span><br><span class=\"line\">890</span><br><span class=\"line\">891</span><br><span class=\"line\">892</span><br><span class=\"line\">893</span><br><span class=\"line\">894</span><br><span class=\"line\">895</span><br><span class=\"line\">896</span><br><span class=\"line\">897</span><br><span class=\"line\">898</span><br><span class=\"line\">899</span><br><span class=\"line\">900</span><br><span class=\"line\">901</span><br><span class=\"line\">902</span><br><span class=\"line\">903</span><br><span class=\"line\">904</span><br><span class=\"line\">905</span><br><span class=\"line\">906</span><br><span class=\"line\">907</span><br><span class=\"line\">908</span><br><span class=\"line\">909</span><br><span class=\"line\">910</span><br><span class=\"line\">911</span><br><span class=\"line\">912</span><br><span class=\"line\">913</span><br><span class=\"line\">914</span><br><span class=\"line\">915</span><br><span class=\"line\">916</span><br><span class=\"line\">917</span><br><span class=\"line\">918</span><br><span class=\"line\">919</span><br><span class=\"line\">920</span><br><span class=\"line\">921</span><br><span class=\"line\">922</span><br><span class=\"line\">923</span><br><span class=\"line\">924</span><br><span class=\"line\">925</span><br><span class=\"line\">926</span><br><span class=\"line\">927</span><br><span class=\"line\">928</span><br><span class=\"line\">929</span><br><span class=\"line\">930</span><br><span class=\"line\">931</span><br><span class=\"line\">932</span><br><span class=\"line\">933</span><br><span class=\"line\">934</span><br><span class=\"line\">935</span><br><span class=\"line\">936</span><br><span class=\"line\">937</span><br><span class=\"line\">938</span><br><span class=\"line\">939</span><br><span class=\"line\">940</span><br><span class=\"line\">941</span><br><span class=\"line\">942</span><br><span class=\"line\">943</span><br><span class=\"line\">944</span><br><span class=\"line\">945</span><br><span class=\"line\">946</span><br><span class=\"line\">947</span><br><span class=\"line\">948</span><br><span class=\"line\">949</span><br><span class=\"line\">950</span><br><span class=\"line\">951</span><br><span class=\"line\">952</span><br><span class=\"line\">953</span><br><span class=\"line\">954</span><br><span class=\"line\">955</span><br><span class=\"line\">956</span><br><span class=\"line\">957</span><br><span class=\"line\">958</span><br><span class=\"line\">959</span><br><span class=\"line\">960</span><br><span class=\"line\">961</span><br><span class=\"line\">962</span><br><span class=\"line\">963</span><br><span class=\"line\">964</span><br><span class=\"line\">965</span><br><span class=\"line\">966</span><br><span class=\"line\">967</span><br><span class=\"line\">968</span><br><span class=\"line\">969</span><br><span class=\"line\">970</span><br><span class=\"line\">971</span><br><span class=\"line\">972</span><br><span class=\"line\">973</span><br><span class=\"line\">974</span><br><span class=\"line\">975</span><br><span class=\"line\">976</span><br><span class=\"line\">977</span><br><span class=\"line\">978</span><br><span class=\"line\">979</span><br><span class=\"line\">980</span><br><span class=\"line\">981</span><br><span class=\"line\">982</span><br><span class=\"line\">983</span><br><span class=\"line\">984</span><br><span class=\"line\">985</span><br><span class=\"line\">986</span><br><span class=\"line\">987</span><br><span class=\"line\">988</span><br><span class=\"line\">989</span><br><span class=\"line\">990</span><br><span class=\"line\">991</span><br><span class=\"line\">992</span><br><span class=\"line\">993</span><br><span class=\"line\">994</span><br><span class=\"line\">995</span><br><span class=\"line\">996</span><br><span class=\"line\">997</span><br><span class=\"line\">998</span><br><span class=\"line\">999</span><br><span class=\"line\">1000</span><br><span class=\"line\">1001</span><br><span class=\"line\">1002</span><br><span class=\"line\">1003</span><br><span class=\"line\">1004</span><br><span class=\"line\">1005</span><br><span class=\"line\">1006</span><br><span class=\"line\">1007</span><br><span class=\"line\">1008</span><br><span class=\"line\">1009</span><br><span class=\"line\">1010</span><br><span class=\"line\">1011</span><br><span class=\"line\">1012</span><br><span class=\"line\">1013</span><br><span class=\"line\">1014</span><br><span class=\"line\">1015</span><br><span class=\"line\">1016</span><br><span class=\"line\">1017</span><br><span class=\"line\">1018</span><br><span class=\"line\">1019</span><br><span class=\"line\">1020</span><br><span class=\"line\">1021</span><br><span class=\"line\">1022</span><br><span class=\"line\">1023</span><br><span class=\"line\">1024</span><br><span class=\"line\">1025</span><br><span class=\"line\">1026</span><br><span class=\"line\">1027</span><br><span class=\"line\">1028</span><br><span class=\"line\">1029</span><br><span class=\"line\">1030</span><br><span class=\"line\">1031</span><br><span class=\"line\">1032</span><br><span class=\"line\">1033</span><br><span class=\"line\">1034</span><br><span class=\"line\">1035</span><br><span class=\"line\">1036</span><br><span class=\"line\">1037</span><br><span class=\"line\">1038</span><br><span class=\"line\">1039</span><br><span class=\"line\">1040</span><br><span class=\"line\">1041</span><br><span class=\"line\">1042</span><br><span class=\"line\">1043</span><br><span class=\"line\">1044</span><br><span class=\"line\">1045</span><br><span class=\"line\">1046</span><br><span class=\"line\">1047</span><br><span class=\"line\">1048</span><br><span class=\"line\">1049</span><br><span class=\"line\">1050</span><br><span class=\"line\">1051</span><br><span class=\"line\">1052</span><br><span class=\"line\">1053</span><br><span class=\"line\">1054</span><br><span class=\"line\">1055</span><br><span class=\"line\">1056</span><br><span class=\"line\">1057</span><br><span class=\"line\">1058</span><br><span class=\"line\">1059</span><br><span class=\"line\">1060</span><br><span class=\"line\">1061</span><br><span class=\"line\">1062</span><br><span class=\"line\">1063</span><br><span class=\"line\">1064</span><br><span class=\"line\">1065</span><br><span class=\"line\">1066</span><br><span class=\"line\">1067</span><br><span class=\"line\">1068</span><br><span class=\"line\">1069</span><br><span class=\"line\">1070</span><br><span class=\"line\">1071</span><br><span class=\"line\">1072</span><br><span class=\"line\">1073</span><br><span class=\"line\">1074</span><br><span class=\"line\">1075</span><br><span class=\"line\">1076</span><br><span class=\"line\">1077</span><br><span class=\"line\">1078</span><br><span class=\"line\">1079</span><br><span class=\"line\">1080</span><br><span class=\"line\">1081</span><br><span class=\"line\">1082</span><br><span class=\"line\">1083</span><br><span class=\"line\">1084</span><br><span class=\"line\">1085</span><br><span class=\"line\">1086</span><br><span class=\"line\">1087</span><br><span class=\"line\">1088</span><br><span class=\"line\">1089</span><br><span class=\"line\">1090</span><br><span class=\"line\">1091</span><br><span class=\"line\">1092</span><br><span class=\"line\">1093</span><br><span class=\"line\">1094</span><br><span class=\"line\">1095</span><br><span class=\"line\">1096</span><br><span class=\"line\">1097</span><br><span class=\"line\">1098</span><br><span class=\"line\">1099</span><br><span class=\"line\">1100</span><br><span class=\"line\">1101</span><br><span class=\"line\">1102</span><br><span class=\"line\">1103</span><br><span class=\"line\">1104</span><br><span class=\"line\">1105</span><br><span class=\"line\">1106</span><br><span class=\"line\">1107</span><br><span class=\"line\">1108</span><br><span class=\"line\">1109</span><br><span class=\"line\">1110</span><br><span class=\"line\">1111</span><br><span class=\"line\">1112</span><br><span class=\"line\">1113</span><br><span class=\"line\">1114</span><br><span class=\"line\">1115</span><br><span class=\"line\">1116</span><br><span class=\"line\">1117</span><br><span class=\"line\">1118</span><br><span class=\"line\">1119</span><br><span class=\"line\">1120</span><br><span class=\"line\">1121</span><br><span class=\"line\">1122</span><br><span class=\"line\">1123</span><br><span class=\"line\">1124</span><br><span class=\"line\">1125</span><br><span class=\"line\">1126</span><br><span class=\"line\">1127</span><br><span class=\"line\">1128</span><br><span class=\"line\">1129</span><br><span class=\"line\">1130</span><br><span class=\"line\">1131</span><br><span class=\"line\">1132</span><br><span class=\"line\">1133</span><br><span class=\"line\">1134</span><br><span class=\"line\">1135</span><br><span class=\"line\">1136</span><br><span class=\"line\">1137</span><br><span class=\"line\">1138</span><br><span class=\"line\">1139</span><br><span class=\"line\">1140</span><br><span class=\"line\">1141</span><br><span class=\"line\">1142</span><br><span class=\"line\">1143</span><br><span class=\"line\">1144</span><br><span class=\"line\">1145</span><br><span class=\"line\">1146</span><br><span class=\"line\">1147</span><br><span class=\"line\">1148</span><br><span class=\"line\">1149</span><br><span class=\"line\">1150</span><br><span class=\"line\">1151</span><br><span class=\"line\">1152</span><br><span class=\"line\">1153</span><br><span class=\"line\">1154</span><br><span class=\"line\">1155</span><br><span class=\"line\">1156</span><br><span class=\"line\">1157</span><br><span class=\"line\">1158</span><br><span class=\"line\">1159</span><br><span class=\"line\">1160</span><br><span class=\"line\">1161</span><br><span class=\"line\">1162</span><br><span class=\"line\">1163</span><br><span class=\"line\">1164</span><br><span class=\"line\">1165</span><br><span class=\"line\">1166</span><br><span class=\"line\">1167</span><br><span class=\"line\">1168</span><br><span class=\"line\">1169</span><br><span class=\"line\">1170</span><br><span class=\"line\">1171</span><br><span class=\"line\">1172</span><br><span class=\"line\">1173</span><br><span class=\"line\">1174</span><br><span class=\"line\">1175</span><br><span class=\"line\">1176</span><br><span class=\"line\">1177</span><br><span class=\"line\">1178</span><br><span class=\"line\">1179</span><br><span class=\"line\">1180</span><br><span class=\"line\">1181</span><br><span class=\"line\">1182</span><br><span class=\"line\">1183</span><br><span class=\"line\">1184</span><br><span class=\"line\">1185</span><br><span class=\"line\">1186</span><br><span class=\"line\">1187</span><br><span class=\"line\">1188</span><br><span class=\"line\">1189</span><br><span class=\"line\">1190</span><br><span class=\"line\">1191</span><br><span class=\"line\">1192</span><br><span class=\"line\">1193</span><br><span class=\"line\">1194</span><br><span class=\"line\">1195</span><br><span class=\"line\">1196</span><br><span class=\"line\">1197</span><br><span class=\"line\">1198</span><br><span class=\"line\">1199</span><br><span class=\"line\">1200</span><br><span class=\"line\">1201</span><br><span class=\"line\">1202</span><br><span class=\"line\">1203</span><br><span class=\"line\">1204</span><br><span class=\"line\">1205</span><br><span class=\"line\">1206</span><br><span class=\"line\">1207</span><br><span class=\"line\">1208</span><br><span class=\"line\">1209</span><br><span class=\"line\">1210</span><br><span class=\"line\">1211</span><br><span class=\"line\">1212</span><br><span class=\"line\">1213</span><br><span class=\"line\">1214</span><br><span class=\"line\">1215</span><br><span class=\"line\">1216</span><br><span class=\"line\">1217</span><br><span class=\"line\">1218</span><br><span class=\"line\">1219</span><br><span class=\"line\">1220</span><br><span class=\"line\">1221</span><br><span class=\"line\">1222</span><br><span class=\"line\">1223</span><br><span class=\"line\">1224</span><br><span class=\"line\">1225</span><br><span class=\"line\">1226</span><br><span class=\"line\">1227</span><br><span class=\"line\">1228</span><br><span class=\"line\">1229</span><br><span class=\"line\">1230</span><br><span class=\"line\">1231</span><br><span class=\"line\">1232</span><br><span class=\"line\">1233</span><br><span class=\"line\">1234</span><br><span class=\"line\">1235</span><br><span class=\"line\">1236</span><br><span class=\"line\">1237</span><br><span class=\"line\">1238</span><br><span class=\"line\">1239</span><br><span class=\"line\">1240</span><br><span class=\"line\">1241</span><br><span class=\"line\">1242</span><br><span class=\"line\">1243</span><br><span class=\"line\">1244</span><br><span class=\"line\">1245</span><br><span class=\"line\">1246</span><br><span class=\"line\">1247</span><br><span class=\"line\">1248</span><br><span class=\"line\">1249</span><br><span class=\"line\">1250</span><br><span class=\"line\">1251</span><br><span class=\"line\">1252</span><br><span class=\"line\">1253</span><br><span class=\"line\">1254</span><br><span class=\"line\">1255</span><br><span class=\"line\">1256</span><br><span class=\"line\">1257</span><br><span class=\"line\">1258</span><br><span class=\"line\">1259</span><br><span class=\"line\">1260</span><br><span class=\"line\">1261</span><br><span class=\"line\">1262</span><br><span class=\"line\">1263</span><br><span class=\"line\">1264</span><br><span class=\"line\">1265</span><br><span class=\"line\">1266</span><br><span class=\"line\">1267</span><br><span class=\"line\">1268</span><br><span class=\"line\">1269</span><br><span class=\"line\">1270</span><br><span class=\"line\">1271</span><br><span class=\"line\">1272</span><br><span class=\"line\">1273</span><br><span class=\"line\">1274</span><br><span class=\"line\">1275</span><br><span class=\"line\">1276</span><br><span class=\"line\">1277</span><br><span class=\"line\">1278</span><br><span class=\"line\">1279</span><br><span class=\"line\">1280</span><br><span class=\"line\">1281</span><br><span class=\"line\">1282</span><br><span class=\"line\">1283</span><br><span class=\"line\">1284</span><br><span class=\"line\">1285</span><br><span class=\"line\">1286</span><br><span class=\"line\">1287</span><br><span class=\"line\">1288</span><br><span class=\"line\">1289</span><br><span class=\"line\">1290</span><br><span class=\"line\">1291</span><br><span class=\"line\">1292</span><br><span class=\"line\">1293</span><br><span class=\"line\">1294</span><br><span class=\"line\">1295</span><br><span class=\"line\">1296</span><br><span class=\"line\">1297</span><br><span class=\"line\">1298</span><br><span class=\"line\">1299</span><br><span class=\"line\">1300</span><br><span class=\"line\">1301</span><br><span class=\"line\">1302</span><br><span class=\"line\">1303</span><br><span class=\"line\">1304</span><br><span class=\"line\">1305</span><br><span class=\"line\">1306</span><br><span class=\"line\">1307</span><br><span class=\"line\">1308</span><br><span class=\"line\">1309</span><br><span class=\"line\">1310</span><br><span class=\"line\">1311</span><br><span class=\"line\">1312</span><br><span class=\"line\">1313</span><br><span class=\"line\">1314</span><br><span class=\"line\">1315</span><br><span class=\"line\">1316</span><br><span class=\"line\">1317</span><br><span class=\"line\">1318</span><br><span class=\"line\">1319</span><br><span class=\"line\">1320</span><br><span class=\"line\">1321</span><br><span class=\"line\">1322</span><br><span class=\"line\">1323</span><br><span class=\"line\">1324</span><br><span class=\"line\">1325</span><br><span class=\"line\">1326</span><br><span class=\"line\">1327</span><br><span class=\"line\">1328</span><br><span class=\"line\">1329</span><br><span class=\"line\">1330</span><br><span class=\"line\">1331</span><br><span class=\"line\">1332</span><br><span class=\"line\">1333</span><br><span class=\"line\">1334</span><br><span class=\"line\">1335</span><br><span class=\"line\">1336</span><br><span class=\"line\">1337</span><br><span class=\"line\">1338</span><br><span class=\"line\">1339</span><br><span class=\"line\">1340</span><br><span class=\"line\">1341</span><br><span class=\"line\">1342</span><br><span class=\"line\">1343</span><br><span class=\"line\">1344</span><br><span class=\"line\">1345</span><br><span class=\"line\">1346</span><br><span class=\"line\">1347</span><br><span class=\"line\">1348</span><br><span class=\"line\">1349</span><br><span class=\"line\">1350</span><br><span class=\"line\">1351</span><br><span class=\"line\">1352</span><br><span class=\"line\">1353</span><br><span class=\"line\">1354</span><br><span class=\"line\">1355</span><br><span class=\"line\">1356</span><br><span class=\"line\">1357</span><br><span class=\"line\">1358</span><br><span class=\"line\">1359</span><br><span class=\"line\">1360</span><br><span class=\"line\">1361</span><br><span class=\"line\">1362</span><br><span class=\"line\">1363</span><br><span class=\"line\">1364</span><br><span class=\"line\">1365</span><br><span class=\"line\">1366</span><br><span class=\"line\">1367</span><br><span class=\"line\">1368</span><br><span class=\"line\">1369</span><br><span class=\"line\">1370</span><br><span class=\"line\">1371</span><br><span class=\"line\">1372</span><br><span class=\"line\">1373</span><br><span class=\"line\">1374</span><br><span class=\"line\">1375</span><br><span class=\"line\">1376</span><br><span class=\"line\">1377</span><br><span class=\"line\">1378</span><br><span class=\"line\">1379</span><br><span class=\"line\">1380</span><br><span class=\"line\">1381</span><br><span class=\"line\">1382</span><br><span class=\"line\">1383</span><br><span class=\"line\">1384</span><br><span class=\"line\">1385</span><br><span class=\"line\">1386</span><br><span class=\"line\">1387</span><br><span class=\"line\">1388</span><br><span class=\"line\">1389</span><br><span class=\"line\">1390</span><br><span class=\"line\">1391</span><br><span class=\"line\">1392</span><br><span class=\"line\">1393</span><br><span class=\"line\">1394</span><br><span class=\"line\">1395</span><br><span class=\"line\">1396</span><br><span class=\"line\">1397</span><br><span class=\"line\">1398</span><br><span class=\"line\">1399</span><br><span class=\"line\">1400</span><br><span class=\"line\">1401</span><br><span class=\"line\">1402</span><br><span class=\"line\">1403</span><br><span class=\"line\">1404</span><br><span class=\"line\">1405</span><br><span class=\"line\">1406</span><br><span class=\"line\">1407</span><br><span class=\"line\">1408</span><br><span class=\"line\">1409</span><br><span class=\"line\">1410</span><br><span class=\"line\">1411</span><br><span class=\"line\">1412</span><br><span class=\"line\">1413</span><br><span class=\"line\">1414</span><br><span class=\"line\">1415</span><br><span class=\"line\">1416</span><br><span class=\"line\">1417</span><br><span class=\"line\">1418</span><br><span class=\"line\">1419</span><br><span class=\"line\">1420</span><br><span class=\"line\">1421</span><br><span class=\"line\">1422</span><br><span class=\"line\">1423</span><br><span class=\"line\">1424</span><br><span class=\"line\">1425</span><br><span class=\"line\">1426</span><br><span class=\"line\">1427</span><br><span class=\"line\">1428</span><br><span class=\"line\">1429</span><br><span class=\"line\">1430</span><br><span class=\"line\">1431</span><br><span class=\"line\">1432</span><br><span class=\"line\">1433</span><br><span class=\"line\">1434</span><br><span class=\"line\">1435</span><br><span class=\"line\">1436</span><br><span class=\"line\">1437</span><br><span class=\"line\">1438</span><br><span class=\"line\">1439</span><br><span class=\"line\">1440</span><br><span class=\"line\">1441</span><br><span class=\"line\">1442</span><br><span class=\"line\">1443</span><br><span class=\"line\">1444</span><br><span class=\"line\">1445</span><br><span class=\"line\">1446</span><br><span class=\"line\">1447</span><br><span class=\"line\">1448</span><br><span class=\"line\">1449</span><br><span class=\"line\">1450</span><br><span class=\"line\">1451</span><br><span class=\"line\">1452</span><br><span class=\"line\">1453</span><br><span class=\"line\">1454</span><br><span class=\"line\">1455</span><br><span class=\"line\">1456</span><br><span class=\"line\">1457</span><br><span class=\"line\">1458</span><br><span class=\"line\">1459</span><br><span class=\"line\">1460</span><br><span class=\"line\">1461</span><br><span class=\"line\">1462</span><br><span class=\"line\">1463</span><br><span class=\"line\">1464</span><br><span class=\"line\">1465</span><br><span class=\"line\">1466</span><br><span class=\"line\">1467</span><br><span class=\"line\">1468</span><br><span class=\"line\">1469</span><br><span class=\"line\">1470</span><br><span class=\"line\">1471</span><br><span class=\"line\">1472</span><br><span class=\"line\">1473</span><br><span class=\"line\">1474</span><br><span class=\"line\">1475</span><br><span class=\"line\">1476</span><br><span class=\"line\">1477</span><br><span class=\"line\">1478</span><br><span class=\"line\">1479</span><br><span class=\"line\">1480</span><br><span class=\"line\">1481</span><br><span class=\"line\">1482</span><br><span class=\"line\">1483</span><br><span class=\"line\">1484</span><br><span class=\"line\">1485</span><br><span class=\"line\">1486</span><br><span class=\"line\">1487</span><br><span class=\"line\">1488</span><br><span class=\"line\">1489</span><br><span class=\"line\">1490</span><br><span class=\"line\">1491</span><br><span class=\"line\">1492</span><br><span class=\"line\">1493</span><br><span class=\"line\">1494</span><br><span class=\"line\">1495</span><br><span class=\"line\">1496</span><br><span class=\"line\">1497</span><br><span class=\"line\">1498</span><br><span class=\"line\">1499</span><br><span class=\"line\">1500</span><br><span class=\"line\">1501</span><br><span class=\"line\">1502</span><br><span class=\"line\">1503</span><br><span class=\"line\">1504</span><br><span class=\"line\">1505</span><br><span class=\"line\">1506</span><br><span class=\"line\">1507</span><br><span class=\"line\">1508</span><br><span class=\"line\">1509</span><br><span class=\"line\">1510</span><br><span class=\"line\">1511</span><br><span class=\"line\">1512</span><br><span class=\"line\">1513</span><br><span class=\"line\">1514</span><br><span class=\"line\">1515</span><br><span class=\"line\">1516</span><br><span class=\"line\">1517</span><br><span class=\"line\">1518</span><br><span class=\"line\">1519</span><br><span class=\"line\">1520</span><br><span class=\"line\">1521</span><br><span class=\"line\">1522</span><br><span class=\"line\">1523</span><br><span class=\"line\">1524</span><br><span class=\"line\">1525</span><br><span class=\"line\">1526</span><br><span class=\"line\">1527</span><br><span class=\"line\">1528</span><br><span class=\"line\">1529</span><br><span class=\"line\">1530</span><br><span class=\"line\">1531</span><br><span class=\"line\">1532</span><br><span class=\"line\">1533</span><br><span class=\"line\">1534</span><br><span class=\"line\">1535</span><br><span class=\"line\">1536</span><br><span class=\"line\">1537</span><br><span class=\"line\">1538</span><br><span class=\"line\">1539</span><br><span class=\"line\">1540</span><br><span class=\"line\">1541</span><br><span class=\"line\">1542</span><br><span class=\"line\">1543</span><br><span class=\"line\">1544</span><br><span class=\"line\">1545</span><br><span class=\"line\">1546</span><br><span class=\"line\">1547</span><br><span class=\"line\">1548</span><br><span class=\"line\">1549</span><br><span class=\"line\">1550</span><br><span class=\"line\">1551</span><br><span class=\"line\">1552</span><br><span class=\"line\">1553</span><br><span class=\"line\">1554</span><br><span class=\"line\">1555</span><br><span class=\"line\">1556</span><br><span class=\"line\">1557</span><br><span class=\"line\">1558</span><br><span class=\"line\">1559</span><br><span class=\"line\">1560</span><br><span class=\"line\">1561</span><br><span class=\"line\">1562</span><br><span class=\"line\">1563</span><br><span class=\"line\">1564</span><br><span class=\"line\">1565</span><br><span class=\"line\">1566</span><br><span class=\"line\">1567</span><br><span class=\"line\">1568</span><br><span class=\"line\">1569</span><br><span class=\"line\">1570</span><br><span class=\"line\">1571</span><br><span class=\"line\">1572</span><br><span class=\"line\">1573</span><br><span class=\"line\">1574</span><br><span class=\"line\">1575</span><br><span class=\"line\">1576</span><br><span class=\"line\">1577</span><br><span class=\"line\">1578</span><br><span class=\"line\">1579</span><br><span class=\"line\">1580</span><br><span class=\"line\">1581</span><br><span class=\"line\">1582</span><br><span class=\"line\">1583</span><br><span class=\"line\">1584</span><br><span class=\"line\">1585</span><br><span class=\"line\">1586</span><br><span class=\"line\">1587</span><br><span class=\"line\">1588</span><br><span class=\"line\">1589</span><br><span class=\"line\">1590</span><br><span class=\"line\">1591</span><br><span class=\"line\">1592</span><br><span class=\"line\">1593</span><br><span class=\"line\">1594</span><br><span class=\"line\">1595</span><br><span class=\"line\">1596</span><br><span class=\"line\">1597</span><br><span class=\"line\">1598</span><br><span class=\"line\">1599</span><br><span class=\"line\">1600</span><br><span class=\"line\">1601</span><br><span class=\"line\">1602</span><br><span class=\"line\">1603</span><br><span class=\"line\">1604</span><br><span class=\"line\">1605</span><br><span class=\"line\">1606</span><br><span class=\"line\">1607</span><br><span class=\"line\">1608</span><br><span class=\"line\">1609</span><br><span class=\"line\">1610</span><br><span class=\"line\">1611</span><br><span class=\"line\">1612</span><br><span class=\"line\">1613</span><br><span class=\"line\">1614</span><br><span class=\"line\">1615</span><br><span class=\"line\">1616</span><br><span class=\"line\">1617</span><br><span class=\"line\">1618</span><br><span class=\"line\">1619</span><br><span class=\"line\">1620</span><br><span class=\"line\">1621</span><br><span class=\"line\">1622</span><br><span class=\"line\">1623</span><br><span class=\"line\">1624</span><br><span class=\"line\">1625</span><br><span class=\"line\">1626</span><br><span class=\"line\">1627</span><br><span class=\"line\">1628</span><br><span class=\"line\">1629</span><br><span class=\"line\">1630</span><br><span class=\"line\">1631</span><br><span class=\"line\">1632</span><br><span class=\"line\">1633</span><br><span class=\"line\">1634</span><br><span class=\"line\">1635</span><br><span class=\"line\">1636</span><br><span class=\"line\">1637</span><br><span class=\"line\">1638</span><br><span class=\"line\">1639</span><br><span class=\"line\">1640</span><br><span class=\"line\">1641</span><br><span class=\"line\">1642</span><br><span class=\"line\">1643</span><br><span class=\"line\">1644</span><br><span class=\"line\">1645</span><br><span class=\"line\">1646</span><br><span class=\"line\">1647</span><br><span class=\"line\">1648</span><br><span class=\"line\">1649</span><br><span class=\"line\">1650</span><br><span class=\"line\">1651</span><br><span class=\"line\">1652</span><br><span class=\"line\">1653</span><br><span class=\"line\">1654</span><br><span class=\"line\">1655</span><br><span class=\"line\">1656</span><br><span class=\"line\">1657</span><br><span class=\"line\">1658</span><br><span class=\"line\">1659</span><br><span class=\"line\">1660</span><br><span class=\"line\">1661</span><br><span class=\"line\">1662</span><br><span class=\"line\">1663</span><br><span class=\"line\">1664</span><br><span class=\"line\">1665</span><br><span class=\"line\">1666</span><br><span class=\"line\">1667</span><br><span class=\"line\">1668</span><br><span class=\"line\">1669</span><br><span class=\"line\">1670</span><br><span class=\"line\">1671</span><br><span class=\"line\">1672</span><br><span class=\"line\">1673</span><br><span class=\"line\">1674</span><br><span class=\"line\">1675</span><br><span class=\"line\">1676</span><br><span class=\"line\">1677</span><br><span class=\"line\">1678</span><br><span class=\"line\">1679</span><br><span class=\"line\">1680</span><br><span class=\"line\">1681</span><br><span class=\"line\">1682</span><br><span class=\"line\">1683</span><br><span class=\"line\">1684</span><br><span class=\"line\">1685</span><br><span class=\"line\">1686</span><br><span class=\"line\">1687</span><br><span class=\"line\">1688</span><br><span class=\"line\">1689</span><br><span class=\"line\">1690</span><br><span class=\"line\">1691</span><br><span class=\"line\">1692</span><br><span class=\"line\">1693</span><br><span class=\"line\">1694</span><br><span class=\"line\">1695</span><br><span class=\"line\">1696</span><br><span class=\"line\">1697</span><br><span class=\"line\">1698</span><br><span class=\"line\">1699</span><br><span class=\"line\">1700</span><br><span class=\"line\">1701</span><br><span class=\"line\">1702</span><br><span class=\"line\">1703</span><br><span class=\"line\">1704</span><br><span class=\"line\">1705</span><br><span class=\"line\">1706</span><br><span class=\"line\">1707</span><br><span class=\"line\">1708</span><br><span class=\"line\">1709</span><br><span class=\"line\">1710</span><br><span class=\"line\">1711</span><br><span class=\"line\">1712</span><br><span class=\"line\">1713</span><br><span class=\"line\">1714</span><br><span class=\"line\">1715</span><br><span class=\"line\">1716</span><br><span class=\"line\">1717</span><br><span class=\"line\">1718</span><br><span class=\"line\">1719</span><br><span class=\"line\">1720</span><br><span class=\"line\">1721</span><br><span class=\"line\">1722</span><br><span class=\"line\">1723</span><br><span class=\"line\">1724</span><br><span class=\"line\">1725</span><br><span class=\"line\">1726</span><br><span class=\"line\">1727</span><br><span class=\"line\">1728</span><br><span class=\"line\">1729</span><br><span class=\"line\">1730</span><br><span class=\"line\">1731</span><br><span class=\"line\">1732</span><br><span class=\"line\">1733</span><br><span class=\"line\">1734</span><br><span class=\"line\">1735</span><br><span class=\"line\">1736</span><br><span class=\"line\">1737</span><br><span class=\"line\">1738</span><br><span class=\"line\">1739</span><br><span class=\"line\">1740</span><br><span class=\"line\">1741</span><br><span class=\"line\">1742</span><br><span class=\"line\">1743</span><br><span class=\"line\">1744</span><br><span class=\"line\">1745</span><br><span class=\"line\">1746</span><br><span class=\"line\">1747</span><br><span class=\"line\">1748</span><br><span class=\"line\">1749</span><br><span class=\"line\">1750</span><br><span class=\"line\">1751</span><br><span class=\"line\">1752</span><br><span class=\"line\">1753</span><br><span class=\"line\">1754</span><br><span class=\"line\">1755</span><br><span class=\"line\">1756</span><br><span class=\"line\">1757</span><br><span class=\"line\">1758</span><br><span class=\"line\">1759</span><br><span class=\"line\">1760</span><br><span class=\"line\">1761</span><br><span class=\"line\">1762</span><br><span class=\"line\">1763</span><br><span class=\"line\">1764</span><br><span class=\"line\">1765</span><br><span class=\"line\">1766</span><br><span class=\"line\">1767</span><br><span class=\"line\">1768</span><br><span class=\"line\">1769</span><br><span class=\"line\">1770</span><br><span class=\"line\">1771</span><br><span class=\"line\">1772</span><br><span class=\"line\">1773</span><br><span class=\"line\">1774</span><br><span class=\"line\">1775</span><br><span class=\"line\">1776</span><br><span class=\"line\">1777</span><br><span class=\"line\">1778</span><br><span class=\"line\">1779</span><br><span class=\"line\">1780</span><br><span class=\"line\">1781</span><br><span class=\"line\">1782</span><br><span class=\"line\">1783</span><br><span class=\"line\">1784</span><br><span class=\"line\">1785</span><br><span class=\"line\">1786</span><br><span class=\"line\">1787</span><br><span class=\"line\">1788</span><br><span class=\"line\">1789</span><br><span class=\"line\">1790</span><br><span class=\"line\">1791</span><br><span class=\"line\">1792</span><br><span class=\"line\">1793</span><br><span class=\"line\">1794</span><br><span class=\"line\">1795</span><br><span class=\"line\">1796</span><br><span class=\"line\">1797</span><br><span class=\"line\">1798</span><br><span class=\"line\">1799</span><br><span class=\"line\">1800</span><br><span class=\"line\">1801</span><br><span class=\"line\">1802</span><br><span class=\"line\">1803</span><br><span class=\"line\">1804</span><br><span class=\"line\">1805</span><br><span class=\"line\">1806</span><br><span class=\"line\">1807</span><br><span class=\"line\">1808</span><br><span class=\"line\">1809</span><br><span class=\"line\">1810</span><br><span class=\"line\">1811</span><br><span class=\"line\">1812</span><br><span class=\"line\">1813</span><br><span class=\"line\">1814</span><br><span class=\"line\">1815</span><br><span class=\"line\">1816</span><br><span class=\"line\">1817</span><br><span class=\"line\">1818</span><br><span class=\"line\">1819</span><br><span class=\"line\">1820</span><br><span class=\"line\">1821</span><br><span class=\"line\">1822</span><br><span class=\"line\">1823</span><br><span class=\"line\">1824</span><br><span class=\"line\">1825</span><br><span class=\"line\">1826</span><br><span class=\"line\">1827</span><br><span class=\"line\">1828</span><br><span class=\"line\">1829</span><br><span class=\"line\">1830</span><br><span class=\"line\">1831</span><br><span class=\"line\">1832</span><br><span class=\"line\">1833</span><br><span class=\"line\">1834</span><br><span class=\"line\">1835</span><br><span class=\"line\">1836</span><br><span class=\"line\">1837</span><br><span class=\"line\">1838</span><br><span class=\"line\">1839</span><br><span class=\"line\">1840</span><br><span class=\"line\">1841</span><br><span class=\"line\">1842</span><br><span class=\"line\">1843</span><br><span class=\"line\">1844</span><br><span class=\"line\">1845</span><br><span class=\"line\">1846</span><br><span class=\"line\">1847</span><br><span class=\"line\">1848</span><br><span class=\"line\">1849</span><br><span class=\"line\">1850</span><br><span class=\"line\">1851</span><br><span class=\"line\">1852</span><br><span class=\"line\">1853</span><br><span class=\"line\">1854</span><br><span class=\"line\">1855</span><br><span class=\"line\">1856</span><br><span class=\"line\">1857</span><br><span class=\"line\">1858</span><br><span class=\"line\">1859</span><br><span class=\"line\">1860</span><br><span class=\"line\">1861</span><br><span class=\"line\">1862</span><br><span class=\"line\">1863</span><br><span class=\"line\">1864</span><br><span class=\"line\">1865</span><br><span class=\"line\">1866</span><br><span class=\"line\">1867</span><br><span class=\"line\">1868</span><br><span class=\"line\">1869</span><br><span class=\"line\">1870</span><br><span class=\"line\">1871</span><br><span class=\"line\">1872</span><br><span class=\"line\">1873</span><br><span class=\"line\">1874</span><br><span class=\"line\">1875</span><br><span class=\"line\">1876</span><br><span class=\"line\">1877</span><br><span class=\"line\">1878</span><br><span class=\"line\">1879</span><br><span class=\"line\">1880</span><br><span class=\"line\">1881</span><br><span class=\"line\">1882</span><br><span class=\"line\">1883</span><br><span class=\"line\">1884</span><br><span class=\"line\">1885</span><br><span class=\"line\">1886</span><br><span class=\"line\">1887</span><br><span class=\"line\">1888</span><br><span class=\"line\">1889</span><br><span class=\"line\">1890</span><br><span class=\"line\">1891</span><br><span class=\"line\">1892</span><br><span class=\"line\">1893</span><br><span class=\"line\">1894</span><br><span class=\"line\">1895</span><br><span class=\"line\">1896</span><br><span class=\"line\">1897</span><br><span class=\"line\">1898</span><br><span class=\"line\">1899</span><br><span class=\"line\">1900</span><br><span class=\"line\">1901</span><br><span class=\"line\">1902</span><br><span class=\"line\">1903</span><br><span class=\"line\">1904</span><br><span class=\"line\">1905</span><br><span class=\"line\">1906</span><br><span class=\"line\">1907</span><br><span class=\"line\">1908</span><br><span class=\"line\">1909</span><br><span class=\"line\">1910</span><br><span class=\"line\">1911</span><br><span class=\"line\">1912</span><br><span class=\"line\">1913</span><br><span class=\"line\">1914</span><br><span class=\"line\">1915</span><br><span class=\"line\">1916</span><br><span class=\"line\">1917</span><br><span class=\"line\">1918</span><br><span class=\"line\">1919</span><br><span class=\"line\">1920</span><br><span class=\"line\">1921</span><br><span class=\"line\">1922</span><br><span class=\"line\">1923</span><br><span class=\"line\">1924</span><br><span class=\"line\">1925</span><br><span class=\"line\">1926</span><br><span class=\"line\">1927</span><br><span class=\"line\">1928</span><br><span class=\"line\">1929</span><br><span class=\"line\">1930</span><br><span class=\"line\">1931</span><br><span class=\"line\">1932</span><br><span class=\"line\">1933</span><br><span class=\"line\">1934</span><br><span class=\"line\">1935</span><br><span class=\"line\">1936</span><br><span class=\"line\">1937</span><br><span class=\"line\">1938</span><br><span class=\"line\">1939</span><br><span class=\"line\">1940</span><br><span class=\"line\">1941</span><br><span class=\"line\">1942</span><br><span class=\"line\">1943</span><br><span class=\"line\">1944</span><br><span class=\"line\">1945</span><br><span class=\"line\">1946</span><br><span class=\"line\">1947</span><br><span class=\"line\">1948</span><br><span class=\"line\">1949</span><br><span class=\"line\">1950</span><br><span class=\"line\">1951</span><br><span class=\"line\">1952</span><br><span class=\"line\">1953</span><br><span class=\"line\">1954</span><br><span class=\"line\">1955</span><br><span class=\"line\">1956</span><br><span class=\"line\">1957</span><br><span class=\"line\">1958</span><br><span class=\"line\">1959</span><br><span class=\"line\">1960</span><br><span class=\"line\">1961</span><br><span class=\"line\">1962</span><br><span class=\"line\">1963</span><br><span class=\"line\">1964</span><br><span class=\"line\">1965</span><br><span class=\"line\">1966</span><br><span class=\"line\">1967</span><br><span class=\"line\">1968</span><br><span class=\"line\">1969</span><br><span class=\"line\">1970</span><br><span class=\"line\">1971</span><br><span class=\"line\">1972</span><br><span class=\"line\">1973</span><br><span class=\"line\">1974</span><br><span class=\"line\">1975</span><br><span class=\"line\">1976</span><br><span class=\"line\">1977</span><br><span class=\"line\">1978</span><br><span class=\"line\">1979</span><br><span class=\"line\">1980</span><br><span class=\"line\">1981</span><br><span class=\"line\">1982</span><br><span class=\"line\">1983</span><br><span class=\"line\">1984</span><br><span class=\"line\">1985</span><br><span class=\"line\">1986</span><br><span class=\"line\">1987</span><br><span class=\"line\">1988</span><br><span class=\"line\">1989</span><br><span class=\"line\">1990</span><br><span class=\"line\">1991</span><br><span class=\"line\">1992</span><br><span class=\"line\">1993</span><br><span class=\"line\">1994</span><br><span class=\"line\">1995</span><br><span class=\"line\">1996</span><br><span class=\"line\">1997</span><br><span class=\"line\">1998</span><br><span class=\"line\">1999</span><br><span class=\"line\">2000</span><br><span class=\"line\">2001</span><br><span class=\"line\">2002</span><br><span class=\"line\">2003</span><br><span class=\"line\">2004</span><br><span class=\"line\">2005</span><br><span class=\"line\">2006</span><br><span class=\"line\">2007</span><br><span class=\"line\">2008</span><br><span class=\"line\">2009</span><br><span class=\"line\">2010</span><br><span class=\"line\">2011</span><br><span class=\"line\">2012</span><br><span class=\"line\">2013</span><br><span class=\"line\">2014</span><br><span class=\"line\">2015</span><br><span class=\"line\">2016</span><br><span class=\"line\">2017</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\"\"Beautiful Soup</span></span><br><span class=\"line\"><span class=\"string\">Elixir and Tonic</span></span><br><span class=\"line\"><span class=\"string\">\"The Screen-Scraper's Friend\"</span></span><br><span class=\"line\"><span class=\"string\">http://www.crummy.com/software/BeautifulSoup/</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Beautiful Soup parses a (possibly invalid) XML or HTML document into a</span></span><br><span class=\"line\"><span class=\"string\">tree representation. It provides methods and Pythonic idioms that make</span></span><br><span class=\"line\"><span class=\"string\">it easy to navigate, search, and modify the tree.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">A well-formed XML/HTML document yields a well-formed data</span></span><br><span class=\"line\"><span class=\"string\">structure. An ill-formed XML/HTML document yields a correspondingly</span></span><br><span class=\"line\"><span class=\"string\">ill-formed data structure. If your document is only locally</span></span><br><span class=\"line\"><span class=\"string\">well-formed, you can use this library to find and process the</span></span><br><span class=\"line\"><span class=\"string\">well-formed part of it.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Beautiful Soup works with Python 2.2 and up. It has no external</span></span><br><span class=\"line\"><span class=\"string\">dependencies, but you'll have more success at converting data to UTF-8</span></span><br><span class=\"line\"><span class=\"string\">if you also install these three packages:</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">* chardet, for auto-detecting character encodings</span></span><br><span class=\"line\"><span class=\"string\">  http://chardet.feedparser.org/</span></span><br><span class=\"line\"><span class=\"string\">* cjkcodecs and iconv_codec, which add more encodings to the ones supported</span></span><br><span class=\"line\"><span class=\"string\">  by stock Python.</span></span><br><span class=\"line\"><span class=\"string\">  http://cjkpython.i18n.org/</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Beautiful Soup defines classes for two main parsing strategies:</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"> * BeautifulStoneSoup, for parsing XML, SGML, or your domain-specific</span></span><br><span class=\"line\"><span class=\"string\">   language that kind of looks like XML.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"> * BeautifulSoup, for parsing run-of-the-mill HTML code, be it valid</span></span><br><span class=\"line\"><span class=\"string\">   or invalid. This class has web browser-like heuristics for</span></span><br><span class=\"line\"><span class=\"string\">   obtaining a sensible parse tree in the face of common HTML errors.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Beautiful Soup also defines a class (UnicodeDammit) for autodetecting</span></span><br><span class=\"line\"><span class=\"string\">the encoding of an HTML or XML document, and converting it to</span></span><br><span class=\"line\"><span class=\"string\">Unicode. Much of this code is taken from Mark Pilgrim's Universal Feed Parser.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">For more than you ever wanted to know about Beautiful Soup, see the</span></span><br><span class=\"line\"><span class=\"string\">documentation:</span></span><br><span class=\"line\"><span class=\"string\">http://www.crummy.com/software/BeautifulSoup/documentation.html</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Here, have some legalese:</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Copyright (c) 2004-2010, Leonard Richardson</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">All rights reserved.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Redistribution and use in source and binary forms, with or without</span></span><br><span class=\"line\"><span class=\"string\">modification, are permitted provided that the following conditions are</span></span><br><span class=\"line\"><span class=\"string\">met:</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">  * Redistributions of source code must retain the above copyright</span></span><br><span class=\"line\"><span class=\"string\">    notice, this list of conditions and the following disclaimer.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">  * Redistributions in binary form must reproduce the above</span></span><br><span class=\"line\"><span class=\"string\">    copyright notice, this list of conditions and the following</span></span><br><span class=\"line\"><span class=\"string\">    disclaimer in the documentation and/or other materials provided</span></span><br><span class=\"line\"><span class=\"string\">    with the distribution.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">  * Neither the name of the the Beautiful Soup Consortium and All</span></span><br><span class=\"line\"><span class=\"string\">    Night Kosher Bakery nor the names of its contributors may be</span></span><br><span class=\"line\"><span class=\"string\">    used to endorse or promote products derived from this software</span></span><br><span class=\"line\"><span class=\"string\">    without specific prior written permission.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS</span></span><br><span class=\"line\"><span class=\"string\">\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT</span></span><br><span class=\"line\"><span class=\"string\">LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR</span></span><br><span class=\"line\"><span class=\"string\">A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR</span></span><br><span class=\"line\"><span class=\"string\">CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,</span></span><br><span class=\"line\"><span class=\"string\">EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,</span></span><br><span class=\"line\"><span class=\"string\">PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR</span></span><br><span class=\"line\"><span class=\"string\">PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF</span></span><br><span class=\"line\"><span class=\"string\">LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING</span></span><br><span class=\"line\"><span class=\"string\">NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS</span></span><br><span class=\"line\"><span class=\"string\">SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE, DAMMIT.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> __future__ <span class=\"keyword\">import</span> generators</span><br><span class=\"line\"></span><br><span class=\"line\">__author__ = <span class=\"string\">\"Leonard Richardson (leonardr@segfault.org)\"</span></span><br><span class=\"line\">__version__ = <span class=\"string\">\"3.2.1\"</span></span><br><span class=\"line\">__copyright__ = <span class=\"string\">\"Copyright (c) 2004-2012 Leonard Richardson\"</span></span><br><span class=\"line\">__license__ = <span class=\"string\">\"New-style BSD\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> sgmllib <span class=\"keyword\">import</span> SGMLParser, SGMLParseError</span><br><span class=\"line\"><span class=\"keyword\">import</span> codecs</span><br><span class=\"line\"><span class=\"keyword\">import</span> markupbase</span><br><span class=\"line\"><span class=\"keyword\">import</span> types</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> sgmllib</span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">  <span class=\"keyword\">from</span> htmlentitydefs <span class=\"keyword\">import</span> name2codepoint</span><br><span class=\"line\"><span class=\"keyword\">except</span> ImportError:</span><br><span class=\"line\">  name2codepoint = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    set</span><br><span class=\"line\"><span class=\"keyword\">except</span> NameError:</span><br><span class=\"line\">    <span class=\"keyword\">from</span> sets <span class=\"keyword\">import</span> Set <span class=\"keyword\">as</span> set</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#These hacks make Beautiful Soup able to parse XML with namespaces</span></span><br><span class=\"line\">sgmllib.tagfind = re.compile(<span class=\"string\">'[a-zA-Z][-_.:a-zA-Z0-9]*'</span>)</span><br><span class=\"line\">markupbase._declname_match = re.compile(<span class=\"string\">r'[a-zA-Z][-_.:a-zA-Z0-9]*\\s*'</span>).match</span><br><span class=\"line\"></span><br><span class=\"line\">DEFAULT_OUTPUT_ENCODING = <span class=\"string\">\"utf-8\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_match_css_class</span><span class=\"params\">(str)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"Build a RE to match the given CSS class.\"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> re.compile(<span class=\"string\">r\"(^|.*\\s)%s($|\\s)\"</span> % str)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># First, the classes that represent markup elements.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PageElement</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"Contains the navigational information for some part of the page</span></span><br><span class=\"line\"><span class=\"string\">    (either a tag or a piece of text)\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_invert</span><span class=\"params\">(h)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"Cheap function to invert a hash.\"</span></span><br><span class=\"line\">        i = &#123;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> k,v <span class=\"keyword\">in</span> h.items():</span><br><span class=\"line\">            i[v] = k</span><br><span class=\"line\">        <span class=\"keyword\">return</span> i</span><br><span class=\"line\"></span><br><span class=\"line\">    XML_ENTITIES_TO_SPECIAL_CHARS = &#123; <span class=\"string\">\"apos\"</span> : <span class=\"string\">\"'\"</span>,</span><br><span class=\"line\">                                      <span class=\"string\">\"quot\"</span> : <span class=\"string\">'\"'</span>,</span><br><span class=\"line\">                                      <span class=\"string\">\"amp\"</span> : <span class=\"string\">\"&amp;\"</span>,</span><br><span class=\"line\">                                      <span class=\"string\">\"lt\"</span> : <span class=\"string\">\"&lt;\"</span>,</span><br><span class=\"line\">                                      <span class=\"string\">\"gt\"</span> : <span class=\"string\">\"&gt;\"</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    XML_SPECIAL_CHARS_TO_ENTITIES = _invert(XML_ENTITIES_TO_SPECIAL_CHARS)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">setup</span><span class=\"params\">(self, parent=None, previous=None)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"Sets up the initial relations between this element and</span></span><br><span class=\"line\"><span class=\"string\">        other elements.\"\"\"</span></span><br><span class=\"line\">        self.parent = parent</span><br><span class=\"line\">        self.previous = previous</span><br><span class=\"line\">        self.next = <span class=\"keyword\">None</span></span><br><span class=\"line\">        self.previousSibling = <span class=\"keyword\">None</span></span><br><span class=\"line\">        self.nextSibling = <span class=\"keyword\">None</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.parent <span class=\"keyword\">and</span> self.parent.contents:</span><br><span class=\"line\">            self.previousSibling = self.parent.contents[<span class=\"number\">-1</span>]</span><br><span class=\"line\">            self.previousSibling.nextSibling = self</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">replaceWith</span><span class=\"params\">(self, replaceWith)</span>:</span></span><br><span class=\"line\">        oldParent = self.parent</span><br><span class=\"line\">        myIndex = self.parent.index(self)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> hasattr(replaceWith, <span class=\"string\">\"parent\"</span>)\\</span><br><span class=\"line\">                  <span class=\"keyword\">and</span> replaceWith.parent <span class=\"keyword\">is</span> self.parent:</span><br><span class=\"line\">            <span class=\"comment\"># We're replacing this element with one of its siblings.</span></span><br><span class=\"line\">            index = replaceWith.parent.index(replaceWith)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> index <span class=\"keyword\">and</span> index &lt; myIndex:</span><br><span class=\"line\">                <span class=\"comment\"># Furthermore, it comes before this element. That</span></span><br><span class=\"line\">                <span class=\"comment\"># means that when we extract it, the index of this</span></span><br><span class=\"line\">                <span class=\"comment\"># element will change.</span></span><br><span class=\"line\">                myIndex = myIndex - <span class=\"number\">1</span></span><br><span class=\"line\">        self.extract()</span><br><span class=\"line\">        oldParent.insert(myIndex, replaceWith)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">replaceWithChildren</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        myParent = self.parent</span><br><span class=\"line\">        myIndex = self.parent.index(self)</span><br><span class=\"line\">        self.extract()</span><br><span class=\"line\">        reversedChildren = list(self.contents)</span><br><span class=\"line\">        reversedChildren.reverse()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> child <span class=\"keyword\">in</span> reversedChildren:</span><br><span class=\"line\">            myParent.insert(myIndex, child)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">extract</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"Destructively rips this element out of the tree.\"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.parent:</span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                <span class=\"keyword\">del</span> self.parent.contents[self.parent.index(self)]</span><br><span class=\"line\">            <span class=\"keyword\">except</span> ValueError:</span><br><span class=\"line\">                <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">#Find the two elements that would be next to each other if</span></span><br><span class=\"line\">        <span class=\"comment\">#this element (and any children) hadn't been parsed. Connect</span></span><br><span class=\"line\">        <span class=\"comment\">#the two.</span></span><br><span class=\"line\">        lastChild = self._lastRecursiveChild()</span><br><span class=\"line\">        nextElement = lastChild.next</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.previous:</span><br><span class=\"line\">            self.previous.next = nextElement</span><br><span class=\"line\">        <span class=\"keyword\">if</span> nextElement:</span><br><span class=\"line\">            nextElement.previous = self.previous</span><br><span class=\"line\">        self.previous = <span class=\"keyword\">None</span></span><br><span class=\"line\">        lastChild.next = <span class=\"keyword\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">        self.parent = <span class=\"keyword\">None</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.previousSibling:</span><br><span class=\"line\">            self.previousSibling.nextSibling = self.nextSibling</span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.nextSibling:</span><br><span class=\"line\">            self.nextSibling.previousSibling = self.previousSibling</span><br><span class=\"line\">        self.previousSibling = self.nextSibling = <span class=\"keyword\">None</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_lastRecursiveChild</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"Finds the last element beneath this object to be parsed.\"</span></span><br><span class=\"line\">        lastChild = self</span><br><span class=\"line\">        <span class=\"keyword\">while</span> hasattr(lastChild, <span class=\"string\">'contents'</span>) <span class=\"keyword\">and</span> lastChild.contents:</span><br><span class=\"line\">            lastChild = lastChild.contents[<span class=\"number\">-1</span>]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lastChild</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert</span><span class=\"params\">(self, position, newChild)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> isinstance(newChild, basestring) \\</span><br><span class=\"line\">            <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> isinstance(newChild, NavigableString):</span><br><span class=\"line\">            newChild = NavigableString(newChild)</span><br><span class=\"line\"></span><br><span class=\"line\">        position =  min(position, len(self.contents))</span><br><span class=\"line\">        <span class=\"keyword\">if</span> hasattr(newChild, <span class=\"string\">'parent'</span>) <span class=\"keyword\">and</span> newChild.parent <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">            <span class=\"comment\"># We're 'inserting' an element that's already one</span></span><br><span class=\"line\">            <span class=\"comment\"># of this object's children.</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> newChild.parent <span class=\"keyword\">is</span> self:</span><br><span class=\"line\">                index = self.index(newChild)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> index &gt; position:</span><br><span class=\"line\">                    <span class=\"comment\"># Furthermore we're moving it further down the</span></span><br><span class=\"line\">                    <span class=\"comment\"># list of this object's children. That means that</span></span><br><span class=\"line\">                    <span class=\"comment\"># when we extract this element, our target index</span></span><br><span class=\"line\">                    <span class=\"comment\"># will jump down one.</span></span><br><span class=\"line\">                    position = position - <span class=\"number\">1</span></span><br><span class=\"line\">            newChild.extract()</span><br><span class=\"line\"></span><br><span class=\"line\">        newChild.parent = self</span><br><span class=\"line\">        previousChild = <span class=\"keyword\">None</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> position == <span class=\"number\">0</span>:</span><br><span class=\"line\">            newChild.previousSibling = <span class=\"keyword\">None</span></span><br><span class=\"line\">            newChild.previous = self</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            previousChild = self.contents[position<span class=\"number\">-1</span>]</span><br><span class=\"line\">            newChild.previousSibling = previousChild</span><br><span class=\"line\">            newChild.previousSibling.nextSibling = newChild</span><br><span class=\"line\">            newChild.previous = previousChild._lastRecursiveChild()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> newChild.previous:</span><br><span class=\"line\">            newChild.previous.next = newChild</span><br><span class=\"line\"></span><br><span class=\"line\">        newChildsLastElement = newChild._lastRecursiveChild()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> position &gt;= len(self.contents):</span><br><span class=\"line\">            newChild.nextSibling = <span class=\"keyword\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">            parent = self</span><br><span class=\"line\">            parentsNextSibling = <span class=\"keyword\">None</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> <span class=\"keyword\">not</span> parentsNextSibling:</span><br><span class=\"line\">                parentsNextSibling = parent.nextSibling</span><br><span class=\"line\">                parent = parent.parent</span><br><span class=\"line\">                <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> parent: <span class=\"comment\"># This is the last element in the document.</span></span><br><span class=\"line\">                    <span class=\"keyword\">break</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> parentsNextSibling:</span><br><span class=\"line\">                newChildsLastElement.next = parentsNextSibling</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                newChildsLastElement.next = <span class=\"keyword\">None</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            nextChild = self.contents[position]</span><br><span class=\"line\">            newChild.nextSibling = nextChild</span><br><span class=\"line\">            <span class=\"keyword\">if</span> newChild.nextSibling:</span><br><span class=\"line\">                newChild.nextSibling.previousSibling = newChild</span><br><span class=\"line\">            newChildsLastElement.next = nextChild</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> newChildsLastElement.next:</span><br><span class=\"line\">            newChildsLastElement.next.previous = newChildsLastElement</span><br><span class=\"line\">        self.contents.insert(position, newChild)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">append</span><span class=\"params\">(self, tag)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"Appends the given tag to the contents of this tag.\"\"\"</span></span><br><span class=\"line\">        self.insert(len(self.contents), tag)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">findNext</span><span class=\"params\">(self, name=None, attrs=&#123;&#125;, text=None, **kwargs)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"Returns the first item that matches the given criteria and</span></span><br><span class=\"line\"><span class=\"string\">        appears after this Tag in the document.\"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._findOne(self.findAllNext, name, attrs, text, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">findAllNext</span><span class=\"params\">(self, name=None, attrs=&#123;&#125;, text=None, limit=None,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                    **kwargs)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"Returns all items that match the given criteria and appear</span></span><br><span class=\"line\"><span class=\"string\">        after this Tag in the document.\"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._findAll(name, attrs, text, limit, self.nextGenerator,</span><br><span class=\"line\">                             **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">findNextSibling</span><span class=\"params\">(self, name=None, attrs=&#123;&#125;, text=None, **kwargs)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"Returns the closest sibling to this Tag that matches the</span></span><br><span class=\"line\"><span class=\"string\">        given criteria and appears after this Tag in the document.\"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._findOne(self.findNextSiblings, name, attrs, text,</span><br><span class=\"line\">                             **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">findNextSiblings</span><span class=\"params\">(self, name=None, attrs=&#123;&#125;, text=None, limit=None,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                         **kwargs)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"Returns the siblings of this Tag that match the given</span></span><br><span class=\"line\"><span class=\"string\">        criteria and appear after this Tag in the document.\"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._findAll(name, attrs, text, limit,</span><br><span class=\"line\">                             self.nextSiblingGenerator, **kwargs)</span><br><span class=\"line\">    fetchNextSiblings = findNextSiblings <span class=\"comment\"># Compatibility with pre-3.x</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">findPrevious</span><span class=\"params\">(self, name=None, attrs=&#123;&#125;, text=None, **kwargs)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"Returns the first item that matches the given criteria and</span></span><br><span class=\"line\"><span class=\"string\">        appears before this Tag in the document.\"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._findOne(self.findAllPrevious, name, attrs, text, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">findAllPrevious</span><span class=\"params\">(self, name=None, attrs=&#123;&#125;, text=None, limit=None,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                        **kwargs)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"Returns all items that match the given criteria and appear</span></span><br><span class=\"line\"><span class=\"string\">        before this Tag in the document.\"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._findAll(name, attrs, text, limit, self.previousGenerator,</span><br><span class=\"line\">                           **kwargs)</span><br><span class=\"line\">    fetchPrevious = findAllPrevious <span class=\"comment\"># Compatibility with pre-3.x</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">findPreviousSibling</span><span class=\"params\">(self, name=None, attrs=&#123;&#125;, text=None, **kwargs)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"Returns the closest sibling to this Tag that matches the</span></span><br><span class=\"line\"><span class=\"string\">        given criteria and appears before this Tag in the document.\"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._findOne(self.findPreviousSiblings, name, attrs, text,</span><br><span class=\"line\">                             **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">findPreviousSiblings</span><span class=\"params\">(self, name=None, attrs=&#123;&#125;, text=None,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                             limit=None, **kwargs)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"Returns the siblings of this Tag that match the given</span></span><br><span class=\"line\"><span class=\"string\">        criteria and appear before this Tag in the document.\"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._findAll(name, attrs, text, limit,</span><br><span class=\"line\">                             self.previousSiblingGenerator, **kwargs)</span><br><span class=\"line\">    fetchPreviousSiblings = findPreviousSiblings <span class=\"comment\"># Compatibility with pre-3.x</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">findParent</span><span class=\"params\">(self, name=None, attrs=&#123;&#125;, **kwargs)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"Returns the closest parent of this Tag that matches the given</span></span><br><span class=\"line\"><span class=\"string\">        criteria.\"\"\"</span></span><br><span class=\"line\">        <span class=\"comment\"># <span class=\"doctag\">NOTE:</span> We can't use _findOne because findParents takes a different</span></span><br><span class=\"line\">        <span class=\"comment\"># set of arguments.</span></span><br><span class=\"line\">        r = <span class=\"keyword\">None</span></span><br><span class=\"line\">        l = self.findParents(name, attrs, <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> l:</span><br><span class=\"line\">            r = l[<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">findParents</span><span class=\"params\">(self, name=None, attrs=&#123;&#125;, limit=None, **kwargs)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"Returns the parents of this Tag that match the given</span></span><br><span class=\"line\"><span class=\"string\">        criteria.\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._findAll(name, attrs, <span class=\"keyword\">None</span>, limit, self.parentGenerator,</span><br><span class=\"line\">                             **kwargs)</span><br><span class=\"line\">    fetchParents = findParents <span class=\"comment\"># Compatibility with pre-3.x</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#These methods do the real heavy lifting.</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_findOne</span><span class=\"params\">(self, method, name, attrs, text, **kwargs)</span>:</span></span><br><span class=\"line\">        r = <span class=\"keyword\">None</span></span><br><span class=\"line\">        l = method(name, attrs, text, <span class=\"number\">1</span>, **kwargs)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> l:</span><br><span class=\"line\">            r = l[<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_findAll</span><span class=\"params\">(self, name, attrs, text, limit, generator, **kwargs)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"Iterates over a generator looking for things that match.\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> isinstance(name, SoupStrainer):</span><br><span class=\"line\">            strainer = name</span><br><span class=\"line\">        <span class=\"comment\"># (Possibly) special case some findAll*(...) searches</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> text <span class=\"keyword\">is</span> <span class=\"keyword\">None</span> <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> limit <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> attrs <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> kwargs:</span><br><span class=\"line\">            <span class=\"comment\"># findAll*(True)</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> name <span class=\"keyword\">is</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> [element <span class=\"keyword\">for</span> element <span class=\"keyword\">in</span> generator()</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> isinstance(element, Tag)]</span><br><span class=\"line\">            <span class=\"comment\"># findAll*('tag-name')</span></span><br><span class=\"line\">            <span class=\"keyword\">elif</span> isinstance(name, basestring):</span><br><span class=\"line\">                <span class=\"keyword\">return</span> [element <span class=\"keyword\">for</span> element <span class=\"keyword\">in</span> generator()</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> isinstance(element, Tag) <span class=\"keyword\">and</span></span><br><span class=\"line\">                        element.name == name]</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                strainer = SoupStrainer(name, attrs, text, **kwargs)</span><br><span class=\"line\">        <span class=\"comment\"># Build a SoupStrainer</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            strainer = SoupStrainer(name, attrs, text, **kwargs)</span><br><span class=\"line\">        results = ResultSet(strainer)</span><br><span class=\"line\">        g = generator()</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                i = g.next()</span><br><span class=\"line\">            <span class=\"keyword\">except</span> StopIteration:</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> i:</span><br><span class=\"line\">                found = strainer.search(i)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> found:</span><br><span class=\"line\">                    results.append(found)</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> limit <span class=\"keyword\">and</span> len(results) &gt;= limit:</span><br><span class=\"line\">                        <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> results</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#These Generators can be used to navigate starting from both</span></span><br><span class=\"line\">    <span class=\"comment\">#NavigableStrings and Tags.</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">nextGenerator</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        i = self</span><br><span class=\"line\">        <span class=\"keyword\">while</span> i <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">            i = i.next</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> i</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">nextSiblingGenerator</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        i = self</span><br><span class=\"line\">        <span class=\"keyword\">while</span> i <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">            i = i.nextSibling</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> i</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">previousGenerator</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        i = self</span><br><span class=\"line\">        <span class=\"keyword\">while</span> i <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">            i = i.previous</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> i</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">previousSiblingGenerator</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        i = self</span><br><span class=\"line\">        <span class=\"keyword\">while</span> i <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">            i = i.previousSibling</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> i</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">parentGenerator</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        i = self</span><br><span class=\"line\">        <span class=\"keyword\">while</span> i <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">            i = i.parent</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> i</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Utility methods</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">substituteEncoding</span><span class=\"params\">(self, str, encoding=None)</span>:</span></span><br><span class=\"line\">        encoding = encoding <span class=\"keyword\">or</span> <span class=\"string\">\"utf-8\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> str.replace(<span class=\"string\">\"%SOUP-ENCODING%\"</span>, encoding)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">toEncoding</span><span class=\"params\">(self, s, encoding=None)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"Encodes an object to a string in some encoding, or to Unicode.</span></span><br><span class=\"line\"><span class=\"string\">        .\"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> isinstance(s, unicode):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> encoding:</span><br><span class=\"line\">                s = s.encode(encoding)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> isinstance(s, str):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> encoding:</span><br><span class=\"line\">                s = s.encode(encoding)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                s = unicode(s)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> encoding:</span><br><span class=\"line\">                s  = self.toEncoding(str(s), encoding)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                s = unicode(s)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s</span><br><span class=\"line\"></span><br><span class=\"line\">    BARE_AMPERSAND_OR_BRACKET = re.compile(<span class=\"string\">\"([&lt;&gt;]|\"</span></span><br><span class=\"line\">                                           + <span class=\"string\">\"&amp;(?!#\\d+;|#x[0-9a-fA-F]+;|\\w+;)\"</span></span><br><span class=\"line\">                                           + <span class=\"string\">\")\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_sub_entity</span><span class=\"params\">(self, x)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"Used with a regular expression to substitute the</span></span><br><span class=\"line\"><span class=\"string\">        appropriate XML entity for an XML special character.\"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"&amp;\"</span> + self.XML_SPECIAL_CHARS_TO_ENTITIES[x.group(<span class=\"number\">0</span>)[<span class=\"number\">0</span>]] + <span class=\"string\">\";\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NavigableString</span><span class=\"params\">(unicode, PageElement)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__new__</span><span class=\"params\">(cls, value)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"Create a new NavigableString.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        When unpickling a NavigableString, this method is called with</span></span><br><span class=\"line\"><span class=\"string\">        the string in DEFAULT_OUTPUT_ENCODING. That encoding needs to be</span></span><br><span class=\"line\"><span class=\"string\">        passed in to the superclass's __new__ or the superclass won't know</span></span><br><span class=\"line\"><span class=\"string\">        how to handle non-ASCII characters.</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> isinstance(value, unicode):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> unicode.__new__(cls, value)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> unicode.__new__(cls, value, DEFAULT_OUTPUT_ENCODING)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__getnewargs__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (NavigableString.__str__(self),)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__getattr__</span><span class=\"params\">(self, attr)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"text.string gives you text. This is for backwards</span></span><br><span class=\"line\"><span class=\"string\">        compatibility for Navigable*String, but for CData* it lets you</span></span><br><span class=\"line\"><span class=\"string\">        get the string without the CData wrapper.\"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> attr == <span class=\"string\">'string'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> AttributeError, <span class=\"string\">\"'%s' object has no attribute '%s'\"</span> % (self.__class__.__name__, attr)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__unicode__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> str(self).decode(DEFAULT_OUTPUT_ENCODING)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self, encoding=DEFAULT_OUTPUT_ENCODING)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># Substitute outgoing XML entities.</span></span><br><span class=\"line\">        data = self.BARE_AMPERSAND_OR_BRACKET.sub(self._sub_entity, self)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> encoding:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> data.encode(encoding)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> data</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CData</span><span class=\"params\">(NavigableString)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self, encoding=DEFAULT_OUTPUT_ENCODING)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"&lt;![CDATA[%s]]&gt;\"</span> % NavigableString.__str__(self, encoding)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProcessingInstruction</span><span class=\"params\">(NavigableString)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self, encoding=DEFAULT_OUTPUT_ENCODING)</span>:</span></span><br><span class=\"line\">        output = self</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"string\">\"%SOUP-ENCODING%\"</span> <span class=\"keyword\">in</span> output:</span><br><span class=\"line\">            output = self.substituteEncoding(output, encoding)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"&lt;?%s?&gt;\"</span> % self.toEncoding(output, encoding)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Comment</span><span class=\"params\">(NavigableString)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self, encoding=DEFAULT_OUTPUT_ENCODING)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"&lt;!--%s--&gt;\"</span> % NavigableString.__str__(self, encoding)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Declaration</span><span class=\"params\">(NavigableString)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self, encoding=DEFAULT_OUTPUT_ENCODING)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"&lt;!%s&gt;\"</span> % NavigableString.__str__(self, encoding)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Tag</span><span class=\"params\">(PageElement)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">\"\"\"Represents a found HTML tag with its attributes and contents.\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_convertEntities</span><span class=\"params\">(self, match)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"Used in a call to re.sub to replace HTML, XML, and numeric</span></span><br><span class=\"line\"><span class=\"string\">        entities with the appropriate Unicode characters. If HTML</span></span><br><span class=\"line\"><span class=\"string\">        entities are being converted, any unrecognized entities are</span></span><br><span class=\"line\"><span class=\"string\">        escaped.\"\"\"</span></span><br><span class=\"line\">        x = match.group(<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.convertHTMLEntities <span class=\"keyword\">and</span> x <span class=\"keyword\">in</span> name2codepoint:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> unichr(name2codepoint[x])</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> x <span class=\"keyword\">in</span> self.XML_ENTITIES_TO_SPECIAL_CHARS:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> self.convertXMLEntities:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> self.XML_ENTITIES_TO_SPECIAL_CHARS[x]</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">u'&amp;%s;'</span> % x</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> len(x) &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> x[<span class=\"number\">0</span>] == <span class=\"string\">'#'</span>:</span><br><span class=\"line\">            <span class=\"comment\"># Handle numeric entities</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> len(x) &gt; <span class=\"number\">1</span> <span class=\"keyword\">and</span> x[<span class=\"number\">1</span>] == <span class=\"string\">'x'</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> unichr(int(x[<span class=\"number\">2</span>:], <span class=\"number\">16</span>))</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> unichr(int(x[<span class=\"number\">1</span>:]))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> self.escapeUnrecognizedEntities:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">u'&amp;amp;%s;'</span> % x</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">u'&amp;%s;'</span> % x</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, parser, name, attrs=None, parent=None,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                 previous=None)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"Basic constructor.\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># We don't actually store the parser object: that lets extracted</span></span><br><span class=\"line\">        <span class=\"comment\"># chunks be garbage-collected</span></span><br><span class=\"line\">        self.parserClass = parser.__class__</span><br><span class=\"line\">        self.isSelfClosing = parser.isSelfClosingTag(name)</span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        <span class=\"keyword\">if</span> attrs <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">            attrs = []</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> isinstance(attrs, dict):</span><br><span class=\"line\">            attrs = attrs.items()</span><br><span class=\"line\">        self.attrs = attrs</span><br><span class=\"line\">        self.contents = []</span><br><span class=\"line\">        self.setup(parent, previous)</span><br><span class=\"line\">        self.hidden = <span class=\"keyword\">False</span></span><br><span class=\"line\">        self.containsSubstitutions = <span class=\"keyword\">False</span></span><br><span class=\"line\">        self.convertHTMLEntities = parser.convertHTMLEntities</span><br><span class=\"line\">        self.convertXMLEntities = parser.convertXMLEntities</span><br><span class=\"line\">        self.escapeUnrecognizedEntities = parser.escapeUnrecognizedEntities</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Convert any HTML, XML, or numeric entities in the attribute values.</span></span><br><span class=\"line\">        convert = <span class=\"keyword\">lambda</span>(k, val): (k,</span><br><span class=\"line\">                                   re.sub(<span class=\"string\">\"&amp;(#\\d+|#x[0-9a-fA-F]+|\\w+);\"</span>,</span><br><span class=\"line\">                                          self._convertEntities,</span><br><span class=\"line\">                                          val))</span><br><span class=\"line\">        self.attrs = map(convert, self.attrs)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getString</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (len(self.contents) == <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">and</span> isinstance(self.contents[<span class=\"number\">0</span>], NavigableString)):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.contents[<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">setString</span><span class=\"params\">(self, string)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"Replace the contents of the tag with a string\"\"\"</span></span><br><span class=\"line\">        self.clear()</span><br><span class=\"line\">        self.append(string)</span><br><span class=\"line\"></span><br><span class=\"line\">    string = property(getString, setString)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getText</span><span class=\"params\">(self, separator=<span class=\"string\">u\"\"</span>)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> len(self.contents):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">u\"\"</span></span><br><span class=\"line\">        stopNode = self._lastRecursiveChild().next</span><br><span class=\"line\">        strings = []</span><br><span class=\"line\">        current = self.contents[<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"keyword\">while</span> current <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> stopNode:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> isinstance(current, NavigableString):</span><br><span class=\"line\">                strings.append(current.strip())</span><br><span class=\"line\">            current = current.next</span><br><span class=\"line\">        <span class=\"keyword\">return</span> separator.join(strings)</span><br><span class=\"line\"></span><br><span class=\"line\">    text = property(getText)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span><span class=\"params\">(self, key, default=None)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"Returns the value of the 'key' attribute for the tag, or</span></span><br><span class=\"line\"><span class=\"string\">        the value given for 'default' if it doesn't have that</span></span><br><span class=\"line\"><span class=\"string\">        attribute.\"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._getAttrMap().get(key, default)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">clear</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"Extract all children.\"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> child <span class=\"keyword\">in</span> self.contents[:]:</span><br><span class=\"line\">            child.extract()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">(self, element)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i, child <span class=\"keyword\">in</span> enumerate(self.contents):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> child <span class=\"keyword\">is</span> element:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> i</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">\"Tag.index: element not in tag\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">has_key</span><span class=\"params\">(self, key)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._getAttrMap().has_key(key)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__getitem__</span><span class=\"params\">(self, key)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"tag[key] returns the value of the 'key' attribute for the tag,</span></span><br><span class=\"line\"><span class=\"string\">        and throws an exception if it's not there.\"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._getAttrMap()[key]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__iter__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"Iterating over a tag iterates over its contents.\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> iter(self.contents)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__len__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"The length of a tag is the length of its list of contents.\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> len(self.contents)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__contains__</span><span class=\"params\">(self, x)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> x <span class=\"keyword\">in</span> self.contents</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__nonzero__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"A tag is non-None even if it has no contents.\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__setitem__</span><span class=\"params\">(self, key, value)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"Setting tag[key] sets the value of the 'key' attribute for the</span></span><br><span class=\"line\"><span class=\"string\">        tag.\"\"\"</span></span><br><span class=\"line\">        self._getAttrMap()</span><br><span class=\"line\">        self.attrMap[key] = value</span><br><span class=\"line\">        found = <span class=\"keyword\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>, len(self.attrs)):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> self.attrs[i][<span class=\"number\">0</span>] == key:</span><br><span class=\"line\">                self.attrs[i] = (key, value)</span><br><span class=\"line\">                found = <span class=\"keyword\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> found:</span><br><span class=\"line\">            self.attrs.append((key, value))</span><br><span class=\"line\">        self._getAttrMap()[key] = value</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__delitem__</span><span class=\"params\">(self, key)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"Deleting tag[key] deletes all 'key' attributes for the tag.\"</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> self.attrs:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> item[<span class=\"number\">0</span>] == key:</span><br><span class=\"line\">                self.attrs.remove(item)</span><br><span class=\"line\">                <span class=\"comment\">#We don't break because bad HTML can define the same</span></span><br><span class=\"line\">                <span class=\"comment\">#attribute multiple times.</span></span><br><span class=\"line\">            self._getAttrMap()</span><br><span class=\"line\">            <span class=\"keyword\">if</span> self.attrMap.has_key(key):</span><br><span class=\"line\">                <span class=\"keyword\">del</span> self.attrMap[key]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__call__</span><span class=\"params\">(self, *args, **kwargs)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"Calling a tag like a function is the same as calling its</span></span><br><span class=\"line\"><span class=\"string\">        findAll() method. Eg. tag('a') returns a list of all the A tags</span></span><br><span class=\"line\"><span class=\"string\">        found within this tag.\"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> apply(self.findAll, args, kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__getattr__</span><span class=\"params\">(self, tag)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\">#print \"Getattr %s.%s\" % (self.__class__, tag)</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> len(tag) &gt; <span class=\"number\">3</span> <span class=\"keyword\">and</span> tag.rfind(<span class=\"string\">'Tag'</span>) == len(tag)<span class=\"number\">-3</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.find(tag[:<span class=\"number\">-3</span>])</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> tag.find(<span class=\"string\">'__'</span>) != <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.find(tag)</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> AttributeError, <span class=\"string\">\"'%s' object has no attribute '%s'\"</span> % (self.__class__, tag)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__eq__</span><span class=\"params\">(self, other)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"Returns true iff this tag has the same name, the same attributes,</span></span><br><span class=\"line\"><span class=\"string\">        and the same contents (recursively) as the given tag.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        NOTE: right now this will return false if two tags have the</span></span><br><span class=\"line\"><span class=\"string\">        same attributes in a different order. Should this be fixed?\"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> other <span class=\"keyword\">is</span> self:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> hasattr(other, <span class=\"string\">'name'</span>) <span class=\"keyword\">or</span> <span class=\"keyword\">not</span> hasattr(other, <span class=\"string\">'attrs'</span>) <span class=\"keyword\">or</span> <span class=\"keyword\">not</span> hasattr(other, <span class=\"string\">'contents'</span>) <span class=\"keyword\">or</span> self.name != other.name <span class=\"keyword\">or</span> self.attrs != other.attrs <span class=\"keyword\">or</span> len(self) != len(other):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>, len(self.contents)):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> self.contents[i] != other.contents[i]:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__ne__</span><span class=\"params\">(self, other)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"Returns true iff this tag is not identical to the other tag,</span></span><br><span class=\"line\"><span class=\"string\">        as defined in __eq__.\"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">not</span> self == other</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__repr__</span><span class=\"params\">(self, encoding=DEFAULT_OUTPUT_ENCODING)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"Renders this tag as a string.\"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.__str__(encoding)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__unicode__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.__str__(<span class=\"keyword\">None</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self, encoding=DEFAULT_OUTPUT_ENCODING,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                prettyPrint=False, indentLevel=<span class=\"number\">0</span>)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"Returns a string or Unicode representation of this tag and</span></span><br><span class=\"line\"><span class=\"string\">        its contents. To get Unicode, pass None for encoding.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        NOTE: since Python's HTML parser consumes whitespace, this</span></span><br><span class=\"line\"><span class=\"string\">        method is not certain to reproduce the whitespace present in</span></span><br><span class=\"line\"><span class=\"string\">        the original string.\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">        encodedName = self.toEncoding(self.name, encoding)</span><br><span class=\"line\"></span><br><span class=\"line\">        attrs = []</span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.attrs:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> key, val <span class=\"keyword\">in</span> self.attrs:</span><br><span class=\"line\">                fmt = <span class=\"string\">'%s=\"%s\"'</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> isinstance(val, basestring):</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> self.containsSubstitutions <span class=\"keyword\">and</span> <span class=\"string\">'%SOUP-ENCODING%'</span> <span class=\"keyword\">in</span> val:</span><br><span class=\"line\">                        val = self.substituteEncoding(val, encoding)</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\"># The attribute value either:</span></span><br><span class=\"line\">                    <span class=\"comment\">#</span></span><br><span class=\"line\">                    <span class=\"comment\"># * Contains no embedded double quotes or single quotes.</span></span><br><span class=\"line\">                    <span class=\"comment\">#   No problem: we enclose it in double quotes.</span></span><br><span class=\"line\">                    <span class=\"comment\"># * Contains embedded single quotes. No problem:</span></span><br><span class=\"line\">                    <span class=\"comment\">#   double quotes work here too.</span></span><br><span class=\"line\">                    <span class=\"comment\"># * Contains embedded double quotes. No problem:</span></span><br><span class=\"line\">                    <span class=\"comment\">#   we enclose it in single quotes.</span></span><br><span class=\"line\">                    <span class=\"comment\"># * Embeds both single _and_ double quotes. This</span></span><br><span class=\"line\">                    <span class=\"comment\">#   can't happen naturally, but it can happen if</span></span><br><span class=\"line\">                    <span class=\"comment\">#   you modify an attribute value after parsing</span></span><br><span class=\"line\">                    <span class=\"comment\">#   the document. Now we have a bit of a</span></span><br><span class=\"line\">                    <span class=\"comment\">#   problem. We solve it by enclosing the</span></span><br><span class=\"line\">                    <span class=\"comment\">#   attribute in single quotes, and escaping any</span></span><br><span class=\"line\">                    <span class=\"comment\">#   embedded single quotes to XML entities.</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> <span class=\"string\">'\"'</span> <span class=\"keyword\">in</span> val:</span><br><span class=\"line\">                        fmt = <span class=\"string\">\"%s='%s'\"</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> <span class=\"string\">\"'\"</span> <span class=\"keyword\">in</span> val:</span><br><span class=\"line\">                            <span class=\"comment\"># <span class=\"doctag\">TODO:</span> replace with apos when</span></span><br><span class=\"line\">                            <span class=\"comment\"># appropriate.</span></span><br><span class=\"line\">                            val = val.replace(<span class=\"string\">\"'\"</span>, <span class=\"string\">\"&amp;squot;\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\"># Now we're okay w/r/t quotes. But the attribute</span></span><br><span class=\"line\">                    <span class=\"comment\"># value might also contain angle brackets, or</span></span><br><span class=\"line\">                    <span class=\"comment\"># ampersands that aren't part of entities. We need</span></span><br><span class=\"line\">                    <span class=\"comment\"># to escape those to XML entities too.</span></span><br><span class=\"line\">                    val = self.BARE_AMPERSAND_OR_BRACKET.sub(self._sub_entity, val)</span><br><span class=\"line\"></span><br><span class=\"line\">                attrs.append(fmt % (self.toEncoding(key, encoding),</span><br><span class=\"line\">                                    self.toEncoding(val, encoding)))</span><br><span class=\"line\">        close = <span class=\"string\">''</span></span><br><span class=\"line\">        closeTag = <span class=\"string\">''</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.isSelfClosing:</span><br><span class=\"line\">            close = <span class=\"string\">' /'</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            closeTag = <span class=\"string\">'&lt;/%s&gt;'</span> % encodedName</span><br><span class=\"line\"></span><br><span class=\"line\">        indentTag, indentContents = <span class=\"number\">0</span>, <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> prettyPrint:</span><br><span class=\"line\">            indentTag = indentLevel</span><br><span class=\"line\">            space = (<span class=\"string\">' '</span> * (indentTag<span class=\"number\">-1</span>))</span><br><span class=\"line\">            indentContents = indentTag + <span class=\"number\">1</span></span><br><span class=\"line\">        contents = self.renderContents(encoding, prettyPrint, indentContents)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.hidden:</span><br><span class=\"line\">            s = contents</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            s = []</span><br><span class=\"line\">            attributeString = <span class=\"string\">''</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> attrs:</span><br><span class=\"line\">                attributeString = <span class=\"string\">' '</span> + <span class=\"string\">' '</span>.join(attrs)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> prettyPrint:</span><br><span class=\"line\">                s.append(space)</span><br><span class=\"line\">            s.append(<span class=\"string\">'&lt;%s%s%s&gt;'</span> % (encodedName, attributeString, close))</span><br><span class=\"line\">            <span class=\"keyword\">if</span> prettyPrint:</span><br><span class=\"line\">                s.append(<span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\">            s.append(contents)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> prettyPrint <span class=\"keyword\">and</span> contents <span class=\"keyword\">and</span> contents[<span class=\"number\">-1</span>] != <span class=\"string\">\"\\n\"</span>:</span><br><span class=\"line\">                s.append(<span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> prettyPrint <span class=\"keyword\">and</span> closeTag:</span><br><span class=\"line\">                s.append(space)</span><br><span class=\"line\">            s.append(closeTag)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> prettyPrint <span class=\"keyword\">and</span> closeTag <span class=\"keyword\">and</span> self.nextSibling:</span><br><span class=\"line\">                s.append(<span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\">            s = <span class=\"string\">''</span>.join(s)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decompose</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"Recursively destroys the contents of this tree.\"\"\"</span></span><br><span class=\"line\">        self.extract()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> len(self.contents) == <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        current = self.contents[<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"keyword\">while</span> current <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">            next = current.next</span><br><span class=\"line\">            <span class=\"keyword\">if</span> isinstance(current, Tag):</span><br><span class=\"line\">                <span class=\"keyword\">del</span> current.contents[:]</span><br><span class=\"line\">            current.parent = <span class=\"keyword\">None</span></span><br><span class=\"line\">            current.previous = <span class=\"keyword\">None</span></span><br><span class=\"line\">            current.previousSibling = <span class=\"keyword\">None</span></span><br><span class=\"line\">            current.next = <span class=\"keyword\">None</span></span><br><span class=\"line\">            current.nextSibling = <span class=\"keyword\">None</span></span><br><span class=\"line\">            current = next</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">prettify</span><span class=\"params\">(self, encoding=DEFAULT_OUTPUT_ENCODING)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.__str__(encoding, <span class=\"keyword\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">renderContents</span><span class=\"params\">(self, encoding=DEFAULT_OUTPUT_ENCODING,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                       prettyPrint=False, indentLevel=<span class=\"number\">0</span>)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"Renders the contents of this tag as a string in the given</span></span><br><span class=\"line\"><span class=\"string\">        encoding. If encoding is None, returns a Unicode string..\"\"\"</span></span><br><span class=\"line\">        s=[]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> self:</span><br><span class=\"line\">            text = <span class=\"keyword\">None</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> isinstance(c, NavigableString):</span><br><span class=\"line\">                text = c.__str__(encoding)</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> isinstance(c, Tag):</span><br><span class=\"line\">                s.append(c.__str__(encoding, prettyPrint, indentLevel))</span><br><span class=\"line\">            <span class=\"keyword\">if</span> text <span class=\"keyword\">and</span> prettyPrint:</span><br><span class=\"line\">                text = text.strip()</span><br><span class=\"line\">            <span class=\"keyword\">if</span> text:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> prettyPrint:</span><br><span class=\"line\">                    s.append(<span class=\"string\">\" \"</span> * (indentLevel<span class=\"number\">-1</span>))</span><br><span class=\"line\">                s.append(text)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> prettyPrint:</span><br><span class=\"line\">                    s.append(<span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">''</span>.join(s)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#Soup methods</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">find</span><span class=\"params\">(self, name=None, attrs=&#123;&#125;, recursive=True, text=None,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">             **kwargs)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"Return only the first child of this Tag matching the given</span></span><br><span class=\"line\"><span class=\"string\">        criteria.\"\"\"</span></span><br><span class=\"line\">        r = <span class=\"keyword\">None</span></span><br><span class=\"line\">        l = self.findAll(name, attrs, recursive, text, <span class=\"number\">1</span>, **kwargs)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> l:</span><br><span class=\"line\">            r = l[<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r</span><br><span class=\"line\">    findChild = find</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">findAll</span><span class=\"params\">(self, name=None, attrs=&#123;&#125;, recursive=True, text=None,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                limit=None, **kwargs)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"Extracts a list of Tag objects that match the given</span></span><br><span class=\"line\"><span class=\"string\">        criteria.  You can specify the name of the Tag and any</span></span><br><span class=\"line\"><span class=\"string\">        attributes you want the Tag to have.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        The value of a key-value pair in the 'attrs' map can be a</span></span><br><span class=\"line\"><span class=\"string\">        string, a list of strings, a regular expression object, or a</span></span><br><span class=\"line\"><span class=\"string\">        callable that takes a string and returns whether or not the</span></span><br><span class=\"line\"><span class=\"string\">        string matches for some custom definition of 'matches'. The</span></span><br><span class=\"line\"><span class=\"string\">        same is true of the tag name.\"\"\"</span></span><br><span class=\"line\">        generator = self.recursiveChildGenerator</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> recursive:</span><br><span class=\"line\">            generator = self.childGenerator</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._findAll(name, attrs, text, limit, generator, **kwargs)</span><br><span class=\"line\">    findChildren = findAll</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Pre-3.x compatibility methods</span></span><br><span class=\"line\">    first = find</span><br><span class=\"line\">    fetch = findAll</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fetchText</span><span class=\"params\">(self, text=None, recursive=True, limit=None)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.findAll(text=text, recursive=recursive, limit=limit)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">firstText</span><span class=\"params\">(self, text=None, recursive=True)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.find(text=text, recursive=recursive)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#Private methods</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_getAttrMap</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"Initializes a map representation of this tag's attributes,</span></span><br><span class=\"line\"><span class=\"string\">        if not already initialized.\"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> getattr(self, <span class=\"string\">'attrMap'</span>):</span><br><span class=\"line\">            self.attrMap = &#123;&#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (key, value) <span class=\"keyword\">in</span> self.attrs:</span><br><span class=\"line\">                self.attrMap[key] = value</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.attrMap</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#Generator methods</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">childGenerator</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># Just use the iterator from the contents</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> iter(self.contents)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">recursiveChildGenerator</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> len(self.contents):</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> StopIteration</span><br><span class=\"line\">        stopNode = self._lastRecursiveChild().next</span><br><span class=\"line\">        current = self.contents[<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"keyword\">while</span> current <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> stopNode:</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> current</span><br><span class=\"line\">            current = current.next</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Next, a couple classes to represent queries and their results.</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SoupStrainer</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"Encapsulates a number of ways of matching a markup element (tag or</span></span><br><span class=\"line\"><span class=\"string\">    text).\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name=None, attrs=&#123;&#125;, text=None, **kwargs)</span>:</span></span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        <span class=\"keyword\">if</span> isinstance(attrs, basestring):</span><br><span class=\"line\">            kwargs[<span class=\"string\">'class'</span>] = _match_css_class(attrs)</span><br><span class=\"line\">            attrs = <span class=\"keyword\">None</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> kwargs:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> attrs:</span><br><span class=\"line\">                attrs = attrs.copy()</span><br><span class=\"line\">                attrs.update(kwargs)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                attrs = kwargs</span><br><span class=\"line\">        self.attrs = attrs</span><br><span class=\"line\">        self.text = text</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.text:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.text</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"%s|%s\"</span> % (self.name, self.attrs)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">searchTag</span><span class=\"params\">(self, markupName=None, markupAttrs=&#123;&#125;)</span>:</span></span><br><span class=\"line\">        found = <span class=\"keyword\">None</span></span><br><span class=\"line\">        markup = <span class=\"keyword\">None</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> isinstance(markupName, Tag):</span><br><span class=\"line\">            markup = markupName</span><br><span class=\"line\">            markupAttrs = markup</span><br><span class=\"line\">        callFunctionWithTagData = callable(self.name) \\</span><br><span class=\"line\">                                <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> isinstance(markupName, Tag)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">not</span> self.name) \\</span><br><span class=\"line\">               <span class=\"keyword\">or</span> callFunctionWithTagData \\</span><br><span class=\"line\">               <span class=\"keyword\">or</span> (markup <span class=\"keyword\">and</span> self._matches(markup, self.name)) \\</span><br><span class=\"line\">               <span class=\"keyword\">or</span> (<span class=\"keyword\">not</span> markup <span class=\"keyword\">and</span> self._matches(markupName, self.name)):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> callFunctionWithTagData:</span><br><span class=\"line\">                match = self.name(markupName, markupAttrs)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                match = <span class=\"keyword\">True</span></span><br><span class=\"line\">                markupAttrMap = <span class=\"keyword\">None</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span> attr, matchAgainst <span class=\"keyword\">in</span> self.attrs.items():</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> markupAttrMap:</span><br><span class=\"line\">                         <span class=\"keyword\">if</span> hasattr(markupAttrs, <span class=\"string\">'get'</span>):</span><br><span class=\"line\">                            markupAttrMap = markupAttrs</span><br><span class=\"line\">                         <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                            markupAttrMap = &#123;&#125;</span><br><span class=\"line\">                            <span class=\"keyword\">for</span> k,v <span class=\"keyword\">in</span> markupAttrs:</span><br><span class=\"line\">                                markupAttrMap[k] = v</span><br><span class=\"line\">                    attrValue = markupAttrMap.get(attr)</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self._matches(attrValue, matchAgainst):</span><br><span class=\"line\">                        match = <span class=\"keyword\">False</span></span><br><span class=\"line\">                        <span class=\"keyword\">break</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> match:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> markup:</span><br><span class=\"line\">                    found = markup</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    found = markupName</span><br><span class=\"line\">        <span class=\"keyword\">return</span> found</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">search</span><span class=\"params\">(self, markup)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\">#print 'looking for %s in %s' % (self, markup)</span></span><br><span class=\"line\">        found = <span class=\"keyword\">None</span></span><br><span class=\"line\">        <span class=\"comment\"># If given a list of items, scan it for a text element that</span></span><br><span class=\"line\">        <span class=\"comment\"># matches.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> hasattr(markup, <span class=\"string\">\"__iter__\"</span>) \\</span><br><span class=\"line\">                <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> isinstance(markup, Tag):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> element <span class=\"keyword\">in</span> markup:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> isinstance(element, NavigableString) \\</span><br><span class=\"line\">                       <span class=\"keyword\">and</span> self.search(element):</span><br><span class=\"line\">                    found = element</span><br><span class=\"line\">                    <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"comment\"># If it's a Tag, make sure its name or attributes match.</span></span><br><span class=\"line\">        <span class=\"comment\"># Don't bother with Tags if we're searching for text.</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> isinstance(markup, Tag):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.text:</span><br><span class=\"line\">                found = self.searchTag(markup)</span><br><span class=\"line\">        <span class=\"comment\"># If it's text, make sure the text matches.</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> isinstance(markup, NavigableString) <span class=\"keyword\">or</span> \\</span><br><span class=\"line\">                 isinstance(markup, basestring):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> self._matches(markup, self.text):</span><br><span class=\"line\">                found = markup</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> Exception, <span class=\"string\">\"I don't know how to match against a %s\"</span> \\</span><br><span class=\"line\">                  % markup.__class__</span><br><span class=\"line\">        <span class=\"keyword\">return</span> found</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_matches</span><span class=\"params\">(self, markup, matchAgainst)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\">#print \"Matching %s against %s\" % (markup, matchAgainst)</span></span><br><span class=\"line\">        result = <span class=\"keyword\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> matchAgainst <span class=\"keyword\">is</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">            result = markup <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> callable(matchAgainst):</span><br><span class=\"line\">            result = matchAgainst(markup)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"comment\">#Custom match methods take the tag as an argument, but all</span></span><br><span class=\"line\">            <span class=\"comment\">#other ways of matching match the tag name as a string.</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> isinstance(markup, Tag):</span><br><span class=\"line\">                markup = markup.name</span><br><span class=\"line\">            <span class=\"keyword\">if</span> markup <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> isinstance(markup, basestring):</span><br><span class=\"line\">                markup = unicode(markup)</span><br><span class=\"line\">            <span class=\"comment\">#Now we know that chunk is either a string, or None.</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> hasattr(matchAgainst, <span class=\"string\">'match'</span>):</span><br><span class=\"line\">                <span class=\"comment\"># It's a regexp object.</span></span><br><span class=\"line\">                result = markup <span class=\"keyword\">and</span> matchAgainst.search(markup)</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> hasattr(matchAgainst, <span class=\"string\">'__iter__'</span>): <span class=\"comment\"># list-like</span></span><br><span class=\"line\">                result = markup <span class=\"keyword\">in</span> matchAgainst</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> hasattr(matchAgainst, <span class=\"string\">'items'</span>):</span><br><span class=\"line\">                result = markup.has_key(matchAgainst)</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> matchAgainst <span class=\"keyword\">and</span> isinstance(markup, basestring):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> isinstance(markup, unicode):</span><br><span class=\"line\">                    matchAgainst = unicode(matchAgainst)</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    matchAgainst = str(matchAgainst)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> result:</span><br><span class=\"line\">                result = matchAgainst == markup</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResultSet</span><span class=\"params\">(list)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"A ResultSet is just a list that keeps track of the SoupStrainer</span></span><br><span class=\"line\"><span class=\"string\">    that created it.\"\"\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, source)</span>:</span></span><br><span class=\"line\">        list.__init__([])</span><br><span class=\"line\">        self.source = source</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Now, some helper functions.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">buildTagMap</span><span class=\"params\">(default, *args)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"Turns a list of maps, lists, or scalars into a single map.</span></span><br><span class=\"line\"><span class=\"string\">    Used to build the SELF_CLOSING_TAGS, NESTABLE_TAGS, and</span></span><br><span class=\"line\"><span class=\"string\">    NESTING_RESET_TAGS maps out of lists and partial maps.\"\"\"</span></span><br><span class=\"line\">    built = &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> portion <span class=\"keyword\">in</span> args:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> hasattr(portion, <span class=\"string\">'items'</span>):</span><br><span class=\"line\">            <span class=\"comment\">#It's a map. Merge it.</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> k,v <span class=\"keyword\">in</span> portion.items():</span><br><span class=\"line\">                built[k] = v</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> hasattr(portion, <span class=\"string\">'__iter__'</span>): <span class=\"comment\"># is a list</span></span><br><span class=\"line\">            <span class=\"comment\">#It's a list. Map each item to the default.</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> portion:</span><br><span class=\"line\">                built[k] = default</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"comment\">#It's a scalar. Map it to the default.</span></span><br><span class=\"line\">            built[portion] = default</span><br><span class=\"line\">    <span class=\"keyword\">return</span> built</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Now, the parser classes.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BeautifulStoneSoup</span><span class=\"params\">(Tag, SGMLParser)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">\"\"\"This class contains the basic parser and search code. It defines</span></span><br><span class=\"line\"><span class=\"string\">    a parser that knows nothing about tag behavior except for the</span></span><br><span class=\"line\"><span class=\"string\">    following:</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">      You can't close a tag without closing all the tags it encloses.</span></span><br><span class=\"line\"><span class=\"string\">      That is, \"&lt;foo&gt;&lt;bar&gt;&lt;/foo&gt;\" actually means</span></span><br><span class=\"line\"><span class=\"string\">      \"&lt;foo&gt;&lt;bar&gt;&lt;/bar&gt;&lt;/foo&gt;\".</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    [Another possible explanation is \"&lt;foo&gt;&lt;bar /&gt;&lt;/foo&gt;\", but since</span></span><br><span class=\"line\"><span class=\"string\">    this class defines no SELF_CLOSING_TAGS, it will never use that</span></span><br><span class=\"line\"><span class=\"string\">    explanation.]</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    This class is useful for parsing XML or made-up markup languages,</span></span><br><span class=\"line\"><span class=\"string\">    or when BeautifulSoup makes an assumption counter to what you were</span></span><br><span class=\"line\"><span class=\"string\">    expecting.\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    SELF_CLOSING_TAGS = &#123;&#125;</span><br><span class=\"line\">    NESTABLE_TAGS = &#123;&#125;</span><br><span class=\"line\">    RESET_NESTING_TAGS = &#123;&#125;</span><br><span class=\"line\">    QUOTE_TAGS = &#123;&#125;</span><br><span class=\"line\">    PRESERVE_WHITESPACE_TAGS = []</span><br><span class=\"line\"></span><br><span class=\"line\">    MARKUP_MASSAGE = [(re.compile(<span class=\"string\">'(&lt;[^&lt;&gt;]*)/&gt;'</span>),</span><br><span class=\"line\">                       <span class=\"keyword\">lambda</span> x: x.group(<span class=\"number\">1</span>) + <span class=\"string\">' /&gt;'</span>),</span><br><span class=\"line\">                      (re.compile(<span class=\"string\">'&lt;!\\s+([^&lt;&gt;]*)&gt;'</span>),</span><br><span class=\"line\">                       <span class=\"keyword\">lambda</span> x: <span class=\"string\">'&lt;!'</span> + x.group(<span class=\"number\">1</span>) + <span class=\"string\">'&gt;'</span>)</span><br><span class=\"line\">                      ]</span><br><span class=\"line\"></span><br><span class=\"line\">    ROOT_TAG_NAME = <span class=\"string\">u'[document]'</span></span><br><span class=\"line\"></span><br><span class=\"line\">    HTML_ENTITIES = <span class=\"string\">\"html\"</span></span><br><span class=\"line\">    XML_ENTITIES = <span class=\"string\">\"xml\"</span></span><br><span class=\"line\">    XHTML_ENTITIES = <span class=\"string\">\"xhtml\"</span></span><br><span class=\"line\">    <span class=\"comment\"># <span class=\"doctag\">TODO:</span> This only exists for backwards-compatibility</span></span><br><span class=\"line\">    ALL_ENTITIES = XHTML_ENTITIES</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Used when determining whether a text node is all whitespace and</span></span><br><span class=\"line\">    <span class=\"comment\"># can be replaced with a single space. A text node that contains</span></span><br><span class=\"line\">    <span class=\"comment\"># fancy Unicode spaces (usually non-breaking) should be left</span></span><br><span class=\"line\">    <span class=\"comment\"># alone.</span></span><br><span class=\"line\">    STRIP_ASCII_SPACES = &#123; <span class=\"number\">9</span>: <span class=\"keyword\">None</span>, <span class=\"number\">10</span>: <span class=\"keyword\">None</span>, <span class=\"number\">12</span>: <span class=\"keyword\">None</span>, <span class=\"number\">13</span>: <span class=\"keyword\">None</span>, <span class=\"number\">32</span>: <span class=\"keyword\">None</span>, &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, markup=<span class=\"string\">\"\"</span>, parseOnlyThese=None, fromEncoding=None,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                 markupMassage=True, smartQuotesTo=XML_ENTITIES,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                 convertEntities=None, selfClosingTags=None, isHTML=False)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"The Soup object is initialized as the 'root tag', and the</span></span><br><span class=\"line\"><span class=\"string\">        provided markup (which can be a string or a file-like object)</span></span><br><span class=\"line\"><span class=\"string\">        is fed into the underlying parser.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        sgmllib will process most bad HTML, and the BeautifulSoup</span></span><br><span class=\"line\"><span class=\"string\">        class has some tricks for dealing with some HTML that kills</span></span><br><span class=\"line\"><span class=\"string\">        sgmllib, but Beautiful Soup can nonetheless choke or lose data</span></span><br><span class=\"line\"><span class=\"string\">        if your data uses self-closing tags or declarations</span></span><br><span class=\"line\"><span class=\"string\">        incorrectly.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        By default, Beautiful Soup uses regexes to sanitize input,</span></span><br><span class=\"line\"><span class=\"string\">        avoiding the vast majority of these problems. If the problems</span></span><br><span class=\"line\"><span class=\"string\">        don't apply to you, pass in False for markupMassage, and</span></span><br><span class=\"line\"><span class=\"string\">        you'll get better performance.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        The default parser massage techniques fix the two most common</span></span><br><span class=\"line\"><span class=\"string\">        instances of invalid HTML that choke sgmllib:</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">         &lt;br/&gt; (No space between name of closing tag and tag close)</span></span><br><span class=\"line\"><span class=\"string\">         &lt;! --Comment--&gt; (Extraneous whitespace in declaration)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        You can pass in a custom list of (RE object, replace method)</span></span><br><span class=\"line\"><span class=\"string\">        tuples to get Beautiful Soup to scrub your input the way you</span></span><br><span class=\"line\"><span class=\"string\">        want.\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">        self.parseOnlyThese = parseOnlyThese</span><br><span class=\"line\">        self.fromEncoding = fromEncoding</span><br><span class=\"line\">        self.smartQuotesTo = smartQuotesTo</span><br><span class=\"line\">        self.convertEntities = convertEntities</span><br><span class=\"line\">        <span class=\"comment\"># Set the rules for how we'll deal with the entities we</span></span><br><span class=\"line\">        <span class=\"comment\"># encounter</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.convertEntities:</span><br><span class=\"line\">            <span class=\"comment\"># It doesn't make sense to convert encoded characters to</span></span><br><span class=\"line\">            <span class=\"comment\"># entities even while you're converting entities to Unicode.</span></span><br><span class=\"line\">            <span class=\"comment\"># Just convert it all to Unicode.</span></span><br><span class=\"line\">            self.smartQuotesTo = <span class=\"keyword\">None</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> convertEntities == self.HTML_ENTITIES:</span><br><span class=\"line\">                self.convertXMLEntities = <span class=\"keyword\">False</span></span><br><span class=\"line\">                self.convertHTMLEntities = <span class=\"keyword\">True</span></span><br><span class=\"line\">                self.escapeUnrecognizedEntities = <span class=\"keyword\">True</span></span><br><span class=\"line\">            <span class=\"keyword\">elif</span> convertEntities == self.XHTML_ENTITIES:</span><br><span class=\"line\">                self.convertXMLEntities = <span class=\"keyword\">True</span></span><br><span class=\"line\">                self.convertHTMLEntities = <span class=\"keyword\">True</span></span><br><span class=\"line\">                self.escapeUnrecognizedEntities = <span class=\"keyword\">False</span></span><br><span class=\"line\">            <span class=\"keyword\">elif</span> convertEntities == self.XML_ENTITIES:</span><br><span class=\"line\">                self.convertXMLEntities = <span class=\"keyword\">True</span></span><br><span class=\"line\">                self.convertHTMLEntities = <span class=\"keyword\">False</span></span><br><span class=\"line\">                self.escapeUnrecognizedEntities = <span class=\"keyword\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.convertXMLEntities = <span class=\"keyword\">False</span></span><br><span class=\"line\">            self.convertHTMLEntities = <span class=\"keyword\">False</span></span><br><span class=\"line\">            self.escapeUnrecognizedEntities = <span class=\"keyword\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">        self.instanceSelfClosingTags = buildTagMap(<span class=\"keyword\">None</span>, selfClosingTags)</span><br><span class=\"line\">        SGMLParser.__init__(self)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> hasattr(markup, <span class=\"string\">'read'</span>):        <span class=\"comment\"># It's a file-type object.</span></span><br><span class=\"line\">            markup = markup.read()</span><br><span class=\"line\">        self.markup = markup</span><br><span class=\"line\">        self.markupMassage = markupMassage</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            self._feed(isHTML=isHTML)</span><br><span class=\"line\">        <span class=\"keyword\">except</span> StopParsing:</span><br><span class=\"line\">            <span class=\"keyword\">pass</span></span><br><span class=\"line\">        self.markup = <span class=\"keyword\">None</span>                 <span class=\"comment\"># The markup can now be GCed</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">convert_charref</span><span class=\"params\">(self, name)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"This method fixes a bug in Python's SGMLParser.\"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            n = int(name)</span><br><span class=\"line\">        <span class=\"keyword\">except</span> ValueError:</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"number\">0</span> &lt;= n &lt;= <span class=\"number\">127</span> : <span class=\"comment\"># ASCII ends at 127, not 255</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.convert_codepoint(n)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_feed</span><span class=\"params\">(self, inDocumentEncoding=None, isHTML=False)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># Convert the document to Unicode.</span></span><br><span class=\"line\">        markup = self.markup</span><br><span class=\"line\">        <span class=\"keyword\">if</span> isinstance(markup, unicode):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> hasattr(self, <span class=\"string\">'originalEncoding'</span>):</span><br><span class=\"line\">                self.originalEncoding = <span class=\"keyword\">None</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            dammit = UnicodeDammit\\</span><br><span class=\"line\">                     (markup, [self.fromEncoding, inDocumentEncoding],</span><br><span class=\"line\">                      smartQuotesTo=self.smartQuotesTo, isHTML=isHTML)</span><br><span class=\"line\">            markup = dammit.unicode</span><br><span class=\"line\">            self.originalEncoding = dammit.originalEncoding</span><br><span class=\"line\">            self.declaredHTMLEncoding = dammit.declaredHTMLEncoding</span><br><span class=\"line\">        <span class=\"keyword\">if</span> markup:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> self.markupMassage:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> hasattr(self.markupMassage, <span class=\"string\">\"__iter__\"</span>):</span><br><span class=\"line\">                    self.markupMassage = self.MARKUP_MASSAGE</span><br><span class=\"line\">                <span class=\"keyword\">for</span> fix, m <span class=\"keyword\">in</span> self.markupMassage:</span><br><span class=\"line\">                    markup = fix.sub(m, markup)</span><br><span class=\"line\">                <span class=\"comment\"># <span class=\"doctag\">TODO:</span> We get rid of markupMassage so that the</span></span><br><span class=\"line\">                <span class=\"comment\"># soup object can be deepcopied later on. Some</span></span><br><span class=\"line\">                <span class=\"comment\"># Python installations can't copy regexes. If anyone</span></span><br><span class=\"line\">                <span class=\"comment\"># was relying on the existence of markupMassage, this</span></span><br><span class=\"line\">                <span class=\"comment\"># might cause problems.</span></span><br><span class=\"line\">                <span class=\"keyword\">del</span>(self.markupMassage)</span><br><span class=\"line\">        self.reset()</span><br><span class=\"line\"></span><br><span class=\"line\">        SGMLParser.feed(self, markup)</span><br><span class=\"line\">        <span class=\"comment\"># Close out any unfinished strings and close all the open tags.</span></span><br><span class=\"line\">        self.endData()</span><br><span class=\"line\">        <span class=\"keyword\">while</span> self.currentTag.name != self.ROOT_TAG_NAME:</span><br><span class=\"line\">            self.popTag()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__getattr__</span><span class=\"params\">(self, methodName)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"This method routes method call requests to either the SGMLParser</span></span><br><span class=\"line\"><span class=\"string\">        superclass or the Tag superclass, depending on the method name.\"\"\"</span></span><br><span class=\"line\">        <span class=\"comment\">#print \"__getattr__ called on %s.%s\" % (self.__class__, methodName)</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> methodName.startswith(<span class=\"string\">'start_'</span>) <span class=\"keyword\">or</span> methodName.startswith(<span class=\"string\">'end_'</span>) \\</span><br><span class=\"line\">               <span class=\"keyword\">or</span> methodName.startswith(<span class=\"string\">'do_'</span>):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> SGMLParser.__getattr__(self, methodName)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"keyword\">not</span> methodName.startswith(<span class=\"string\">'__'</span>):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Tag.__getattr__(self, methodName)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> AttributeError</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">isSelfClosingTag</span><span class=\"params\">(self, name)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"Returns true iff the given string is the name of a</span></span><br><span class=\"line\"><span class=\"string\">        self-closing tag according to this parser.\"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.SELF_CLOSING_TAGS.has_key(name) \\</span><br><span class=\"line\">               <span class=\"keyword\">or</span> self.instanceSelfClosingTags.has_key(name)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">reset</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        Tag.__init__(self, self, self.ROOT_TAG_NAME)</span><br><span class=\"line\">        self.hidden = <span class=\"number\">1</span></span><br><span class=\"line\">        SGMLParser.reset(self)</span><br><span class=\"line\">        self.currentData = []</span><br><span class=\"line\">        self.currentTag = <span class=\"keyword\">None</span></span><br><span class=\"line\">        self.tagStack = []</span><br><span class=\"line\">        self.quoteStack = []</span><br><span class=\"line\">        self.pushTag(self)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">popTag</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        tag = self.tagStack.pop()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">#print \"Pop\", tag.name</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.tagStack:</span><br><span class=\"line\">            self.currentTag = self.tagStack[<span class=\"number\">-1</span>]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.currentTag</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pushTag</span><span class=\"params\">(self, tag)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\">#print \"Push\", tag.name</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.currentTag:</span><br><span class=\"line\">            self.currentTag.contents.append(tag)</span><br><span class=\"line\">        self.tagStack.append(tag)</span><br><span class=\"line\">        self.currentTag = self.tagStack[<span class=\"number\">-1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">endData</span><span class=\"params\">(self, containerClass=NavigableString)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.currentData:</span><br><span class=\"line\">            currentData = <span class=\"string\">u''</span>.join(self.currentData)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (currentData.translate(self.STRIP_ASCII_SPACES) == <span class=\"string\">''</span> <span class=\"keyword\">and</span></span><br><span class=\"line\">                <span class=\"keyword\">not</span> set([tag.name <span class=\"keyword\">for</span> tag <span class=\"keyword\">in</span> self.tagStack]).intersection(</span><br><span class=\"line\">                    self.PRESERVE_WHITESPACE_TAGS)):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> <span class=\"string\">'\\n'</span> <span class=\"keyword\">in</span> currentData:</span><br><span class=\"line\">                    currentData = <span class=\"string\">'\\n'</span></span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    currentData = <span class=\"string\">' '</span></span><br><span class=\"line\">            self.currentData = []</span><br><span class=\"line\">            <span class=\"keyword\">if</span> self.parseOnlyThese <span class=\"keyword\">and</span> len(self.tagStack) &lt;= <span class=\"number\">1</span> <span class=\"keyword\">and</span> \\</span><br><span class=\"line\">                   (<span class=\"keyword\">not</span> self.parseOnlyThese.text <span class=\"keyword\">or</span> \\</span><br><span class=\"line\">                    <span class=\"keyword\">not</span> self.parseOnlyThese.search(currentData)):</span><br><span class=\"line\">                <span class=\"keyword\">return</span></span><br><span class=\"line\">            o = containerClass(currentData)</span><br><span class=\"line\">            o.setup(self.currentTag, self.previous)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> self.previous:</span><br><span class=\"line\">                self.previous.next = o</span><br><span class=\"line\">            self.previous = o</span><br><span class=\"line\">            self.currentTag.contents.append(o)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_popToTag</span><span class=\"params\">(self, name, inclusivePop=True)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"Pops the tag stack up to and including the most recent</span></span><br><span class=\"line\"><span class=\"string\">        instance of the given tag. If inclusivePop is false, pops the tag</span></span><br><span class=\"line\"><span class=\"string\">        stack up to but *not* including the most recent instqance of</span></span><br><span class=\"line\"><span class=\"string\">        the given tag.\"\"\"</span></span><br><span class=\"line\">        <span class=\"comment\">#print \"Popping to %s\" % name</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> name == self.ROOT_TAG_NAME:</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">        numPops = <span class=\"number\">0</span></span><br><span class=\"line\">        mostRecentTag = <span class=\"keyword\">None</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(self.tagStack)<span class=\"number\">-1</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> name == self.tagStack[i].name:</span><br><span class=\"line\">                numPops = len(self.tagStack)-i</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> inclusivePop:</span><br><span class=\"line\">            numPops = numPops - <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>, numPops):</span><br><span class=\"line\">            mostRecentTag = self.popTag()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mostRecentTag</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_smartPop</span><span class=\"params\">(self, name)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"string\">\"\"\"We need to pop up to the previous tag of this type, unless</span></span><br><span class=\"line\"><span class=\"string\">        one of this tag's nesting reset triggers comes between this</span></span><br><span class=\"line\"><span class=\"string\">        tag and the previous tag of this type, OR unless this tag is a</span></span><br><span class=\"line\"><span class=\"string\">        generic nesting trigger and another generic nesting trigger</span></span><br><span class=\"line\"><span class=\"string\">        comes between this tag and the previous tag of this type.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        Examples:</span></span><br><span class=\"line\"><span class=\"string\">         &lt;p&gt;Foo&lt;b&gt;Bar *&lt;p&gt;* should pop to 'p', not 'b'.</span></span><br><span class=\"line\"><span class=\"string\">         &lt;p&gt;Foo&lt;table&gt;Bar *&lt;p&gt;* should pop to 'table', not 'p'.</span></span><br><span class=\"line\"><span class=\"string\">         &lt;p&gt;Foo&lt;table&gt;&lt;tr&gt;Bar *&lt;p&gt;* should pop to 'tr', not 'p'.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">         &lt;li&gt;&lt;ul&gt;&lt;li&gt; *&lt;li&gt;* should pop to 'ul', not the first 'li'.</span></span><br><span class=\"line\"><span class=\"string\">         &lt;tr&gt;&lt;table&gt;&lt;tr&gt; *&lt;tr&gt;* should pop to 'table', not the first 'tr'</span></span><br><span class=\"line\"><span class=\"string\">         &lt;td&gt;&lt;tr&gt;&lt;td&gt; *&lt;td&gt;* should pop to 'tr', not the first 'td'</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">        nestingResetTriggers = self.NESTABLE_TAGS.get(name)</span><br><span class=\"line\">        isNestable = nestingResetTriggers != <span class=\"keyword\">None</span></span><br><span class=\"line\">        isResetNesting = self.RESET_NESTING_TAGS.has_key(name)</span><br><span class=\"line\">        popTo = <span class=\"keyword\">None</span></span><br><span class=\"line\">        inclusive = <span class=\"keyword\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(self.tagStack)<span class=\"number\">-1</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>):</span><br><span class=\"line\">            p = self.tagStack[i]</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">not</span> p <span class=\"keyword\">or</span> p.name == name) <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> isNestable:</span><br><span class=\"line\">                <span class=\"comment\">#Non-nestable tags get popped to the top or to their</span></span><br><span class=\"line\">                <span class=\"comment\">#last occurance.</span></span><br><span class=\"line\">                popTo = name</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nestingResetTriggers <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span></span><br><span class=\"line\">                <span class=\"keyword\">and</span> p.name <span class=\"keyword\">in</span> nestingResetTriggers) \\</span><br><span class=\"line\">                <span class=\"keyword\">or</span> (nestingResetTriggers <span class=\"keyword\">is</span> <span class=\"keyword\">None</span> <span class=\"keyword\">and</span> isResetNesting</span><br><span class=\"line\">                    <span class=\"keyword\">and</span> self.RESET_NESTING_TAGS.has_key(p.name)):</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">#If we encounter one of the nesting reset triggers</span></span><br><span class=\"line\">                <span class=\"comment\">#peculiar to this tag, or we encounter another tag</span></span><br><span class=\"line\">                <span class=\"comment\">#that causes nesting to reset, pop up to but not</span></span><br><span class=\"line\">                <span class=\"comment\">#including that tag.</span></span><br><span class=\"line\">                popTo = p.name</span><br><span class=\"line\">                inclusive = <span class=\"keyword\">False</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            p = p.parent</span><br><span class=\"line\">        <span class=\"keyword\">if</span> popTo:</span><br><span class=\"line\">            self._popToTag(popTo, inclusive)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">unknown_starttag</span><span class=\"params\">(self, name, attrs, selfClosing=<span class=\"number\">0</span>)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\">#print \"Start tag %s: %s\" % (name, attrs)</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.quoteStack:</span><br><span class=\"line\">            <span class=\"comment\">#This is not a real tag.</span></span><br><span class=\"line\">            <span class=\"comment\">#print \"&lt;%s&gt; is not real!\" % name</span></span><br><span class=\"line\">            attrs = <span class=\"string\">''</span>.join([<span class=\"string\">' %s=\"%s\"'</span> % (x, y) <span class=\"keyword\">for</span> x, y <span class=\"keyword\">in</span> attrs])</span><br><span class=\"line\">            self.handle_data(<span class=\"string\">'&lt;%s%s&gt;'</span> % (name, attrs))</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        self.endData()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.isSelfClosingTag(name) <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> selfClosing:</span><br><span class=\"line\">            self._smartPop(name)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.parseOnlyThese <span class=\"keyword\">and</span> len(self.tagStack) &lt;= <span class=\"number\">1</span> \\</span><br><span class=\"line\">               <span class=\"keyword\">and</span> (self.parseOnlyThese.text <span class=\"keyword\">or</span> <span class=\"keyword\">not</span> self.parseOnlyThese.searchTag(name, attrs)):</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">        tag = Tag(self, name, attrs, self.currentTag, self.previous)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.previous:</span><br><span class=\"line\">            self.previous.next = tag</span><br><span class=\"line\">        self.previous = tag</span><br><span class=\"line\">        self.pushTag(tag)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> selfClosing <span class=\"keyword\">or</span> self.isSelfClosingTag(name):</span><br><span class=\"line\">            self.popTag()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> name <span class=\"keyword\">in</span> self.QUOTE_TAGS:</span><br><span class=\"line\">            <span class=\"comment\">#print \"Beginning quote (%s)\" % name</span></span><br><span class=\"line\">            self.quoteStack.append(name)</span><br><span class=\"line\">            self.literal = <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> tag</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">unknown_endtag</span><span class=\"params\">(self, name)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\">#print \"End tag %s\" % name</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.quoteStack <span class=\"keyword\">and</span> self.quoteStack[<span class=\"number\">-1</span>] != name:</span><br><span class=\"line\">            <span class=\"comment\">#This is not a real end tag.</span></span><br><span class=\"line\">            <span class=\"comment\">#print \"&lt;/%s&gt; is not real!\" % name</span></span><br><span class=\"line\">            self.handle_data(<span class=\"string\">'&lt;/%s&gt;'</span> % name)</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        self.endData()</span><br><span class=\"line\">        self._popToTag(name)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.quoteStack <span class=\"keyword\">and</span> self.quoteStack[<span class=\"number\">-1</span>] == name:</span><br><span class=\"line\">            self.quoteStack.pop()</span><br><span class=\"line\">            self.literal = (len(self.quoteStack) &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">handle_data</span><span class=\"params\">(self, data)</span>:</span></span><br><span class=\"line\">        self.currentData.append(data)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_toStringSubclass</span><span class=\"params\">(self, text, subclass)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"Adds a certain piece of text to the tree as a NavigableString</span></span><br><span class=\"line\"><span class=\"string\">        subclass.\"\"\"</span></span><br><span class=\"line\">        self.endData()</span><br><span class=\"line\">        self.handle_data(text)</span><br><span class=\"line\">        self.endData(subclass)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">handle_pi</span><span class=\"params\">(self, text)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"Handle a processing instruction as a ProcessingInstruction</span></span><br><span class=\"line\"><span class=\"string\">        object, possibly one with a %SOUP-ENCODING% slot into which an</span></span><br><span class=\"line\"><span class=\"string\">        encoding will be plugged later.\"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> text[:<span class=\"number\">3</span>] == <span class=\"string\">\"xml\"</span>:</span><br><span class=\"line\">            text = <span class=\"string\">u\"xml version='1.0' encoding='%SOUP-ENCODING%'\"</span></span><br><span class=\"line\">        self._toStringSubclass(text, ProcessingInstruction)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">handle_comment</span><span class=\"params\">(self, text)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"Handle comments as Comment objects.\"</span></span><br><span class=\"line\">        self._toStringSubclass(text, Comment)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">handle_charref</span><span class=\"params\">(self, ref)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"Handle character references as data.\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.convertEntities:</span><br><span class=\"line\">            data = unichr(int(ref))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            data = <span class=\"string\">'&amp;#%s;'</span> % ref</span><br><span class=\"line\">        self.handle_data(data)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">handle_entityref</span><span class=\"params\">(self, ref)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"Handle entity references as data, possibly converting known</span></span><br><span class=\"line\"><span class=\"string\">        HTML and/or XML entity references to the corresponding Unicode</span></span><br><span class=\"line\"><span class=\"string\">        characters.\"\"\"</span></span><br><span class=\"line\">        data = <span class=\"keyword\">None</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.convertHTMLEntities:</span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                data = unichr(name2codepoint[ref])</span><br><span class=\"line\">            <span class=\"keyword\">except</span> KeyError:</span><br><span class=\"line\">                <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> data <span class=\"keyword\">and</span> self.convertXMLEntities:</span><br><span class=\"line\">                data = self.XML_ENTITIES_TO_SPECIAL_CHARS.get(ref)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> data <span class=\"keyword\">and</span> self.convertHTMLEntities <span class=\"keyword\">and</span> \\</span><br><span class=\"line\">            <span class=\"keyword\">not</span> self.XML_ENTITIES_TO_SPECIAL_CHARS.get(ref):</span><br><span class=\"line\">                <span class=\"comment\"># <span class=\"doctag\">TODO:</span> We've got a problem here. We're told this is</span></span><br><span class=\"line\">                <span class=\"comment\"># an entity reference, but it's not an XML entity</span></span><br><span class=\"line\">                <span class=\"comment\"># reference or an HTML entity reference. Nonetheless,</span></span><br><span class=\"line\">                <span class=\"comment\"># the logical thing to do is to pass it through as an</span></span><br><span class=\"line\">                <span class=\"comment\"># unrecognized entity reference.</span></span><br><span class=\"line\">                <span class=\"comment\">#</span></span><br><span class=\"line\">                <span class=\"comment\"># Except: when the input is \"&amp;carol;\" this function</span></span><br><span class=\"line\">                <span class=\"comment\"># will be called with input \"carol\". When the input is</span></span><br><span class=\"line\">                <span class=\"comment\"># \"AT&amp;T\", this function will be called with input</span></span><br><span class=\"line\">                <span class=\"comment\"># \"T\". We have no way of knowing whether a semicolon</span></span><br><span class=\"line\">                <span class=\"comment\"># was present originally, so we don't know whether</span></span><br><span class=\"line\">                <span class=\"comment\"># this is an unknown entity or just a misplaced</span></span><br><span class=\"line\">                <span class=\"comment\"># ampersand.</span></span><br><span class=\"line\">                <span class=\"comment\">#</span></span><br><span class=\"line\">                <span class=\"comment\"># The more common case is a misplaced ampersand, so I</span></span><br><span class=\"line\">                <span class=\"comment\"># escape the ampersand and omit the trailing semicolon.</span></span><br><span class=\"line\">                data = <span class=\"string\">\"&amp;amp;%s\"</span> % ref</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> data:</span><br><span class=\"line\">            <span class=\"comment\"># This case is different from the one above, because we</span></span><br><span class=\"line\">            <span class=\"comment\"># haven't already gone through a supposedly comprehensive</span></span><br><span class=\"line\">            <span class=\"comment\"># mapping of entities to Unicode characters. We might not</span></span><br><span class=\"line\">            <span class=\"comment\"># have gone through any mapping at all. So the chances are</span></span><br><span class=\"line\">            <span class=\"comment\"># very high that this is a real entity, and not a</span></span><br><span class=\"line\">            <span class=\"comment\"># misplaced ampersand.</span></span><br><span class=\"line\">            data = <span class=\"string\">\"&amp;%s;\"</span> % ref</span><br><span class=\"line\">        self.handle_data(data)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">handle_decl</span><span class=\"params\">(self, data)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"Handle DOCTYPEs and the like as Declaration objects.\"</span></span><br><span class=\"line\">        self._toStringSubclass(data, Declaration)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">parse_declaration</span><span class=\"params\">(self, i)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"Treat a bogus SGML declaration as raw data. Treat a CDATA</span></span><br><span class=\"line\"><span class=\"string\">        declaration as a CData object.\"\"\"</span></span><br><span class=\"line\">        j = <span class=\"keyword\">None</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.rawdata[i:i+<span class=\"number\">9</span>] == <span class=\"string\">'&lt;![CDATA['</span>:</span><br><span class=\"line\">             k = self.rawdata.find(<span class=\"string\">']]&gt;'</span>, i)</span><br><span class=\"line\">             <span class=\"keyword\">if</span> k == <span class=\"number\">-1</span>:</span><br><span class=\"line\">                 k = len(self.rawdata)</span><br><span class=\"line\">             data = self.rawdata[i+<span class=\"number\">9</span>:k]</span><br><span class=\"line\">             j = k+<span class=\"number\">3</span></span><br><span class=\"line\">             self._toStringSubclass(data, CData)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                j = SGMLParser.parse_declaration(self, i)</span><br><span class=\"line\">            <span class=\"keyword\">except</span> SGMLParseError:</span><br><span class=\"line\">                toHandle = self.rawdata[i:]</span><br><span class=\"line\">                self.handle_data(toHandle)</span><br><span class=\"line\">                j = i + len(toHandle)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> j</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BeautifulSoup</span><span class=\"params\">(BeautifulStoneSoup)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">\"\"\"This parser knows the following facts about HTML:</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    * Some tags have no closing tag and should be interpreted as being</span></span><br><span class=\"line\"><span class=\"string\">      closed as soon as they are encountered.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    * The text inside some tags (ie. 'script') may contain tags which</span></span><br><span class=\"line\"><span class=\"string\">      are not really part of the document and which should be parsed</span></span><br><span class=\"line\"><span class=\"string\">      as text, not tags. If you want to parse the text as tags, you can</span></span><br><span class=\"line\"><span class=\"string\">      always fetch it and parse it explicitly.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    * Tag nesting rules:</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">      Most tags can't be nested at all. For instance, the occurance of</span></span><br><span class=\"line\"><span class=\"string\">      a &lt;p&gt; tag should implicitly close the previous &lt;p&gt; tag.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">       &lt;p&gt;Para1&lt;p&gt;Para2</span></span><br><span class=\"line\"><span class=\"string\">        should be transformed into:</span></span><br><span class=\"line\"><span class=\"string\">       &lt;p&gt;Para1&lt;/p&gt;&lt;p&gt;Para2</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">      Some tags can be nested arbitrarily. For instance, the occurance</span></span><br><span class=\"line\"><span class=\"string\">      of a &lt;blockquote&gt; tag should _not_ implicitly close the previous</span></span><br><span class=\"line\"><span class=\"string\">      &lt;blockquote&gt; tag.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">       Alice said: &lt;blockquote&gt;Bob said: &lt;blockquote&gt;Blah</span></span><br><span class=\"line\"><span class=\"string\">        should NOT be transformed into:</span></span><br><span class=\"line\"><span class=\"string\">       Alice said: &lt;blockquote&gt;Bob said: &lt;/blockquote&gt;&lt;blockquote&gt;Blah</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">      Some tags can be nested, but the nesting is reset by the</span></span><br><span class=\"line\"><span class=\"string\">      interposition of other tags. For instance, a &lt;tr&gt; tag should</span></span><br><span class=\"line\"><span class=\"string\">      implicitly close the previous &lt;tr&gt; tag within the same &lt;table&gt;,</span></span><br><span class=\"line\"><span class=\"string\">      but not close a &lt;tr&gt; tag in another table.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">       &lt;table&gt;&lt;tr&gt;Blah&lt;tr&gt;Blah</span></span><br><span class=\"line\"><span class=\"string\">        should be transformed into:</span></span><br><span class=\"line\"><span class=\"string\">       &lt;table&gt;&lt;tr&gt;Blah&lt;/tr&gt;&lt;tr&gt;Blah</span></span><br><span class=\"line\"><span class=\"string\">        but,</span></span><br><span class=\"line\"><span class=\"string\">       &lt;tr&gt;Blah&lt;table&gt;&lt;tr&gt;Blah</span></span><br><span class=\"line\"><span class=\"string\">        should NOT be transformed into</span></span><br><span class=\"line\"><span class=\"string\">       &lt;tr&gt;Blah&lt;table&gt;&lt;/tr&gt;&lt;tr&gt;Blah</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    Differing assumptions about tag nesting rules are a major source</span></span><br><span class=\"line\"><span class=\"string\">    of problems with the BeautifulSoup class. If BeautifulSoup is not</span></span><br><span class=\"line\"><span class=\"string\">    treating as nestable a tag your page author treats as nestable,</span></span><br><span class=\"line\"><span class=\"string\">    try ICantBelieveItsBeautifulSoup, MinimalSoup, or</span></span><br><span class=\"line\"><span class=\"string\">    BeautifulStoneSoup before writing your own subclass.\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, *args, **kwargs)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> kwargs.has_key(<span class=\"string\">'smartQuotesTo'</span>):</span><br><span class=\"line\">            kwargs[<span class=\"string\">'smartQuotesTo'</span>] = self.HTML_ENTITIES</span><br><span class=\"line\">        kwargs[<span class=\"string\">'isHTML'</span>] = <span class=\"keyword\">True</span></span><br><span class=\"line\">        BeautifulStoneSoup.__init__(self, *args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    SELF_CLOSING_TAGS = buildTagMap(<span class=\"keyword\">None</span>,</span><br><span class=\"line\">                                    (<span class=\"string\">'br'</span> , <span class=\"string\">'hr'</span>, <span class=\"string\">'input'</span>, <span class=\"string\">'img'</span>, <span class=\"string\">'meta'</span>,</span><br><span class=\"line\">                                    <span class=\"string\">'spacer'</span>, <span class=\"string\">'link'</span>, <span class=\"string\">'frame'</span>, <span class=\"string\">'base'</span>, <span class=\"string\">'col'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    PRESERVE_WHITESPACE_TAGS = set([<span class=\"string\">'pre'</span>, <span class=\"string\">'textarea'</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">    QUOTE_TAGS = &#123;<span class=\"string\">'script'</span> : <span class=\"keyword\">None</span>, <span class=\"string\">'textarea'</span> : <span class=\"keyword\">None</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#According to the HTML standard, each of these inline tags can</span></span><br><span class=\"line\">    <span class=\"comment\">#contain another tag of the same type. Furthermore, it's common</span></span><br><span class=\"line\">    <span class=\"comment\">#to actually use these tags this way.</span></span><br><span class=\"line\">    NESTABLE_INLINE_TAGS = (<span class=\"string\">'span'</span>, <span class=\"string\">'font'</span>, <span class=\"string\">'q'</span>, <span class=\"string\">'object'</span>, <span class=\"string\">'bdo'</span>, <span class=\"string\">'sub'</span>, <span class=\"string\">'sup'</span>,</span><br><span class=\"line\">                            <span class=\"string\">'center'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#According to the HTML standard, these block tags can contain</span></span><br><span class=\"line\">    <span class=\"comment\">#another tag of the same type. Furthermore, it's common</span></span><br><span class=\"line\">    <span class=\"comment\">#to actually use these tags this way.</span></span><br><span class=\"line\">    NESTABLE_BLOCK_TAGS = (<span class=\"string\">'blockquote'</span>, <span class=\"string\">'div'</span>, <span class=\"string\">'fieldset'</span>, <span class=\"string\">'ins'</span>, <span class=\"string\">'del'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#Lists can contain other lists, but there are restrictions.</span></span><br><span class=\"line\">    NESTABLE_LIST_TAGS = &#123; <span class=\"string\">'ol'</span> : [],</span><br><span class=\"line\">                           <span class=\"string\">'ul'</span> : [],</span><br><span class=\"line\">                           <span class=\"string\">'li'</span> : [<span class=\"string\">'ul'</span>, <span class=\"string\">'ol'</span>],</span><br><span class=\"line\">                           <span class=\"string\">'dl'</span> : [],</span><br><span class=\"line\">                           <span class=\"string\">'dd'</span> : [<span class=\"string\">'dl'</span>],</span><br><span class=\"line\">                           <span class=\"string\">'dt'</span> : [<span class=\"string\">'dl'</span>] &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#Tables can contain other tables, but there are restrictions.</span></span><br><span class=\"line\">    NESTABLE_TABLE_TAGS = &#123;<span class=\"string\">'table'</span> : [],</span><br><span class=\"line\">                           <span class=\"string\">'tr'</span> : [<span class=\"string\">'table'</span>, <span class=\"string\">'tbody'</span>, <span class=\"string\">'tfoot'</span>, <span class=\"string\">'thead'</span>],</span><br><span class=\"line\">                           <span class=\"string\">'td'</span> : [<span class=\"string\">'tr'</span>],</span><br><span class=\"line\">                           <span class=\"string\">'th'</span> : [<span class=\"string\">'tr'</span>],</span><br><span class=\"line\">                           <span class=\"string\">'thead'</span> : [<span class=\"string\">'table'</span>],</span><br><span class=\"line\">                           <span class=\"string\">'tbody'</span> : [<span class=\"string\">'table'</span>],</span><br><span class=\"line\">                           <span class=\"string\">'tfoot'</span> : [<span class=\"string\">'table'</span>],</span><br><span class=\"line\">                           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    NON_NESTABLE_BLOCK_TAGS = (<span class=\"string\">'address'</span>, <span class=\"string\">'form'</span>, <span class=\"string\">'p'</span>, <span class=\"string\">'pre'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#If one of these tags is encountered, all tags up to the next tag of</span></span><br><span class=\"line\">    <span class=\"comment\">#this type are popped.</span></span><br><span class=\"line\">    RESET_NESTING_TAGS = buildTagMap(<span class=\"keyword\">None</span>, NESTABLE_BLOCK_TAGS, <span class=\"string\">'noscript'</span>,</span><br><span class=\"line\">                                     NON_NESTABLE_BLOCK_TAGS,</span><br><span class=\"line\">                                     NESTABLE_LIST_TAGS,</span><br><span class=\"line\">                                     NESTABLE_TABLE_TAGS)</span><br><span class=\"line\"></span><br><span class=\"line\">    NESTABLE_TAGS = buildTagMap([], NESTABLE_INLINE_TAGS, NESTABLE_BLOCK_TAGS,</span><br><span class=\"line\">                                NESTABLE_LIST_TAGS, NESTABLE_TABLE_TAGS)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Used to detect the charset in a META tag; see start_meta</span></span><br><span class=\"line\">    CHARSET_RE = re.compile(<span class=\"string\">\"((^|;)\\s*charset=)([^;]*)\"</span>, re.M)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">start_meta</span><span class=\"params\">(self, attrs)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"Beautiful Soup can detect a charset included in a META tag,</span></span><br><span class=\"line\"><span class=\"string\">        try to convert the document to that charset, and re-parse the</span></span><br><span class=\"line\"><span class=\"string\">        document from the beginning.\"\"\"</span></span><br><span class=\"line\">        httpEquiv = <span class=\"keyword\">None</span></span><br><span class=\"line\">        contentType = <span class=\"keyword\">None</span></span><br><span class=\"line\">        contentTypeIndex = <span class=\"keyword\">None</span></span><br><span class=\"line\">        tagNeedsEncodingSubstitution = <span class=\"keyword\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>, len(attrs)):</span><br><span class=\"line\">            key, value = attrs[i]</span><br><span class=\"line\">            key = key.lower()</span><br><span class=\"line\">            <span class=\"keyword\">if</span> key == <span class=\"string\">'http-equiv'</span>:</span><br><span class=\"line\">                httpEquiv = value</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> key == <span class=\"string\">'content'</span>:</span><br><span class=\"line\">                contentType = value</span><br><span class=\"line\">                contentTypeIndex = i</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> httpEquiv <span class=\"keyword\">and</span> contentType: <span class=\"comment\"># It's an interesting meta tag.</span></span><br><span class=\"line\">            match = self.CHARSET_RE.search(contentType)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> match:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (self.declaredHTMLEncoding <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span> <span class=\"keyword\">or</span></span><br><span class=\"line\">                    self.originalEncoding == self.fromEncoding):</span><br><span class=\"line\">                    <span class=\"comment\"># An HTML encoding was sniffed while converting</span></span><br><span class=\"line\">                    <span class=\"comment\"># the document to Unicode, or an HTML encoding was</span></span><br><span class=\"line\">                    <span class=\"comment\"># sniffed during a previous pass through the</span></span><br><span class=\"line\">                    <span class=\"comment\"># document, or an encoding was specified</span></span><br><span class=\"line\">                    <span class=\"comment\"># explicitly and it worked. Rewrite the meta tag.</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">rewrite</span><span class=\"params\">(match)</span>:</span></span><br><span class=\"line\">                        <span class=\"keyword\">return</span> match.group(<span class=\"number\">1</span>) + <span class=\"string\">\"%SOUP-ENCODING%\"</span></span><br><span class=\"line\">                    newAttr = self.CHARSET_RE.sub(rewrite, contentType)</span><br><span class=\"line\">                    attrs[contentTypeIndex] = (attrs[contentTypeIndex][<span class=\"number\">0</span>],</span><br><span class=\"line\">                                               newAttr)</span><br><span class=\"line\">                    tagNeedsEncodingSubstitution = <span class=\"keyword\">True</span></span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    <span class=\"comment\"># This is our first pass through the document.</span></span><br><span class=\"line\">                    <span class=\"comment\"># Go through it again with the encoding information.</span></span><br><span class=\"line\">                    newCharset = match.group(<span class=\"number\">3</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> newCharset <span class=\"keyword\">and</span> newCharset != self.originalEncoding:</span><br><span class=\"line\">                        self.declaredHTMLEncoding = newCharset</span><br><span class=\"line\">                        self._feed(self.declaredHTMLEncoding)</span><br><span class=\"line\">                        <span class=\"keyword\">raise</span> StopParsing</span><br><span class=\"line\">                    <span class=\"keyword\">pass</span></span><br><span class=\"line\">        tag = self.unknown_starttag(<span class=\"string\">\"meta\"</span>, attrs)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> tag <span class=\"keyword\">and</span> tagNeedsEncodingSubstitution:</span><br><span class=\"line\">            tag.containsSubstitutions = <span class=\"keyword\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StopParsing</span><span class=\"params\">(Exception)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ICantBelieveItsBeautifulSoup</span><span class=\"params\">(BeautifulSoup)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">\"\"\"The BeautifulSoup class is oriented towards skipping over</span></span><br><span class=\"line\"><span class=\"string\">    common HTML errors like unclosed tags. However, sometimes it makes</span></span><br><span class=\"line\"><span class=\"string\">    errors of its own. For instance, consider this fragment:</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">     &lt;b&gt;Foo&lt;b&gt;Bar&lt;/b&gt;&lt;/b&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    This is perfectly valid (if bizarre) HTML. However, the</span></span><br><span class=\"line\"><span class=\"string\">    BeautifulSoup class will implicitly close the first b tag when it</span></span><br><span class=\"line\"><span class=\"string\">    encounters the second 'b'. It will think the author wrote</span></span><br><span class=\"line\"><span class=\"string\">    \"&lt;b&gt;Foo&lt;b&gt;Bar\", and didn't close the first 'b' tag, because</span></span><br><span class=\"line\"><span class=\"string\">    there's no real-world reason to bold something that's already</span></span><br><span class=\"line\"><span class=\"string\">    bold. When it encounters '&lt;/b&gt;&lt;/b&gt;' it will close two more 'b'</span></span><br><span class=\"line\"><span class=\"string\">    tags, for a grand total of three tags closed instead of two. This</span></span><br><span class=\"line\"><span class=\"string\">    can throw off the rest of your document structure. The same is</span></span><br><span class=\"line\"><span class=\"string\">    true of a number of other tags, listed below.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    It's much more common for someone to forget to close a 'b' tag</span></span><br><span class=\"line\"><span class=\"string\">    than to actually use nested 'b' tags, and the BeautifulSoup class</span></span><br><span class=\"line\"><span class=\"string\">    handles the common case. This class handles the not-co-common</span></span><br><span class=\"line\"><span class=\"string\">    case: where you can't believe someone wrote what they did, but</span></span><br><span class=\"line\"><span class=\"string\">    it's valid HTML and BeautifulSoup screwed up by assuming it</span></span><br><span class=\"line\"><span class=\"string\">    wouldn't be.\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    I_CANT_BELIEVE_THEYRE_NESTABLE_INLINE_TAGS = \\</span><br><span class=\"line\">     (<span class=\"string\">'em'</span>, <span class=\"string\">'big'</span>, <span class=\"string\">'i'</span>, <span class=\"string\">'small'</span>, <span class=\"string\">'tt'</span>, <span class=\"string\">'abbr'</span>, <span class=\"string\">'acronym'</span>, <span class=\"string\">'strong'</span>,</span><br><span class=\"line\">      <span class=\"string\">'cite'</span>, <span class=\"string\">'code'</span>, <span class=\"string\">'dfn'</span>, <span class=\"string\">'kbd'</span>, <span class=\"string\">'samp'</span>, <span class=\"string\">'strong'</span>, <span class=\"string\">'var'</span>, <span class=\"string\">'b'</span>,</span><br><span class=\"line\">      <span class=\"string\">'big'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    I_CANT_BELIEVE_THEYRE_NESTABLE_BLOCK_TAGS = (<span class=\"string\">'noscript'</span>,)</span><br><span class=\"line\"></span><br><span class=\"line\">    NESTABLE_TAGS = buildTagMap([], BeautifulSoup.NESTABLE_TAGS,</span><br><span class=\"line\">                                I_CANT_BELIEVE_THEYRE_NESTABLE_BLOCK_TAGS,</span><br><span class=\"line\">                                I_CANT_BELIEVE_THEYRE_NESTABLE_INLINE_TAGS)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MinimalSoup</span><span class=\"params\">(BeautifulSoup)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"The MinimalSoup class is for parsing HTML that contains</span></span><br><span class=\"line\"><span class=\"string\">    pathologically bad markup. It makes no assumptions about tag</span></span><br><span class=\"line\"><span class=\"string\">    nesting, but it does know which tags are self-closing, that</span></span><br><span class=\"line\"><span class=\"string\">    &lt;script&gt; tags contain Javascript and should not be parsed, that</span></span><br><span class=\"line\"><span class=\"string\">    META tags may contain encoding information, and so on.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    This also makes it better for subclassing than BeautifulStoneSoup</span></span><br><span class=\"line\"><span class=\"string\">    or BeautifulSoup.\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    RESET_NESTING_TAGS = buildTagMap(<span class=\"string\">'noscript'</span>)</span><br><span class=\"line\">    NESTABLE_TAGS = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BeautifulSOAP</span><span class=\"params\">(BeautifulStoneSoup)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"This class will push a tag with only a single string child into</span></span><br><span class=\"line\"><span class=\"string\">    the tag's parent as an attribute. The attribute's name is the tag</span></span><br><span class=\"line\"><span class=\"string\">    name, and the value is the string child. An example should give</span></span><br><span class=\"line\"><span class=\"string\">    the flavor of the change:</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    &lt;foo&gt;&lt;bar&gt;baz&lt;/bar&gt;&lt;/foo&gt;</span></span><br><span class=\"line\"><span class=\"string\">     =&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;foo bar=\"baz\"&gt;&lt;bar&gt;baz&lt;/bar&gt;&lt;/foo&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    You can then access fooTag['bar'] instead of fooTag.barTag.string.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    This is, of course, useful for scraping structures that tend to</span></span><br><span class=\"line\"><span class=\"string\">    use subelements instead of attributes, such as SOAP messages. Note</span></span><br><span class=\"line\"><span class=\"string\">    that it modifies its input, so don't print the modified version</span></span><br><span class=\"line\"><span class=\"string\">    out.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    I'm not sure how many people really want to use this class; let me</span></span><br><span class=\"line\"><span class=\"string\">    know if you do. Mainly I like the name.\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">popTag</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> len(self.tagStack) &gt; <span class=\"number\">1</span>:</span><br><span class=\"line\">            tag = self.tagStack[<span class=\"number\">-1</span>]</span><br><span class=\"line\">            parent = self.tagStack[<span class=\"number\">-2</span>]</span><br><span class=\"line\">            parent._getAttrMap()</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isinstance(tag, Tag) <span class=\"keyword\">and</span> len(tag.contents) == <span class=\"number\">1</span> <span class=\"keyword\">and</span></span><br><span class=\"line\">                isinstance(tag.contents[<span class=\"number\">0</span>], NavigableString) <span class=\"keyword\">and</span></span><br><span class=\"line\">                <span class=\"keyword\">not</span> parent.attrMap.has_key(tag.name)):</span><br><span class=\"line\">                parent[tag.name] = tag.contents[<span class=\"number\">0</span>]</span><br><span class=\"line\">        BeautifulStoneSoup.popTag(self)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Enterprise class names! It has come to our attention that some people</span></span><br><span class=\"line\"><span class=\"comment\">#think the names of the Beautiful Soup parser classes are too silly</span></span><br><span class=\"line\"><span class=\"comment\">#and \"unprofessional\" for use in enterprise screen-scraping. We feel</span></span><br><span class=\"line\"><span class=\"comment\">#your pain! For such-minded folk, the Beautiful Soup Consortium And</span></span><br><span class=\"line\"><span class=\"comment\">#All-Night Kosher Bakery recommends renaming this file to</span></span><br><span class=\"line\"><span class=\"comment\">#\"RobustParser.py\" (or, in cases of extreme enterprisiness,</span></span><br><span class=\"line\"><span class=\"comment\">#\"RobustParserBeanInterface.class\") and using the following</span></span><br><span class=\"line\"><span class=\"comment\">#enterprise-friendly class aliases:</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RobustXMLParser</span><span class=\"params\">(BeautifulStoneSoup)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RobustHTMLParser</span><span class=\"params\">(BeautifulSoup)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RobustWackAssHTMLParser</span><span class=\"params\">(ICantBelieveItsBeautifulSoup)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RobustInsanelyWackAssHTMLParser</span><span class=\"params\">(MinimalSoup)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimplifyingSOAPParser</span><span class=\"params\">(BeautifulSOAP)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">######################################################</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Bonus library: Unicode, Dammit</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># This class forces XML data into a standard format (usually to UTF-8</span></span><br><span class=\"line\"><span class=\"comment\"># or Unicode).  It is heavily based on code from Mark Pilgrim's</span></span><br><span class=\"line\"><span class=\"comment\"># Universal Feed Parser. It does not rewrite the XML or HTML to</span></span><br><span class=\"line\"><span class=\"comment\"># reflect a new encoding: that happens in BeautifulStoneSoup.handle_pi</span></span><br><span class=\"line\"><span class=\"comment\"># (XML) and BeautifulSoup.start_meta (HTML).</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Autodetects character encodings.</span></span><br><span class=\"line\"><span class=\"comment\"># Download from http://chardet.feedparser.org/</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"keyword\">import</span> chardet</span><br><span class=\"line\"><span class=\"comment\">#    import chardet.constants</span></span><br><span class=\"line\"><span class=\"comment\">#    chardet.constants._debug = 1</span></span><br><span class=\"line\"><span class=\"keyword\">except</span> ImportError:</span><br><span class=\"line\">    chardet = <span class=\"keyword\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># cjkcodecs and iconv_codec make Python know about more character encodings.</span></span><br><span class=\"line\"><span class=\"comment\"># Both are available from http://cjkpython.i18n.org/</span></span><br><span class=\"line\"><span class=\"comment\"># They're built in if you use Python 2.4.</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"keyword\">import</span> cjkcodecs.aliases</span><br><span class=\"line\"><span class=\"keyword\">except</span> ImportError:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"keyword\">import</span> iconv_codec</span><br><span class=\"line\"><span class=\"keyword\">except</span> ImportError:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UnicodeDammit</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"A class for detecting the encoding of a *ML document and</span></span><br><span class=\"line\"><span class=\"string\">    converting it to a Unicode string. If the source encoding is</span></span><br><span class=\"line\"><span class=\"string\">    windows-1252, can replace MS smart quotes with their HTML or XML</span></span><br><span class=\"line\"><span class=\"string\">    equivalents.\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># This dictionary maps commonly seen values for \"charset\" in HTML</span></span><br><span class=\"line\">    <span class=\"comment\"># meta tags to the corresponding Python codec names. It only covers</span></span><br><span class=\"line\">    <span class=\"comment\"># values that aren't in Python's aliases and can't be determined</span></span><br><span class=\"line\">    <span class=\"comment\"># by the heuristics in find_codec.</span></span><br><span class=\"line\">    CHARSET_ALIASES = &#123; <span class=\"string\">\"macintosh\"</span> : <span class=\"string\">\"mac-roman\"</span>,</span><br><span class=\"line\">                        <span class=\"string\">\"x-sjis\"</span> : <span class=\"string\">\"shift-jis\"</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, markup, overrideEncodings=[],</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                 smartQuotesTo=<span class=\"string\">'xml'</span>, isHTML=False)</span>:</span></span><br><span class=\"line\">        self.declaredHTMLEncoding = <span class=\"keyword\">None</span></span><br><span class=\"line\">        self.markup, documentEncoding, sniffedEncoding = \\</span><br><span class=\"line\">                     self._detectEncoding(markup, isHTML)</span><br><span class=\"line\">        self.smartQuotesTo = smartQuotesTo</span><br><span class=\"line\">        self.triedEncodings = []</span><br><span class=\"line\">        <span class=\"keyword\">if</span> markup == <span class=\"string\">''</span> <span class=\"keyword\">or</span> isinstance(markup, unicode):</span><br><span class=\"line\">            self.originalEncoding = <span class=\"keyword\">None</span></span><br><span class=\"line\">            self.unicode = unicode(markup)</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">        u = <span class=\"keyword\">None</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> proposedEncoding <span class=\"keyword\">in</span> overrideEncodings:</span><br><span class=\"line\">            u = self._convertFrom(proposedEncoding)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> u: <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> u:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> proposedEncoding <span class=\"keyword\">in</span> (documentEncoding, sniffedEncoding):</span><br><span class=\"line\">                u = self._convertFrom(proposedEncoding)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> u: <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># If no luck and we have auto-detection library, try that:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> u <span class=\"keyword\">and</span> chardet <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> isinstance(self.markup, unicode):</span><br><span class=\"line\">            u = self._convertFrom(chardet.detect(self.markup)[<span class=\"string\">'encoding'</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># As a last resort, try utf-8 and windows-1252:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> u:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> proposed_encoding <span class=\"keyword\">in</span> (<span class=\"string\">\"utf-8\"</span>, <span class=\"string\">\"windows-1252\"</span>):</span><br><span class=\"line\">                u = self._convertFrom(proposed_encoding)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> u: <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\">        self.unicode = u</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> u: self.originalEncoding = <span class=\"keyword\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_subMSChar</span><span class=\"params\">(self, orig)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"Changes a MS smart quote character to an XML or HTML</span></span><br><span class=\"line\"><span class=\"string\">        entity.\"\"\"</span></span><br><span class=\"line\">        sub = self.MS_CHARS.get(orig)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> isinstance(sub, tuple):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> self.smartQuotesTo == <span class=\"string\">'xml'</span>:</span><br><span class=\"line\">                sub = <span class=\"string\">'&amp;#x%s;'</span> % sub[<span class=\"number\">1</span>]</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                sub = <span class=\"string\">'&amp;%s;'</span> % sub[<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sub</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_convertFrom</span><span class=\"params\">(self, proposed)</span>:</span></span><br><span class=\"line\">        proposed = self.find_codec(proposed)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> proposed <span class=\"keyword\">or</span> proposed <span class=\"keyword\">in</span> self.triedEncodings:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">None</span></span><br><span class=\"line\">        self.triedEncodings.append(proposed)</span><br><span class=\"line\">        markup = self.markup</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Convert smart quotes to HTML if coming from an encoding</span></span><br><span class=\"line\">        <span class=\"comment\"># that might have them.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.smartQuotesTo <span class=\"keyword\">and</span> proposed.lower() <span class=\"keyword\">in</span>(<span class=\"string\">\"windows-1252\"</span>,</span><br><span class=\"line\">                                                      <span class=\"string\">\"iso-8859-1\"</span>,</span><br><span class=\"line\">                                                      <span class=\"string\">\"iso-8859-2\"</span>):</span><br><span class=\"line\">            markup = re.compile(<span class=\"string\">\"([\\x80-\\x9f])\"</span>).sub \\</span><br><span class=\"line\">                     (<span class=\"keyword\">lambda</span>(x): self._subMSChar(x.group(<span class=\"number\">1</span>)),</span><br><span class=\"line\">                      markup)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            <span class=\"comment\"># print \"Trying to convert document to %s\" % proposed</span></span><br><span class=\"line\">            u = self._toUnicode(markup, proposed)</span><br><span class=\"line\">            self.markup = u</span><br><span class=\"line\">            self.originalEncoding = proposed</span><br><span class=\"line\">        <span class=\"keyword\">except</span> Exception, e:</span><br><span class=\"line\">            <span class=\"comment\"># print \"That didn't work!\"</span></span><br><span class=\"line\">            <span class=\"comment\"># print e</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">None</span></span><br><span class=\"line\">        <span class=\"comment\">#print \"Correct encoding: %s\" % proposed</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.markup</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_toUnicode</span><span class=\"params\">(self, data, encoding)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">'''Given a string and its encoding, decodes the string into Unicode.</span></span><br><span class=\"line\"><span class=\"string\">        %encoding is a string recognized by encodings.aliases'''</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># strip Byte Order Mark (if present)</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (len(data) &gt;= <span class=\"number\">4</span>) <span class=\"keyword\">and</span> (data[:<span class=\"number\">2</span>] == <span class=\"string\">'\\xfe\\xff'</span>) \\</span><br><span class=\"line\">               <span class=\"keyword\">and</span> (data[<span class=\"number\">2</span>:<span class=\"number\">4</span>] != <span class=\"string\">'\\x00\\x00'</span>):</span><br><span class=\"line\">            encoding = <span class=\"string\">'utf-16be'</span></span><br><span class=\"line\">            data = data[<span class=\"number\">2</span>:]</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> (len(data) &gt;= <span class=\"number\">4</span>) <span class=\"keyword\">and</span> (data[:<span class=\"number\">2</span>] == <span class=\"string\">'\\xff\\xfe'</span>) \\</span><br><span class=\"line\">                 <span class=\"keyword\">and</span> (data[<span class=\"number\">2</span>:<span class=\"number\">4</span>] != <span class=\"string\">'\\x00\\x00'</span>):</span><br><span class=\"line\">            encoding = <span class=\"string\">'utf-16le'</span></span><br><span class=\"line\">            data = data[<span class=\"number\">2</span>:]</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> data[:<span class=\"number\">3</span>] == <span class=\"string\">'\\xef\\xbb\\xbf'</span>:</span><br><span class=\"line\">            encoding = <span class=\"string\">'utf-8'</span></span><br><span class=\"line\">            data = data[<span class=\"number\">3</span>:]</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> data[:<span class=\"number\">4</span>] == <span class=\"string\">'\\x00\\x00\\xfe\\xff'</span>:</span><br><span class=\"line\">            encoding = <span class=\"string\">'utf-32be'</span></span><br><span class=\"line\">            data = data[<span class=\"number\">4</span>:]</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> data[:<span class=\"number\">4</span>] == <span class=\"string\">'\\xff\\xfe\\x00\\x00'</span>:</span><br><span class=\"line\">            encoding = <span class=\"string\">'utf-32le'</span></span><br><span class=\"line\">            data = data[<span class=\"number\">4</span>:]</span><br><span class=\"line\">        newdata = unicode(data, encoding)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> newdata</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_detectEncoding</span><span class=\"params\">(self, xml_data, isHTML=False)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"Given a document, tries to detect its XML encoding.\"\"\"</span></span><br><span class=\"line\">        xml_encoding = sniffed_xml_encoding = <span class=\"keyword\">None</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> xml_data[:<span class=\"number\">4</span>] == <span class=\"string\">'\\x4c\\x6f\\xa7\\x94'</span>:</span><br><span class=\"line\">                <span class=\"comment\"># EBCDIC</span></span><br><span class=\"line\">                xml_data = self._ebcdic_to_ascii(xml_data)</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> xml_data[:<span class=\"number\">4</span>] == <span class=\"string\">'\\x00\\x3c\\x00\\x3f'</span>:</span><br><span class=\"line\">                <span class=\"comment\"># UTF-16BE</span></span><br><span class=\"line\">                sniffed_xml_encoding = <span class=\"string\">'utf-16be'</span></span><br><span class=\"line\">                xml_data = unicode(xml_data, <span class=\"string\">'utf-16be'</span>).encode(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> (len(xml_data) &gt;= <span class=\"number\">4</span>) <span class=\"keyword\">and</span> (xml_data[:<span class=\"number\">2</span>] == <span class=\"string\">'\\xfe\\xff'</span>) \\</span><br><span class=\"line\">                     <span class=\"keyword\">and</span> (xml_data[<span class=\"number\">2</span>:<span class=\"number\">4</span>] != <span class=\"string\">'\\x00\\x00'</span>):</span><br><span class=\"line\">                <span class=\"comment\"># UTF-16BE with BOM</span></span><br><span class=\"line\">                sniffed_xml_encoding = <span class=\"string\">'utf-16be'</span></span><br><span class=\"line\">                xml_data = unicode(xml_data[<span class=\"number\">2</span>:], <span class=\"string\">'utf-16be'</span>).encode(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> xml_data[:<span class=\"number\">4</span>] == <span class=\"string\">'\\x3c\\x00\\x3f\\x00'</span>:</span><br><span class=\"line\">                <span class=\"comment\"># UTF-16LE</span></span><br><span class=\"line\">                sniffed_xml_encoding = <span class=\"string\">'utf-16le'</span></span><br><span class=\"line\">                xml_data = unicode(xml_data, <span class=\"string\">'utf-16le'</span>).encode(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> (len(xml_data) &gt;= <span class=\"number\">4</span>) <span class=\"keyword\">and</span> (xml_data[:<span class=\"number\">2</span>] == <span class=\"string\">'\\xff\\xfe'</span>) <span class=\"keyword\">and</span> \\</span><br><span class=\"line\">                     (xml_data[<span class=\"number\">2</span>:<span class=\"number\">4</span>] != <span class=\"string\">'\\x00\\x00'</span>):</span><br><span class=\"line\">                <span class=\"comment\"># UTF-16LE with BOM</span></span><br><span class=\"line\">                sniffed_xml_encoding = <span class=\"string\">'utf-16le'</span></span><br><span class=\"line\">                xml_data = unicode(xml_data[<span class=\"number\">2</span>:], <span class=\"string\">'utf-16le'</span>).encode(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> xml_data[:<span class=\"number\">4</span>] == <span class=\"string\">'\\x00\\x00\\x00\\x3c'</span>:</span><br><span class=\"line\">                <span class=\"comment\"># UTF-32BE</span></span><br><span class=\"line\">                sniffed_xml_encoding = <span class=\"string\">'utf-32be'</span></span><br><span class=\"line\">                xml_data = unicode(xml_data, <span class=\"string\">'utf-32be'</span>).encode(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> xml_data[:<span class=\"number\">4</span>] == <span class=\"string\">'\\x3c\\x00\\x00\\x00'</span>:</span><br><span class=\"line\">                <span class=\"comment\"># UTF-32LE</span></span><br><span class=\"line\">                sniffed_xml_encoding = <span class=\"string\">'utf-32le'</span></span><br><span class=\"line\">                xml_data = unicode(xml_data, <span class=\"string\">'utf-32le'</span>).encode(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> xml_data[:<span class=\"number\">4</span>] == <span class=\"string\">'\\x00\\x00\\xfe\\xff'</span>:</span><br><span class=\"line\">                <span class=\"comment\"># UTF-32BE with BOM</span></span><br><span class=\"line\">                sniffed_xml_encoding = <span class=\"string\">'utf-32be'</span></span><br><span class=\"line\">                xml_data = unicode(xml_data[<span class=\"number\">4</span>:], <span class=\"string\">'utf-32be'</span>).encode(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> xml_data[:<span class=\"number\">4</span>] == <span class=\"string\">'\\xff\\xfe\\x00\\x00'</span>:</span><br><span class=\"line\">                <span class=\"comment\"># UTF-32LE with BOM</span></span><br><span class=\"line\">                sniffed_xml_encoding = <span class=\"string\">'utf-32le'</span></span><br><span class=\"line\">                xml_data = unicode(xml_data[<span class=\"number\">4</span>:], <span class=\"string\">'utf-32le'</span>).encode(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> xml_data[:<span class=\"number\">3</span>] == <span class=\"string\">'\\xef\\xbb\\xbf'</span>:</span><br><span class=\"line\">                <span class=\"comment\"># UTF-8 with BOM</span></span><br><span class=\"line\">                sniffed_xml_encoding = <span class=\"string\">'utf-8'</span></span><br><span class=\"line\">                xml_data = unicode(xml_data[<span class=\"number\">3</span>:], <span class=\"string\">'utf-8'</span>).encode(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                sniffed_xml_encoding = <span class=\"string\">'ascii'</span></span><br><span class=\"line\">                <span class=\"keyword\">pass</span></span><br><span class=\"line\">        <span class=\"keyword\">except</span>:</span><br><span class=\"line\">            xml_encoding_match = <span class=\"keyword\">None</span></span><br><span class=\"line\">        xml_encoding_match = re.compile(</span><br><span class=\"line\">            <span class=\"string\">'^&lt;\\?.*encoding=[\\'\"](.*?)[\\'\"].*\\?&gt;'</span>).match(xml_data)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> xml_encoding_match <span class=\"keyword\">and</span> isHTML:</span><br><span class=\"line\">            regexp = re.compile(<span class=\"string\">'&lt;\\s*meta[^&gt;]+charset=([^&gt;]*?)[;\\'\"&gt;]'</span>, re.I)</span><br><span class=\"line\">            xml_encoding_match = regexp.search(xml_data)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> xml_encoding_match <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">            xml_encoding = xml_encoding_match.groups()[<span class=\"number\">0</span>].lower()</span><br><span class=\"line\">            <span class=\"keyword\">if</span> isHTML:</span><br><span class=\"line\">                self.declaredHTMLEncoding = xml_encoding</span><br><span class=\"line\">            <span class=\"keyword\">if</span> sniffed_xml_encoding <span class=\"keyword\">and</span> \\</span><br><span class=\"line\">               (xml_encoding <span class=\"keyword\">in</span> (<span class=\"string\">'iso-10646-ucs-2'</span>, <span class=\"string\">'ucs-2'</span>, <span class=\"string\">'csunicode'</span>,</span><br><span class=\"line\">                                 <span class=\"string\">'iso-10646-ucs-4'</span>, <span class=\"string\">'ucs-4'</span>, <span class=\"string\">'csucs4'</span>,</span><br><span class=\"line\">                                 <span class=\"string\">'utf-16'</span>, <span class=\"string\">'utf-32'</span>, <span class=\"string\">'utf_16'</span>, <span class=\"string\">'utf_32'</span>,</span><br><span class=\"line\">                                 <span class=\"string\">'utf16'</span>, <span class=\"string\">'u16'</span>)):</span><br><span class=\"line\">                xml_encoding = sniffed_xml_encoding</span><br><span class=\"line\">        <span class=\"keyword\">return</span> xml_data, xml_encoding, sniffed_xml_encoding</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">find_codec</span><span class=\"params\">(self, charset)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._codec(self.CHARSET_ALIASES.get(charset, charset)) \\</span><br><span class=\"line\">               <span class=\"keyword\">or</span> (charset <span class=\"keyword\">and</span> self._codec(charset.replace(<span class=\"string\">\"-\"</span>, <span class=\"string\">\"\"</span>))) \\</span><br><span class=\"line\">               <span class=\"keyword\">or</span> (charset <span class=\"keyword\">and</span> self._codec(charset.replace(<span class=\"string\">\"-\"</span>, <span class=\"string\">\"_\"</span>))) \\</span><br><span class=\"line\">               <span class=\"keyword\">or</span> charset</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_codec</span><span class=\"params\">(self, charset)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> charset: <span class=\"keyword\">return</span> charset</span><br><span class=\"line\">        codec = <span class=\"keyword\">None</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            codecs.lookup(charset)</span><br><span class=\"line\">            codec = charset</span><br><span class=\"line\">        <span class=\"keyword\">except</span> (LookupError, ValueError):</span><br><span class=\"line\">            <span class=\"keyword\">pass</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> codec</span><br><span class=\"line\"></span><br><span class=\"line\">    EBCDIC_TO_ASCII_MAP = <span class=\"keyword\">None</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_ebcdic_to_ascii</span><span class=\"params\">(self, s)</span>:</span></span><br><span class=\"line\">        c = self.__class__</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> c.EBCDIC_TO_ASCII_MAP:</span><br><span class=\"line\">            emap = (<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">156</span>,<span class=\"number\">9</span>,<span class=\"number\">134</span>,<span class=\"number\">127</span>,<span class=\"number\">151</span>,<span class=\"number\">141</span>,<span class=\"number\">142</span>,<span class=\"number\">11</span>,<span class=\"number\">12</span>,<span class=\"number\">13</span>,<span class=\"number\">14</span>,<span class=\"number\">15</span>,</span><br><span class=\"line\">                    <span class=\"number\">16</span>,<span class=\"number\">17</span>,<span class=\"number\">18</span>,<span class=\"number\">19</span>,<span class=\"number\">157</span>,<span class=\"number\">133</span>,<span class=\"number\">8</span>,<span class=\"number\">135</span>,<span class=\"number\">24</span>,<span class=\"number\">25</span>,<span class=\"number\">146</span>,<span class=\"number\">143</span>,<span class=\"number\">28</span>,<span class=\"number\">29</span>,<span class=\"number\">30</span>,<span class=\"number\">31</span>,</span><br><span class=\"line\">                    <span class=\"number\">128</span>,<span class=\"number\">129</span>,<span class=\"number\">130</span>,<span class=\"number\">131</span>,<span class=\"number\">132</span>,<span class=\"number\">10</span>,<span class=\"number\">23</span>,<span class=\"number\">27</span>,<span class=\"number\">136</span>,<span class=\"number\">137</span>,<span class=\"number\">138</span>,<span class=\"number\">139</span>,<span class=\"number\">140</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,</span><br><span class=\"line\">                    <span class=\"number\">144</span>,<span class=\"number\">145</span>,<span class=\"number\">22</span>,<span class=\"number\">147</span>,<span class=\"number\">148</span>,<span class=\"number\">149</span>,<span class=\"number\">150</span>,<span class=\"number\">4</span>,<span class=\"number\">152</span>,<span class=\"number\">153</span>,<span class=\"number\">154</span>,<span class=\"number\">155</span>,<span class=\"number\">20</span>,<span class=\"number\">21</span>,<span class=\"number\">158</span>,<span class=\"number\">26</span>,</span><br><span class=\"line\">                    <span class=\"number\">32</span>,<span class=\"number\">160</span>,<span class=\"number\">161</span>,<span class=\"number\">162</span>,<span class=\"number\">163</span>,<span class=\"number\">164</span>,<span class=\"number\">165</span>,<span class=\"number\">166</span>,<span class=\"number\">167</span>,<span class=\"number\">168</span>,<span class=\"number\">91</span>,<span class=\"number\">46</span>,<span class=\"number\">60</span>,<span class=\"number\">40</span>,<span class=\"number\">43</span>,<span class=\"number\">33</span>,</span><br><span class=\"line\">                    <span class=\"number\">38</span>,<span class=\"number\">169</span>,<span class=\"number\">170</span>,<span class=\"number\">171</span>,<span class=\"number\">172</span>,<span class=\"number\">173</span>,<span class=\"number\">174</span>,<span class=\"number\">175</span>,<span class=\"number\">176</span>,<span class=\"number\">177</span>,<span class=\"number\">93</span>,<span class=\"number\">36</span>,<span class=\"number\">42</span>,<span class=\"number\">41</span>,<span class=\"number\">59</span>,<span class=\"number\">94</span>,</span><br><span class=\"line\">                    <span class=\"number\">45</span>,<span class=\"number\">47</span>,<span class=\"number\">178</span>,<span class=\"number\">179</span>,<span class=\"number\">180</span>,<span class=\"number\">181</span>,<span class=\"number\">182</span>,<span class=\"number\">183</span>,<span class=\"number\">184</span>,<span class=\"number\">185</span>,<span class=\"number\">124</span>,<span class=\"number\">44</span>,<span class=\"number\">37</span>,<span class=\"number\">95</span>,<span class=\"number\">62</span>,<span class=\"number\">63</span>,</span><br><span class=\"line\">                    <span class=\"number\">186</span>,<span class=\"number\">187</span>,<span class=\"number\">188</span>,<span class=\"number\">189</span>,<span class=\"number\">190</span>,<span class=\"number\">191</span>,<span class=\"number\">192</span>,<span class=\"number\">193</span>,<span class=\"number\">194</span>,<span class=\"number\">96</span>,<span class=\"number\">58</span>,<span class=\"number\">35</span>,<span class=\"number\">64</span>,<span class=\"number\">39</span>,<span class=\"number\">61</span>,<span class=\"number\">34</span>,</span><br><span class=\"line\">                    <span class=\"number\">195</span>,<span class=\"number\">97</span>,<span class=\"number\">98</span>,<span class=\"number\">99</span>,<span class=\"number\">100</span>,<span class=\"number\">101</span>,<span class=\"number\">102</span>,<span class=\"number\">103</span>,<span class=\"number\">104</span>,<span class=\"number\">105</span>,<span class=\"number\">196</span>,<span class=\"number\">197</span>,<span class=\"number\">198</span>,<span class=\"number\">199</span>,<span class=\"number\">200</span>,</span><br><span class=\"line\">                    <span class=\"number\">201</span>,<span class=\"number\">202</span>,<span class=\"number\">106</span>,<span class=\"number\">107</span>,<span class=\"number\">108</span>,<span class=\"number\">109</span>,<span class=\"number\">110</span>,<span class=\"number\">111</span>,<span class=\"number\">112</span>,<span class=\"number\">113</span>,<span class=\"number\">114</span>,<span class=\"number\">203</span>,<span class=\"number\">204</span>,<span class=\"number\">205</span>,</span><br><span class=\"line\">                    <span class=\"number\">206</span>,<span class=\"number\">207</span>,<span class=\"number\">208</span>,<span class=\"number\">209</span>,<span class=\"number\">126</span>,<span class=\"number\">115</span>,<span class=\"number\">116</span>,<span class=\"number\">117</span>,<span class=\"number\">118</span>,<span class=\"number\">119</span>,<span class=\"number\">120</span>,<span class=\"number\">121</span>,<span class=\"number\">122</span>,<span class=\"number\">210</span>,</span><br><span class=\"line\">                    <span class=\"number\">211</span>,<span class=\"number\">212</span>,<span class=\"number\">213</span>,<span class=\"number\">214</span>,<span class=\"number\">215</span>,<span class=\"number\">216</span>,<span class=\"number\">217</span>,<span class=\"number\">218</span>,<span class=\"number\">219</span>,<span class=\"number\">220</span>,<span class=\"number\">221</span>,<span class=\"number\">222</span>,<span class=\"number\">223</span>,<span class=\"number\">224</span>,</span><br><span class=\"line\">                    <span class=\"number\">225</span>,<span class=\"number\">226</span>,<span class=\"number\">227</span>,<span class=\"number\">228</span>,<span class=\"number\">229</span>,<span class=\"number\">230</span>,<span class=\"number\">231</span>,<span class=\"number\">123</span>,<span class=\"number\">65</span>,<span class=\"number\">66</span>,<span class=\"number\">67</span>,<span class=\"number\">68</span>,<span class=\"number\">69</span>,<span class=\"number\">70</span>,<span class=\"number\">71</span>,<span class=\"number\">72</span>,</span><br><span class=\"line\">                    <span class=\"number\">73</span>,<span class=\"number\">232</span>,<span class=\"number\">233</span>,<span class=\"number\">234</span>,<span class=\"number\">235</span>,<span class=\"number\">236</span>,<span class=\"number\">237</span>,<span class=\"number\">125</span>,<span class=\"number\">74</span>,<span class=\"number\">75</span>,<span class=\"number\">76</span>,<span class=\"number\">77</span>,<span class=\"number\">78</span>,<span class=\"number\">79</span>,<span class=\"number\">80</span>,<span class=\"number\">81</span>,</span><br><span class=\"line\">                    <span class=\"number\">82</span>,<span class=\"number\">238</span>,<span class=\"number\">239</span>,<span class=\"number\">240</span>,<span class=\"number\">241</span>,<span class=\"number\">242</span>,<span class=\"number\">243</span>,<span class=\"number\">92</span>,<span class=\"number\">159</span>,<span class=\"number\">83</span>,<span class=\"number\">84</span>,<span class=\"number\">85</span>,<span class=\"number\">86</span>,<span class=\"number\">87</span>,<span class=\"number\">88</span>,<span class=\"number\">89</span>,</span><br><span class=\"line\">                    <span class=\"number\">90</span>,<span class=\"number\">244</span>,<span class=\"number\">245</span>,<span class=\"number\">246</span>,<span class=\"number\">247</span>,<span class=\"number\">248</span>,<span class=\"number\">249</span>,<span class=\"number\">48</span>,<span class=\"number\">49</span>,<span class=\"number\">50</span>,<span class=\"number\">51</span>,<span class=\"number\">52</span>,<span class=\"number\">53</span>,<span class=\"number\">54</span>,<span class=\"number\">55</span>,<span class=\"number\">56</span>,<span class=\"number\">57</span>,</span><br><span class=\"line\">                    <span class=\"number\">250</span>,<span class=\"number\">251</span>,<span class=\"number\">252</span>,<span class=\"number\">253</span>,<span class=\"number\">254</span>,<span class=\"number\">255</span>)</span><br><span class=\"line\">            <span class=\"keyword\">import</span> string</span><br><span class=\"line\">            c.EBCDIC_TO_ASCII_MAP = string.maketrans( \\</span><br><span class=\"line\">            <span class=\"string\">''</span>.join(map(chr, range(<span class=\"number\">256</span>))), <span class=\"string\">''</span>.join(map(chr, emap)))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s.translate(c.EBCDIC_TO_ASCII_MAP)</span><br><span class=\"line\"></span><br><span class=\"line\">    MS_CHARS = &#123; <span class=\"string\">'\\x80'</span> : (<span class=\"string\">'euro'</span>, <span class=\"string\">'20AC'</span>),</span><br><span class=\"line\">                 <span class=\"string\">'\\x81'</span> : <span class=\"string\">' '</span>,</span><br><span class=\"line\">                 <span class=\"string\">'\\x82'</span> : (<span class=\"string\">'sbquo'</span>, <span class=\"string\">'201A'</span>),</span><br><span class=\"line\">                 <span class=\"string\">'\\x83'</span> : (<span class=\"string\">'fnof'</span>, <span class=\"string\">'192'</span>),</span><br><span class=\"line\">                 <span class=\"string\">'\\x84'</span> : (<span class=\"string\">'bdquo'</span>, <span class=\"string\">'201E'</span>),</span><br><span class=\"line\">                 <span class=\"string\">'\\x85'</span> : (<span class=\"string\">'hellip'</span>, <span class=\"string\">'2026'</span>),</span><br><span class=\"line\">                 <span class=\"string\">'\\x86'</span> : (<span class=\"string\">'dagger'</span>, <span class=\"string\">'2020'</span>),</span><br><span class=\"line\">                 <span class=\"string\">'\\x87'</span> : (<span class=\"string\">'Dagger'</span>, <span class=\"string\">'2021'</span>),</span><br><span class=\"line\">                 <span class=\"string\">'\\x88'</span> : (<span class=\"string\">'circ'</span>, <span class=\"string\">'2C6'</span>),</span><br><span class=\"line\">                 <span class=\"string\">'\\x89'</span> : (<span class=\"string\">'permil'</span>, <span class=\"string\">'2030'</span>),</span><br><span class=\"line\">                 <span class=\"string\">'\\x8A'</span> : (<span class=\"string\">'Scaron'</span>, <span class=\"string\">'160'</span>),</span><br><span class=\"line\">                 <span class=\"string\">'\\x8B'</span> : (<span class=\"string\">'lsaquo'</span>, <span class=\"string\">'2039'</span>),</span><br><span class=\"line\">                 <span class=\"string\">'\\x8C'</span> : (<span class=\"string\">'OElig'</span>, <span class=\"string\">'152'</span>),</span><br><span class=\"line\">                 <span class=\"string\">'\\x8D'</span> : <span class=\"string\">'?'</span>,</span><br><span class=\"line\">                 <span class=\"string\">'\\x8E'</span> : (<span class=\"string\">'#x17D'</span>, <span class=\"string\">'17D'</span>),</span><br><span class=\"line\">                 <span class=\"string\">'\\x8F'</span> : <span class=\"string\">'?'</span>,</span><br><span class=\"line\">                 <span class=\"string\">'\\x90'</span> : <span class=\"string\">'?'</span>,</span><br><span class=\"line\">                 <span class=\"string\">'\\x91'</span> : (<span class=\"string\">'lsquo'</span>, <span class=\"string\">'2018'</span>),</span><br><span class=\"line\">                 <span class=\"string\">'\\x92'</span> : (<span class=\"string\">'rsquo'</span>, <span class=\"string\">'2019'</span>),</span><br><span class=\"line\">                 <span class=\"string\">'\\x93'</span> : (<span class=\"string\">'ldquo'</span>, <span class=\"string\">'201C'</span>),</span><br><span class=\"line\">                 <span class=\"string\">'\\x94'</span> : (<span class=\"string\">'rdquo'</span>, <span class=\"string\">'201D'</span>),</span><br><span class=\"line\">                 <span class=\"string\">'\\x95'</span> : (<span class=\"string\">'bull'</span>, <span class=\"string\">'2022'</span>),</span><br><span class=\"line\">                 <span class=\"string\">'\\x96'</span> : (<span class=\"string\">'ndash'</span>, <span class=\"string\">'2013'</span>),</span><br><span class=\"line\">                 <span class=\"string\">'\\x97'</span> : (<span class=\"string\">'mdash'</span>, <span class=\"string\">'2014'</span>),</span><br><span class=\"line\">                 <span class=\"string\">'\\x98'</span> : (<span class=\"string\">'tilde'</span>, <span class=\"string\">'2DC'</span>),</span><br><span class=\"line\">                 <span class=\"string\">'\\x99'</span> : (<span class=\"string\">'trade'</span>, <span class=\"string\">'2122'</span>),</span><br><span class=\"line\">                 <span class=\"string\">'\\x9a'</span> : (<span class=\"string\">'scaron'</span>, <span class=\"string\">'161'</span>),</span><br><span class=\"line\">                 <span class=\"string\">'\\x9b'</span> : (<span class=\"string\">'rsaquo'</span>, <span class=\"string\">'203A'</span>),</span><br><span class=\"line\">                 <span class=\"string\">'\\x9c'</span> : (<span class=\"string\">'oelig'</span>, <span class=\"string\">'153'</span>),</span><br><span class=\"line\">                 <span class=\"string\">'\\x9d'</span> : <span class=\"string\">'?'</span>,</span><br><span class=\"line\">                 <span class=\"string\">'\\x9e'</span> : (<span class=\"string\">'#x17E'</span>, <span class=\"string\">'17E'</span>),</span><br><span class=\"line\">                 <span class=\"string\">'\\x9f'</span> : (<span class=\"string\">'Yuml'</span>, <span class=\"string\">''</span>),&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#######################################################################</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#By default, act as an HTML pretty-printer.</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    <span class=\"keyword\">import</span> sys</span><br><span class=\"line\">    soup = BeautifulSoup(sys.stdin)</span><br><span class=\"line\">    <span class=\"keyword\">print</span> soup.prettify()</span><br></pre></td></tr></table></figure></p>\n","categories":["Python"],"tags":["Python","爬虫"]},{"title":"简明Python教程-15.更多Python的内容","url":"http://dotrabbit.tk/Python/000107-简明Python教程-15.更多Python的内容/","content":"<h1 id=\"15-1-特殊的方法\"><a href=\"#15-1-特殊的方法\" class=\"headerlink\" title=\"15.1 特殊的方法\"></a>15.1 特殊的方法</h1><p>在类中，有一些特殊的方法具有特殊的意义，例如__init__和__del__方法<br>一般来说，特殊的方法都被用来模仿某个行为<br>例如，想为自己的类使用myclass[key]这样的索引操作，只需要实现__getitem__()方法即可(Python对list类就是这样做的)<br>下表列出了一些有用的特殊方法，Python参考手册中有所有特殊方法的庞大列表</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>__init__(self,…)</td>\n<td>这个方法在新建对象恰好要被返回使用之前被调用。</td>\n</tr>\n<tr>\n<td>__del__(self)</td>\n<td>恰好在对象要被删除之前调用。</td>\n</tr>\n<tr>\n<td>__str__(self)</td>\n<td>在我们对对象使用print语句或是使用str()的时候调用。</td>\n</tr>\n<tr>\n<td>__lt__(self,other)</td>\n<td>当使用 小于 运算符（&lt;）的时候调用。类似地，对于所有的运算符（+，&gt;等等）都有特殊的方法。</td>\n</tr>\n<tr>\n<td>__getitem__(self,key)</td>\n<td>使用x[key]索引操作符的时候调用。</td>\n</tr>\n<tr>\n<td>__len__(self)</td>\n<td>对序列对象使用内建的len()函数的时候调用。</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"15-2-单语句块\"><a href=\"#15-2-单语句块\" class=\"headerlink\" title=\"15.2 单语句块\"></a>15.2 单语句块</h1><p>Python中每一个语句块，是通过缩进层次来与其他块区分开的<br>但当语句块只包含一句语句时，可以在条件语句或循环语句的同一行指明它：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; flag = True</span><br><span class=\"line\">&gt;&gt;&gt; <span class=\"keyword\">if</span> flag: <span class=\"built_in\">print</span> <span class=\"string\">'Yes'</span></span><br><span class=\"line\">...</span><br><span class=\"line\">Yes</span><br></pre></td></tr></table></figure></p>\n<p>单个语句被直接使用，而不是作为一个独立的块，这样程序显得简短<br>但强烈建议不要使用这种缩略方法，主要理由是使用恰当地缩进可以方便地添加额外的语句<br>并且在使用交互模式的Python解释器时会出现非预期的效果</p>\n<h1 id=\"15-3-列表综合\"><a href=\"#15-3-列表综合\" class=\"headerlink\" title=\"15.3 列表综合\"></a>15.3 列表综合</h1><p>通过列表综合，可以从一个已有的列表，导出一个新的列表<br>例如，有一个数的列表，想得到一个对应的列表，使其中所有大于2的数都是原来的2倍</p>\n<h2 id=\"使用列表综合\"><a href=\"#使用列表综合\" class=\"headerlink\" title=\"使用列表综合\"></a>使用列表综合</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># Filename: list_comprehension.py</span></span><br><span class=\"line\"></span><br><span class=\"line\">listone = [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\">listtwo = [<span class=\"number\">2</span>*i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> listone <span class=\"keyword\">if</span> i &gt; <span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"keyword\">print</span> listtwo</span><br></pre></td></tr></table></figure>\n<h2 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python list_comprehension.py</span><br><span class=\"line\">[6, 8]</span><br></pre></td></tr></table></figure>\n<h2 id=\"如何工作\"><a href=\"#如何工作\" class=\"headerlink\" title=\"如何工作\"></a>如何工作</h2><p>为满足条件(if i &gt; 2)的数指定了一个操作(2*i)，从而导出一个新的列表<br>原来的列表并没有发生变化<br>列表综合相对于循环，提供了一种更加精确、简洁、清楚的方法来完成相同的工作</p>\n<h1 id=\"15-4-在函数中接收元组和列表\"><a href=\"#15-4-在函数中接收元组和列表\" class=\"headerlink\" title=\"15.4 在函数中接收元组和列表\"></a>15.4 在函数中接收元组和列表</h1><p>在函数要接收元组或字典形式的参数的时候，可以使用*和**前缀<br>这种方法在函数需要获取可变数量的参数的时候特别有用<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; def powersum(power, *args):</span><br><span class=\"line\">...     <span class=\"string\">''</span><span class=\"string\">'Return the sum of each argument raised to specified power.'</span><span class=\"string\">''</span></span><br><span class=\"line\">...     total = 0</span><br><span class=\"line\">...     <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> args:</span><br><span class=\"line\">...          total += pow(i, power)</span><br><span class=\"line\">...     <span class=\"built_in\">return</span> total</span><br><span class=\"line\">...</span><br><span class=\"line\">&gt;&gt;&gt; powersum(2, 3, 4)</span><br><span class=\"line\">25</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; powersum(2, 10)</span><br><span class=\"line\">100</span><br></pre></td></tr></table></figure></p>\n<p>args变量前有*前缀，所有多余的参数都会作为一个元组，存储在args中<br>如果使用的是**前缀，所有多余的参数会被认为是一个字典的键值对</p>\n<h1 id=\"15-5-lambda形式\"><a href=\"#15-5-lambda形式\" class=\"headerlink\" title=\"15.5 lambda形式\"></a>15.5 lambda形式</h1><p>lambda语句用来创建新的函数对象，并在运行时返回它们：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># Filename: lambda.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">make_repeater</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">lambda</span> s: s*n</span><br><span class=\"line\"></span><br><span class=\"line\">twice = make_repeater(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> twice(<span class=\"string\">'word'</span>)</span><br><span class=\"line\"><span class=\"keyword\">print</span> twice(<span class=\"number\">5</span>)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"输出-1\"><a href=\"#输出-1\" class=\"headerlink\" title=\"输出\"></a>输出</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python lambda.py</span><br><span class=\"line\">wordword</span><br><span class=\"line\">10</span><br></pre></td></tr></table></figure>\n<h2 id=\"如何工作-1\"><a href=\"#如何工作-1\" class=\"headerlink\" title=\"如何工作\"></a>如何工作</h2><p>make_repeater函数在运行时创建新的函数对象，并返回它<br>本质上，lambda需要一个参数，后面仅跟<strong>单个表达式</strong>作为函数体，并由新建的函数返回表达式的值<br>注意，即便是print语句也不能用在lambda形式中，只能使用<strong>表达式</strong></p>\n<h1 id=\"15-6-exec和eval语句\"><a href=\"#15-6-exec和eval语句\" class=\"headerlink\" title=\"15.6 exec和eval语句\"></a>15.6 exec和eval语句</h1><p>exec语句用来执行储存在字符串或文件中的Python语句<br>例如，可以在运行时生成一个包含Python代码的字符串，然后使用exec语句执行这些语句：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; <span class=\"built_in\">exec</span> <span class=\"string\">'print \"Hello World\"'</span></span><br><span class=\"line\">Hello World</span><br></pre></td></tr></table></figure></p>\n<p>evel语句用来计算存储在字符串中的有效Python表达式：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; <span class=\"built_in\">eval</span>(<span class=\"string\">'2*3'</span>)</span><br><span class=\"line\">6</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"15-7-assert语句\"><a href=\"#15-7-assert语句\" class=\"headerlink\" title=\"15.7 assert语句\"></a>15.7 assert语句</h1><p>assert语句用来声明某个条件是真的<br>例如，检验一个列表中至少有一个元素，并在非真的时候引发一个错误，则应使用assert语句，当assert语句失败时，会引发一个AssertionError<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; mylist = [<span class=\"string\">'item'</span>]</span><br><span class=\"line\">&gt;&gt;&gt; assert len(mylist) &gt;= 1</span><br><span class=\"line\">&gt;&gt;&gt; mylist.pop()</span><br><span class=\"line\"><span class=\"string\">'item'</span></span><br><span class=\"line\">&gt;&gt;&gt; assert len(mylist) &gt;= 1</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line 1, <span class=\"keyword\">in</span> ?</span><br><span class=\"line\">AssertionError</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"15-8-repr函数\"><a href=\"#15-8-repr函数\" class=\"headerlink\" title=\"15.8 repr函数\"></a>15.8 repr函数</h1><p>repr函数用来取得对象的规范字符串表示<br>反引号(也称转换符)也可以完成相同的功能，大多数时候有eval(repr(object)) == object<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; i = []</span><br><span class=\"line\">&gt;&gt;&gt; i.append(<span class=\"string\">'item'</span>)</span><br><span class=\"line\">&gt;&gt;&gt; `i`</span><br><span class=\"line\"><span class=\"string\">\"['item']\"</span></span><br><span class=\"line\">&gt;&gt;&gt; repr(i)</span><br><span class=\"line\"><span class=\"string\">\"['item']\"</span></span><br></pre></td></tr></table></figure></p>\n<p>基本上，repr函数和反引号用来获取对象的可打印的表达形式<br>可以通过定义类的__repr__方法，来控制对象在被repr函数调用时返回的内容</p>\n","categories":["Python"],"tags":["Python"]},{"title":"简明Python教程-14.Python标准库","url":"http://dotrabbit.tk/Python/000106-简明Python教程-14.Python标准库/","content":"<h1 id=\"14-1-简介\"><a href=\"#14-1-简介\" class=\"headerlink\" title=\"14.1 简介\"></a>14.1 简介</h1><p>Python标准库是随Python附带安装的，包含大量有用的模块<br>熟悉Python标准库十分重要，可以简单快捷地解决大多数问题<br>Python附带安装的文档中，Python标准库一节可以了解Python标准库中所有模块的完整内容</p>\n<h1 id=\"14-2-sys模块\"><a href=\"#14-2-sys模块\" class=\"headerlink\" title=\"14.2 sys模块\"></a>14.2 sys模块</h1><p>sys模块包含系统对应的功能，如已经学习的包含命令行参数sys.argv列表</p>\n<h2 id=\"命令行参数\"><a href=\"#命令行参数\" class=\"headerlink\" title=\"命令行参数\"></a>命令行参数</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># Filename: cat.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">readfile</span><span class=\"params\">(filename)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">'''Print a file to the standard output.'''</span></span><br><span class=\"line\">    f = file(filename)</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">        line = f.readline()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> len(line) == <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> line, <span class=\"comment\"># notice comma</span></span><br><span class=\"line\">    f.close()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Script starts from here</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> len(sys.argv) &lt; <span class=\"number\">2</span>:</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'No action specified.'</span></span><br><span class=\"line\">    sys.exit()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> sys.argv[<span class=\"number\">1</span>].startswith(<span class=\"string\">'--'</span>):</span><br><span class=\"line\">    option = sys.argv[<span class=\"number\">1</span>][<span class=\"number\">2</span>:]</span><br><span class=\"line\">    <span class=\"comment\"># fetch sys.argv[1] but without the first two characters</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> option == <span class=\"string\">'version'</span>:</span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'Version 1.2'</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> option == <span class=\"string\">'help'</span>:</span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'''\\</span></span><br><span class=\"line\"><span class=\"string\">This program prints files to the standard output.</span></span><br><span class=\"line\"><span class=\"string\">Any number of files can be specified.</span></span><br><span class=\"line\"><span class=\"string\">Options include:</span></span><br><span class=\"line\"><span class=\"string\">  --version : Prints the version number</span></span><br><span class=\"line\"><span class=\"string\">  --help    : Display this help'''</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'Unknown option.'</span></span><br><span class=\"line\">    sys.exit()</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> filename <span class=\"keyword\">in</span> sys.argv[<span class=\"number\">1</span>:]:</span><br><span class=\"line\">        readfile(filename)</span><br></pre></td></tr></table></figure>\n<h2 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python cat.py</span><br><span class=\"line\">No action specified.</span><br><span class=\"line\"></span><br><span class=\"line\">$ python cat.py --<span class=\"built_in\">help</span></span><br><span class=\"line\">This program prints files to the standard output.</span><br><span class=\"line\">Any number of files can be specified.</span><br><span class=\"line\">Options include:</span><br><span class=\"line\">  --version : Prints the version number</span><br><span class=\"line\">  --<span class=\"built_in\">help</span>    : Display this <span class=\"built_in\">help</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ python cat.py --version</span><br><span class=\"line\">Version 1.2</span><br><span class=\"line\"></span><br><span class=\"line\">$ python cat.py --nonsense</span><br><span class=\"line\">Unknown option.</span><br><span class=\"line\"></span><br><span class=\"line\">$ python cat.py poem.txt</span><br><span class=\"line\">Programming is fun</span><br><span class=\"line\">When the work is <span class=\"keyword\">done</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> you wanna make your work also fun:</span><br><span class=\"line\">        use Python!</span><br></pre></td></tr></table></figure>\n<h2 id=\"如何工作\"><a href=\"#如何工作\" class=\"headerlink\" title=\"如何工作\"></a>如何工作</h2><p>程序实现Linux/Unix系统中的<strong>cat</strong>命令，打印输出指明的文本文件内容<br>在Python程序运行时，即不在交互模式下，sys.argv列表中至少有一个项目，即当前运行的程序名称，作为sys.argv[0]，其他命令行参数在此项目之后<br>程序提供了选项来提供更多内容，使用第一个参数检验程序选项<br>如果使用–version选项，则程序会打印版本号，如果使用–help选项，程序打印程序的解释<br>使用sys.exit函数退出运行的程序(参见help(sys.exit))<br>如果提供文件名，程序简单地打印出每个文件的每一行，按照命令行中的顺序逐个文件打印<br>(cat是concatenate的缩写，如它的名字，可以输出打印一个文件，或把两个及以上文件连接在一起打印)</p>\n<h2 id=\"更多sys的内容\"><a href=\"#更多sys的内容\" class=\"headerlink\" title=\"更多sys的内容\"></a>更多sys的内容</h2><p>sys.version字符串，安装的Python版本信息<br>sys.version_info元组，以元组形式给出安装的Python版本信息<br>sys.stdin、sys.stdout、sys.stderr分别对应程序的标准输入、标准输出、标准错误流</p>\n<h1 id=\"14-3-os模块\"><a href=\"#14-3-os模块\" class=\"headerlink\" title=\"14.3 os模块\"></a>14.3 os模块</h1><p>包括普遍的操作系统功能，可以保证程序平台无关，即不需改动，就可以在Linux和Windows下运行<br>例如:<br>os.sep字符串，提供操作系统特定的路径分割符<br>os.name字符串，指示正在使用的平台。如Windows返回’nt’，Linux/Unix返回’posix’<br>os.getcwd()，得到当前工作目录，即当前Python脚本工作的目录路径<br>os.getenv()，读取环境变量<br>os.putenv()，设置环境变量<br>os.listdir()，返回制定目录下的所有文件和目录名<br>os.remove()，删除一个文件<br>os.system()，运行shell命令<br>os.linesep字符串，给出当前平台使用的行终止符。如Windows使用’\\r\\n’，Linux使用’\\n’，Mac使用’\\r’<br>os.path.split()，返回一个路径的目录名和文件名<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; os.path.split(<span class=\"string\">'/home/swaroop/byte/code/poem.txt'</span>)</span><br><span class=\"line\">(<span class=\"string\">'/home/swaroop/byte/code'</span>, <span class=\"string\">'poem.txt'</span>)</span><br></pre></td></tr></table></figure></p>\n<p>os.path.isfile()，检验给出的路径是不是文件<br>os.path.isdir()，检验给出的路径是不是目录<br>os.path.exists()，检验给出的路径是否存在<br>可以利用Python标准文档来探索相关函数和变量的详细知识，或使用help(sys)</p>\n","categories":["Python"],"tags":["Python"]},{"title":"简明Python教程-13.异常","url":"http://dotrabbit.tk/Python/000105-简明Python教程-13.异常/","content":"<p>当读某个文件而文件不存在，或者程序运行的时候不小心删除了，等<em>异常</em>的状况发生时，可以使用<strong>异常</strong>来处理<br>例如程序中有无效的语句，Python会<strong>引发</strong>并告诉你那里有一个<strong>错误</strong>，从而处理这种情况</p>\n<h1 id=\"13-1-错误\"><a href=\"#13-1-错误\" class=\"headerlink\" title=\"13.1 错误\"></a>13.1 错误</h1><p>假如把print误拼为Print，则Python会<em>引发</em>一个语法错误：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; Print <span class=\"string\">'Hello World'</span></span><br><span class=\"line\">    File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line 1</span><br><span class=\"line\">      Print <span class=\"string\">'Hello World'</span></span><br><span class=\"line\">                        ^</span><br><span class=\"line\">SyntaxError: invalid syntax</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; <span class=\"built_in\">print</span> <span class=\"string\">'Hello World'</span></span><br><span class=\"line\">Hello World</span><br></pre></td></tr></table></figure></p>\n<p>有一个SyntaxError被引发，并且检测到的错误位置也打印了出来，这是<em>错误处理器</em>所做的工作</p>\n<h1 id=\"13-2-try-except\"><a href=\"#13-2-try-except\" class=\"headerlink\" title=\"13.2 try..except\"></a>13.2 try..except</h1><p>在读取用户输入时，按Ctrl-d：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; s = raw_input(<span class=\"string\">'Enter something --&gt; '</span>)</span><br><span class=\"line\">Enter something --&gt; Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line 1, <span class=\"keyword\">in</span> ?</span><br><span class=\"line\">EOFError</span><br></pre></td></tr></table></figure></p>\n<p>Python引发了一个称谓EOFError的错误，意味着程序发现一个不期望的<em>文件尾</em>(由Ctrl-d表示)</p>\n<h2 id=\"处理异常\"><a href=\"#处理异常\" class=\"headerlink\" title=\"处理异常\"></a>处理异常</h2><p>使用try..except语句来处理异常<br>把通常的语句放在try块中，把错误处理语句放在except块中<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># Filename: try_except.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    s = raw_input(<span class=\"string\">'Enter something --&gt; '</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span> EOFError:</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'\\nWhy did you do an EOF on me?'</span></span><br><span class=\"line\">    sys.exit() <span class=\"comment\"># exit the program</span></span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'\\nSome error/exception occurred.'</span></span><br><span class=\"line\">    <span class=\"comment\"># here, we are not exiting the program</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'Done'</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python try_except.py</span><br><span class=\"line\">Enter something --&gt;</span><br><span class=\"line\">Why did you <span class=\"keyword\">do</span> an EOF on me?</span><br><span class=\"line\"></span><br><span class=\"line\">$ python try_except.py</span><br><span class=\"line\">Enter something --&gt; Python is exceptional!</span><br><span class=\"line\">Done</span><br></pre></td></tr></table></figure>\n<h2 id=\"如何工作\"><a href=\"#如何工作\" class=\"headerlink\" title=\"如何工作\"></a>如何工作</h2><p>把所有可能引发错误的语句放在try块中，然后在except从句块中处理所有的错误和异常<br>except从句可以处理单一的错误或异常，或者一组包括在圆括号内的错误或异常<br>如果没有给出错误或异常名称，则处理<em>所有的</em>错误和异常<br>对于每个try从句，至少都有一个相关联的except语句<br>如果某个错误或异常没有被处理，则默认地Python处理器就会被调用，它会终止程序的运行，并打印一个消息<br>可以让try..except块关联上一个else从句，当没有异常发生时，else从句将被执行</p>\n<h1 id=\"13-3-引发异常\"><a href=\"#13-3-引发异常\" class=\"headerlink\" title=\"13.3 引发异常\"></a>13.3 引发异常</h1><p>使用raise语句<em>引发</em>异常<br>指明错误/异常的名称，和伴随异常<em>触发的</em>异常对象<br>可以引发的错误或异常应分别是Error或Exception类的子类</p>\n<h2 id=\"如何引发异常\"><a href=\"#如何引发异常\" class=\"headerlink\" title=\"如何引发异常\"></a>如何引发异常</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># Filename: raising.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShortInputException</span><span class=\"params\">(Exception)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">'''A user-defined exception class.'''</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, length, atleast)</span>:</span></span><br><span class=\"line\">        Exception.__init__(self)</span><br><span class=\"line\">        self.length = length</span><br><span class=\"line\">        self.atleast = atleast</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    s = raw_input(<span class=\"string\">'Enter something --&gt; '</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(s) &lt; <span class=\"number\">3</span>:</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> ShortInputException(len(s), <span class=\"number\">3</span>)</span><br><span class=\"line\">    <span class=\"comment\"># Other work can continue as usual here</span></span><br><span class=\"line\"><span class=\"keyword\">except</span> EOFError:</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'\\nWhy did you do an EOF on me?'</span></span><br><span class=\"line\"><span class=\"keyword\">except</span> ShortInputException, x:</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'ShortInputException: The input was of length %d, \\</span></span><br><span class=\"line\"><span class=\"string\">          was expecting at least %d'</span> % (x.length, x.atleast)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'No exception was raised.'</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"输出-1\"><a href=\"#输出-1\" class=\"headerlink\" title=\"输出\"></a>输出</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python raising.py</span><br><span class=\"line\">Enter something --&gt;</span><br><span class=\"line\">Why did you <span class=\"keyword\">do</span> an EOF on me?</span><br><span class=\"line\"></span><br><span class=\"line\">$ python raising.py</span><br><span class=\"line\">Enter something --&gt; ab</span><br><span class=\"line\">ShortInputException: The input was of length 2, was expecting at least 3</span><br><span class=\"line\"></span><br><span class=\"line\">$ python raising.py</span><br><span class=\"line\">Enter something --&gt; abc</span><br><span class=\"line\">No exception was raised.</span><br></pre></td></tr></table></figure>\n<h2 id=\"如何工作-1\"><a href=\"#如何工作-1\" class=\"headerlink\" title=\"如何工作\"></a>如何工作</h2><p>例中创建一个自己的异常类型，ShortInputException类(可以使用任何预定义的异常/错误)<br>它有两个域——length是给定输入的长度，atleast是程序预期的最小长度<br>在except从句中，提供了错误类，和用来表示错误/异常对象的变量，(与函数调中的形参和实参概念类似)，使用异常对象的域来为用户打印消息</p>\n<h1 id=\"13-4-try-finally\"><a href=\"#13-4-try-finally\" class=\"headerlink\" title=\"13.4 try..finally\"></a>13.4 try..finally</h1><p>使用finally块，来完成无论异常发生与否都做的操作，如读文件时关闭文件<br>在一个try块下，可以同时使用except从句和finally块</p>\n<h1 id=\"使用finally\"><a href=\"#使用finally\" class=\"headerlink\" title=\"使用finally\"></a>使用finally</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># Filename: finally.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    f = file(<span class=\"string\">'poem.txt'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>: <span class=\"comment\"># our usual file-reading idiom</span></span><br><span class=\"line\">        line = f.readline()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> len(line) == <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"keyword\">print</span> line,</span><br><span class=\"line\"><span class=\"keyword\">finally</span>:</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'Cleaning up...closed the file'</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"输出-2\"><a href=\"#输出-2\" class=\"headerlink\" title=\"输出\"></a>输出</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python finally.py</span><br><span class=\"line\">Programming is fun</span><br><span class=\"line\">When the work is <span class=\"keyword\">done</span></span><br><span class=\"line\">Cleaning up...closed the file</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">\"finally.py\"</span>, line 12, <span class=\"keyword\">in</span> ?</span><br><span class=\"line\">    time.sleep(2)</span><br><span class=\"line\">KeyboardInterrupt</span><br></pre></td></tr></table></figure>\n<h2 id=\"如何工作-2\"><a href=\"#如何工作-2\" class=\"headerlink\" title=\"如何工作\"></a>如何工作</h2><p>在读文件时，打印每一行之前用time.sleep方法暂停2秒，按<strong>Ctrl-c</strong>中断/取消程序<br>KeyboardInterrupt异常被触发，程序退出，但在程序退出之前，finally从句仍然被执行，把文件关闭</p>\n","categories":["Python"],"tags":["Python"]},{"title":"简明Python教程-12.输入/输出","url":"http://dotrabbit.tk/Python/000104-简明Python教程-12.输入输出/","content":"<p>程序与用户交互时，可以使用raw_input和print语句，来完成获取输入和打印功能<br>对于输出，可以使用多种多样的str(字符串)类，如可以使用rjust方法来得到按一定宽度右对齐的字符串(可查看help(str))<br>另一个常用的输入/输出类型是处理文件。创建、读、写文件，是许多程序必须的能力</p>\n<h1 id=\"12-1-文件\"><a href=\"#12-1-文件\" class=\"headerlink\" title=\"12.1 文件\"></a>12.1 文件</h1><p>可以通过创建一个file类的对象来打开一个文件<br>分别使用file类的read、readline或write方法，并指定文件的打开模式，来恰当地读写文件<br>完成对文件的操作的时候，调用close方法来告诉Python完成了对文件的使用</p>\n<h2 id=\"使用文件\"><a href=\"#使用文件\" class=\"headerlink\" title=\"使用文件\"></a>使用文件</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># Filename: using_file.py</span></span><br><span class=\"line\"></span><br><span class=\"line\">poem = <span class=\"string\">'''\\</span></span><br><span class=\"line\"><span class=\"string\">Programming is fun</span></span><br><span class=\"line\"><span class=\"string\">When the work is done</span></span><br><span class=\"line\"><span class=\"string\">if you wanna make your work also fun:</span></span><br><span class=\"line\"><span class=\"string\">        use Python!</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"></span><br><span class=\"line\">f = file(<span class=\"string\">'poem.txt'</span>, <span class=\"string\">'w'</span>) <span class=\"comment\"># open for 'w'riting</span></span><br><span class=\"line\">f.write(poem) <span class=\"comment\"># write text to file</span></span><br><span class=\"line\">f.close() <span class=\"comment\"># close the file</span></span><br><span class=\"line\"></span><br><span class=\"line\">f = file(<span class=\"string\">'poem.txt'</span>)</span><br><span class=\"line\"><span class=\"comment\"># if no mode is specified, 'r'ead mode is assumed by default</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">    line = f.readline()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(line) == <span class=\"number\">0</span>: <span class=\"comment\"># Zero length indicates EOF</span></span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> line,</span><br><span class=\"line\">    <span class=\"comment\"># Notice comma to avoid automatic newline added by Python</span></span><br><span class=\"line\">f.close() <span class=\"comment\"># close the file</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python using_file.py</span><br><span class=\"line\">Programming is fun</span><br><span class=\"line\">When the work is <span class=\"keyword\">done</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> you wanna make your work also fun:</span><br><span class=\"line\">        use Python!</span><br></pre></td></tr></table></figure>\n<h2 id=\"如何工作\"><a href=\"#如何工作\" class=\"headerlink\" title=\"如何工作\"></a>如何工作</h2><p>通过指明文件和模式，来创建一个file类的实例<br>模式包括：读模式(r)、写模式(w)、追加模式(a)，其他模式可参见help(file)<br>用写模式打开文件，使用file类的write方法写入，最后close关闭文件<br>然后再次打开它来读文件，如果不指定模式，则默认为读模式<br>在循环中，使用readline方法读文件的每一行，返回包括行末换行符的一个完整航，当返回一个<em>空的</em>字符串时，表示已经到达文件末，停止循环<br>从文件读到的内容已经包含了换行符，所以在print语句中，使用逗号来消除打印的自动换行，最后close关闭文件</p>\n<h1 id=\"12-2-储存器\"><a href=\"#12-2-储存器\" class=\"headerlink\" title=\"12.2 储存器\"></a>12.2 储存器</h1><p>Python提供一个标准模块pickle，可以在文件中储存<strong>任何</strong>Python对象，再把它完整无缺地取出来，这被称为<em>持久地</em>储存对象<br>还有一个模块cPickle，功能和pickle完全相同，但用C语言编写，因此要快很多(比pickle快1000倍)<br>可以使用任何一个，下例使用cPickle模块(我们都简称为pickle模块)</p>\n<h2 id=\"储存与取储存\"><a href=\"#储存与取储存\" class=\"headerlink\" title=\"储存与取储存\"></a>储存与取储存</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># Filename: pickling.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> cPickle <span class=\"keyword\">as</span> p</span><br><span class=\"line\"><span class=\"comment\">#import pickle as p</span></span><br><span class=\"line\"></span><br><span class=\"line\">shoplistfile = <span class=\"string\">'shoplist.data'</span></span><br><span class=\"line\"><span class=\"comment\"># the name of the file where we will store the object</span></span><br><span class=\"line\"></span><br><span class=\"line\">shoplist = [<span class=\"string\">'apple'</span>, <span class=\"string\">'mango'</span>, <span class=\"string\">'carrot'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Write to the file</span></span><br><span class=\"line\">f = file(shoplistfile, <span class=\"string\">'w'</span>)</span><br><span class=\"line\">p.dump(shoplist, f) <span class=\"comment\"># dump the object to a file</span></span><br><span class=\"line\">f.close()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">del</span> shoplist <span class=\"comment\"># remove the shoplist</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Read back from the storage</span></span><br><span class=\"line\">f = file(shoplistfile)</span><br><span class=\"line\">storedlist = p.load(f)</span><br><span class=\"line\"><span class=\"keyword\">print</span> storedlist</span><br></pre></td></tr></table></figure>\n<h2 id=\"输出-1\"><a href=\"#输出-1\" class=\"headerlink\" title=\"输出\"></a>输出</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python pickling.py</span><br><span class=\"line\">[<span class=\"string\">'apple'</span>, <span class=\"string\">'mango'</span>, <span class=\"string\">'carrot'</span>]</span><br></pre></td></tr></table></figure>\n<h2 id=\"如何工作-1\"><a href=\"#如何工作-1\" class=\"headerlink\" title=\"如何工作\"></a>如何工作</h2><p>import..as语法让我们可以使用更短的模块名称<br>在本例中，只要改变一行，就可以切换到另一个模块(cPickle或者pickle)，在程序中简单地把这个模块称为p<br>首先以写模式打开一个file对象，然后调用储存器模块的dump函数，把对象储存到打开的文件中，这称为<em>储存</em><br>pickle模块的load函数，返回对象，这个过程称为<em>取储存</em></p>\n","categories":["Python"],"tags":["Python"]},{"title":"简明Python教程-11.面向对象的编程","url":"http://dotrabbit.tk/Python/000103-简明Python教程-11.面向对象的编程/","content":"<h1 id=\"11-1-简介\"><a href=\"#11-1-简介\" class=\"headerlink\" title=\"11.1 简介\"></a>11.1 简介</h1><p>目前为止的程序都是<em> 面向过程 </em>的。把数据和功能结合起来，用称为对象的东西包裹起来组织程序的方法，称为<em> 面向对象 </em>编程<br>类和对象是面向对象编程的两个主要方面：类创建一个新类型，对象是这个类的实例<br>对象可以使用属于对象的变量，来存储数据，属于一个对象或类的变量称为<strong> 域 </strong><br>对象可以使用属于类的函数，来具有功能，属于一个类的函数称为<strong> 方法 </strong><br>域和方法合称为类的<strong> 属性 </strong><br>域有两种类型，属于每个实例/类的，称为<strong> 实例变量 </strong>，属于类本身的，称为<strong> 类变量 </strong><br>类使用class关键字创建<br>类的域和方法被列在一个缩进块中</p>\n<h1 id=\"11-2-self\"><a href=\"#11-2-self\" class=\"headerlink\" title=\"11.2 self\"></a>11.2 self</h1><p>类的方法与普通函数只有一个特别的区别：<br>类的方法必须有一个额外的第一个参数名称，但在调用时<strong>不</strong>为这个参数赋值，Python会提供这个值<br>这个特别的变量指对象本身，按照惯例它的名称是self，虽然可以指定任何名称，但是强烈建议使用self，使得程序读者和IDE可以迅速识别它<br>例如有一个名为MyClass的类，和该类的一个实例MyObject，当调用MyObject(arg1, arg2)时，Python会自动转为MyClass.method(MyObject, arg1, arg2)<br>如果有一个不需要参数的方法，还是得给这个方法定义一个self参数</p>\n<h1 id=\"11-3-类\"><a href=\"#11-3-类\" class=\"headerlink\" title=\"11.3 类\"></a>11.3 类</h1><h2 id=\"创建一个类\"><a href=\"#创建一个类\" class=\"headerlink\" title=\"创建一个类\"></a>创建一个类</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># Filename: simplestclass.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span> <span class=\"comment\"># An empty block</span></span><br><span class=\"line\"></span><br><span class=\"line\">p = Person()</span><br><span class=\"line\"><span class=\"keyword\">print</span> p</span><br></pre></td></tr></table></figure>\n<h2 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python simplestclass.py</span><br><span class=\"line\">&lt;__main__.Person instance at 0xf6fcb18c&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"如何工作\"><a href=\"#如何工作\" class=\"headerlink\" title=\"如何工作\"></a>如何工作</h2><p>使用class语句后跟类名，创建一个新类，后面的缩进的语句块行成类体，例子中使用了空白块，由pass语句表示<br>类名后跟圆括号来创建一个对象/实例<br>为了验证，打印变量的类型，显示__main__模块中有了一个Person类的实例，同时打印了存储对象的计算机内存地址</p>\n<h1 id=\"11-4-对象的方法\"><a href=\"#11-4-对象的方法\" class=\"headerlink\" title=\"11.4 对象的方法\"></a>11.4 对象的方法</h1><p>对象的方法与函数的区别只是一个额外的self变量<br>使用对象的方法<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># Filename: method.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayHi</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'Hello, how are you?'</span></span><br><span class=\"line\"></span><br><span class=\"line\">p = Person()</span><br><span class=\"line\">p.sayHi()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># This short example can also be written as Person().sayHi()</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"输出-1\"><a href=\"#输出-1\" class=\"headerlink\" title=\"输出\"></a>输出</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python method.py</span><br><span class=\"line\">Hello, how are you?</span><br></pre></td></tr></table></figure>\n<h2 id=\"如何工作-1\"><a href=\"#如何工作-1\" class=\"headerlink\" title=\"如何工作\"></a>如何工作</h2><p>sayHi方法没有任何参数，但仍然在函数定义时有self</p>\n<h1 id=\"11-5-init-方法\"><a href=\"#11-5-init-方法\" class=\"headerlink\" title=\"11.5 __init__方法\"></a>11.5 __init__方法</h1><p>Python的类中，有很多方法的名字有特殊的意义<br>__init__方法在类的一个对象被建立时，马上运行，可以用来做一些对象的<em> 初始化 </em>，类似于Java中的构造方法<br>注意名称的开始和结尾都是双下划线</p>\n<h1 id=\"使用-init-方法\"><a href=\"#使用-init-方法\" class=\"headerlink\" title=\"使用__init__方法\"></a>使用__init__方法</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># Filename: class_init.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name)</span>:</span></span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayHi</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'Hello, my name is'</span>, self.name</span><br><span class=\"line\"></span><br><span class=\"line\">p = Person(<span class=\"string\">'Swaroop'</span>)</span><br><span class=\"line\">p.sayHi()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># This short example can also be written as Person('Swaroop').sayHi()</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"输出-2\"><a href=\"#输出-2\" class=\"headerlink\" title=\"输出\"></a>输出</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python class_init.py</span><br><span class=\"line\">Hello, my name is Swaroop</span><br></pre></td></tr></table></figure>\n<h2 id=\"如何工作-2\"><a href=\"#如何工作-2\" class=\"headerlink\" title=\"如何工作\"></a>如何工作</h2><p>把__init__方法定义为取一个参数name(以及普通的参数self)，并创建一个新的域，也称为name，它们是两个不同的变量，通过点号区分<br>程序中并没有调用__init__方法，只在创建类的新实例的时候，把参数包括在圆括号内，跟在类名后面，从而传递给__init__方法<br>接下来就可以在sayHi方法中使用self.name域了</p>\n<h1 id=\"11-6-类与对象的方法\"><a href=\"#11-6-类与对象的方法\" class=\"headerlink\" title=\"11.6 类与对象的方法\"></a>11.6 类与对象的方法</h1><p>已经讨论了类与对象的功能部分，现在来看它的数据部分，它们是与类和对象的命名空间绑定的普通变量，即只在类与对象中有效<br>有两种域——类的变量，和对象的变量，根据类还是对象拥有这个变量区分<br>类的变量，由一个类的所有对象/实例共享使用，只有一个类变量拷贝，所以某个对象对类的变量做了修改，会反映到所有其他实例<br>对象的变量，由类的每个对象/实例拥有，每个对象有自己对这个域的一份拷贝，即它们不是共享的</p>\n<h2 id=\"使用类与对象的变量\"><a href=\"#使用类与对象的变量\" class=\"headerlink\" title=\"使用类与对象的变量\"></a>使用类与对象的变量</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># Filename: objvar.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>:</span></span><br><span class=\"line\">    <span class=\"string\">'''Represents a person.'''</span></span><br><span class=\"line\">    population = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">'''Initializes the person's data.'''</span></span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'(Initializing %s)'</span> % self.name</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># When this person is created, he/she</span></span><br><span class=\"line\">        <span class=\"comment\"># adds to the population</span></span><br><span class=\"line\">        Person.population += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__del__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">'''I am dying.'''</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'%s says bye.'</span> % self.name</span><br><span class=\"line\"></span><br><span class=\"line\">        Person.population -= <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> Person.population == <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">print</span> <span class=\"string\">'I am the last one.'</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">print</span> <span class=\"string\">'There are still %d people left.'</span> % Person.population</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayHi</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">'''Greeting by the person.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        Really, that's all it does.'''</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'Hi, my name is %s.'</span> % self.name</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">howMany</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">'''Prints the current population.'''</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> Person.population == <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"keyword\">print</span> <span class=\"string\">'I am the only person here.'</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">print</span> <span class=\"string\">'We have %d persons here.'</span> % Person.population</span><br><span class=\"line\"></span><br><span class=\"line\">swaroop = Person(<span class=\"string\">'Swaroop'</span>)</span><br><span class=\"line\">swaroop.sayHi()</span><br><span class=\"line\">swaroop.howMany()</span><br><span class=\"line\"></span><br><span class=\"line\">kalam = Person(<span class=\"string\">'Abdul Kalam'</span>)</span><br><span class=\"line\">kalam.sayHi()</span><br><span class=\"line\">kalam.howMany()</span><br><span class=\"line\"></span><br><span class=\"line\">swaroop.sayHi()</span><br><span class=\"line\">swaroop.howMany()</span><br></pre></td></tr></table></figure>\n<h2 id=\"输出-3\"><a href=\"#输出-3\" class=\"headerlink\" title=\"输出\"></a>输出</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python objvar.py</span><br><span class=\"line\">(Initializing Swaroop)</span><br><span class=\"line\">Hi, my name is Swaroop.</span><br><span class=\"line\">I am the only person here.</span><br><span class=\"line\">(Initializing Abdul Kalam)</span><br><span class=\"line\">Hi, my name is Abdul Kalam.</span><br><span class=\"line\">We have 2 persons here.</span><br><span class=\"line\">Hi, my name is Swaroop.</span><br><span class=\"line\">We have 2 persons here.</span><br><span class=\"line\">Abdul Kalam says <span class=\"built_in\">bye</span>.</span><br><span class=\"line\">There are still 1 people left.</span><br><span class=\"line\">Swaroop says <span class=\"built_in\">bye</span>.</span><br><span class=\"line\">I am the last one.</span><br></pre></td></tr></table></figure>\n<h2 id=\"如何工作-3\"><a href=\"#如何工作-3\" class=\"headerlink\" title=\"如何工作\"></a>如何工作</h2><p>population变量属于Person类，是一个类的变量；name变量属于对象(使用self赋值)，是一个类的变量<br>__init__方法用一个名字来初始化Person实例，并在population上加1，因为增加了一个人<br>self.name根据每个对象指定，表明它作为对象的变量的本质。<strong>只</strong>能使用self变量来引用同一个对象的变量和方法，称为<em> 属性引用 </em><br><strong>docstring</strong>对于类和方法同样有用，可以在运行时使用Person.__doc__和Person.sayHi.__doc__，来分别访问类和方法的文档字符串<br>__del__方法在对象消逝(即对象不再使用，其所占用的内存将返回系统)的时候被调用，在该方法里，将Person.population减1<br>然而很难保证__del__方法在什么时候运行，使用del语句可以指明它的运行<br>注释：<br>相对于Java，Python中所有的类成员(包括数据成员)都是<em> 公共的 </em>，所有方法都是<em> 有效的 </em><br>有一个例外，当数据成员名称以<em> 双下划线前缀 </em>(如__privatevar)，则Python会把它作为私有变量<br>有一个惯例，如果某个变量只想在类或对象中使用，则应以<em> 单下划线前缀 </em>，而其他名称都将作为公共的，可以被其他类/对象使用。但这只是一个惯例，并不像双下划线前缀那样，是Python所要求的<br>__del__方法与destructor概念类似</p>\n<h1 id=\"11-7-继承\"><a href=\"#11-7-继承\" class=\"headerlink\" title=\"11.7 继承\"></a>11.7 继承</h1><p>面向对象编程的好处之一是代码<strong>重用</strong>，实现重用的方法之一是通过<em>继承</em>机制，<em>继承</em>可以理解成类之间的<em>类型</em>和<em>子类型</em>关系<br>设想一个学校中的教师和学生类，他们有共同的属性，如姓名、年龄和地址，也有转有属性，如教师的薪水、课程和假期，学生的成绩和学费<br>好的方法是创建一个共同的类SchoolMember，然后让教师和学生类都<em>继承</em>这个共同的类，即它们都是这个类型(类)的子类型，然后再为这些子类型添加转有的属性<br>这种方法有很多优点：<br>1、如果增加/改变了SchoolMember中的任何功能，它会自动地反映到子类型中。<br>例如为教师和学生都添加一个身份证的域，只需要把它加到SchoolMember中。而在一个子类型中做的改动不会影响别的子类型。<br>2、可以把教师和学生对象都作为SchoolMember对象来使用。<br>例如在统计学校成员的人数时非常有用。一个子类型在任何需要父类型的场合可以被替换成父类型，即对象可被视作父类的实例，这被称为<strong>多态现象</strong><br>在<em>重用</em>父类代码时，不必再在每个子类中重复它<br>在上例中，SchoolMember被称为<em>基本类</em>或<em>超类</em>，Teacher和Student类称为<em>导出类</em>或<em>子类</em></p>\n<h2 id=\"使用继承\"><a href=\"#使用继承\" class=\"headerlink\" title=\"使用继承\"></a>使用继承</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># Filename: inherit.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SchoolMember</span>:</span></span><br><span class=\"line\">    <span class=\"string\">'''Represents any school member.'''</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name, age)</span>:</span></span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        self.age = age</span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'(Initialized SchoolMember: %s)'</span> % self.name</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">tell</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">'''Tell my details.'''</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'Name:\"%s\" Age:\"%s\"'</span> % (self.name, self.age),</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Teacher</span><span class=\"params\">(SchoolMember)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">'''Represents a teacher.'''</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name, age, salary)</span>:</span></span><br><span class=\"line\">        SchoolMember.__init__(self, name, age)</span><br><span class=\"line\">        self.salary = salary</span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'(Initialized Teacher: %s)'</span> % self.name</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">tell</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        SchoolMember.tell(self)</span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'Salary: \"%d\"'</span> % self.salary</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span><span class=\"params\">(SchoolMember)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">'''Represents a student.'''</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name, age, marks)</span>:</span></span><br><span class=\"line\">        SchoolMember.__init__(self, name, age)</span><br><span class=\"line\">        self.marks = marks</span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'(Initialized Student: %s)'</span> % self.name</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">tell</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        SchoolMember.tell(self)</span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'Marks: \"%d\"'</span> % self.marks</span><br><span class=\"line\"></span><br><span class=\"line\">t = Teacher(<span class=\"string\">'Mrs. Shrividya'</span>, <span class=\"number\">40</span>, <span class=\"number\">30000</span>)</span><br><span class=\"line\">s = Student(<span class=\"string\">'Swaroop'</span>, <span class=\"number\">22</span>, <span class=\"number\">75</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"comment\"># prints a blank line</span></span><br><span class=\"line\"></span><br><span class=\"line\">members = [t, s]</span><br><span class=\"line\"><span class=\"keyword\">for</span> member <span class=\"keyword\">in</span> members:</span><br><span class=\"line\">    member.tell() <span class=\"comment\"># works for both Teachers and Students</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"输出-4\"><a href=\"#输出-4\" class=\"headerlink\" title=\"输出\"></a>输出</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python inherit.py</span><br><span class=\"line\">(Initialized SchoolMember: Mrs. Shrividya)</span><br><span class=\"line\">(Initialized Teacher: Mrs. Shrividya)</span><br><span class=\"line\">(Initialized SchoolMember: Swaroop)</span><br><span class=\"line\">(Initialized Student: Swaroop)</span><br><span class=\"line\"></span><br><span class=\"line\">Name:<span class=\"string\">\"Mrs. Shrividya\"</span> Age:<span class=\"string\">\"40\"</span> Salary: <span class=\"string\">\"30000\"</span></span><br><span class=\"line\">Name:<span class=\"string\">\"Swaroop\"</span> Age:<span class=\"string\">\"22\"</span> Marks: <span class=\"string\">\"75\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"如何工作-4\"><a href=\"#如何工作-4\" class=\"headerlink\" title=\"如何工作\"></a>如何工作</h2><p>定义类时，将父类的名称作为一个元组，跟在类名称之后，来使用继承<br>父类的__init__方法使用self变量调用，这样就可以初始化对象的父类部分。这一点很重要——Python不会自动调用父类的constructor，需要手动专门调用它<br>在方法调用之前加上类名称前缀，然后把self变量及其他参数传递给它<br>在使用SchoolMember类的tell方法时，把Teacher和Student的实例仅作为SchoolMember的实例<br>在调用子类型的tell方法时，Python会首先查找对应类型的方法，如果在子类中找不到对应的方法，才会在父类中逐个查找。父类是在类定义的时候在元组中指明的。<br>如果在继承元组中列了一个以上的类，那么它就被称作<em>多重继承</em></p>\n","categories":["Python"],"tags":["Python"]},{"title":"简明Python教程-10.解决问题——编写一个Python脚本","url":"http://dotrabbit.tk/Python/000102-简明Python教程-10.解决问题——编写一个Python脚本/","content":"<h1 id=\"10-1-问题\"><a href=\"#10-1-问题\" class=\"headerlink\" title=\"10.1 问题\"></a>10.1 问题</h1><p>为所有重要文件备份<br><strong>分析：</strong>如何确定该备份哪些文件？备份保存在哪里？怎么样存储备份？<br><strong>设计：</strong><br>1、需要备份一的文件和目录由一个列表制定<br>2、备份保存在主备份目录中<br>3、备份成一个zip文件<br>4、zip存档的名称是当前的日期和时间<br>5、使用标准的zip命令(Linux/Unix默认，Windows可使用Info-Zip等，只要有命令行界面可以在脚本中给它传递参数即可)</p>\n<h1 id=\"10-2-解决方案\"><a href=\"#10-2-解决方案\" class=\"headerlink\" title=\"10.2 解决方案\"></a>10.2 解决方案</h1><p><strong>实施：</strong></p>\n<h2 id=\"版本一\"><a href=\"#版本一\" class=\"headerlink\" title=\"版本一\"></a>版本一</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># Filename: backup_ver1.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1. The files and directories to be backed up are specified in a list.</span></span><br><span class=\"line\">source = [<span class=\"string\">'/home/swaroop/byte'</span>, <span class=\"string\">'/home/swaroop/bin'</span>]</span><br><span class=\"line\"><span class=\"comment\"># If you are using Windows, use source = [r'C:\\Documents', r'D:\\Work'] or something like that</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2. The backup must be stored in a main backup directory</span></span><br><span class=\"line\">target_dir = <span class=\"string\">'/mnt/e/backup/'</span> <span class=\"comment\"># Remember to change this to what you will be using</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3. The files are backed up into a zip file.</span></span><br><span class=\"line\"><span class=\"comment\"># 4. The name of the zip archive is the current date and time</span></span><br><span class=\"line\">target = target_dir + time.strftime(<span class=\"string\">'%Y%m%d%H%M%S'</span>) + <span class=\"string\">'.zip'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 5. We use the zip command (in Unix/Linux) to put the files in a zip archive</span></span><br><span class=\"line\">zip_command = <span class=\"string\">\"zip -qr '%s' %s\"</span> % (target, <span class=\"string\">' '</span>.join(source))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Run the backup</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> os.system(zip_command) == <span class=\"number\">0</span>:</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'Successful backup to'</span>, target</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'Backup FAILED'</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python backup_ver1.py</span><br><span class=\"line\">Successful backup to /mnt/e/backup/20041208073244.zip</span><br></pre></td></tr></table></figure>\n<p>现在已经处于测试环节了，测试程序是否正确工作<br>如果结果与期望不一样，就得调试程序，即消除程序中的错误</p>\n<h2 id=\"如何工作\"><a href=\"#如何工作\" class=\"headerlink\" title=\"如何工作\"></a>如何工作</h2><p>将<em> 设计 </em>一步一步地转换为<em> 代码 </em><br>1、要使用了os和time模块，现在程序中引入它们<br>2、source列表指定需要备份的文件和目录；target_dir变量制定存储备份文件的目标目录；zip归档的名称是目前的日期和时间，由time.strftime()函数获得，并加上.zip扩展名<br>2.a time.strftime()函数需要使用定制，%Y会被无世纪的年份替代，%m会被01到12之间的月份替代，以此类推。这些定制的详细情况可以在Python的发行版中的《Python参考手册》中获得，与print语句的定制(%后跟一个元组)类似，但不完全相同<br>2.b 使用加法操作符来<em> 级连 </em>字符串，即把两个字符串连接在一起，返回一个新的字符串<br>3、创建zip_command字符串，包含将要执行的命令<br>3.a 可以在shell(Linux终端或DOS提示符)中运行它，检验它是否工作<br>3.b zip命令有一些选项和参数，-q选项表示zip命令安静地工作，-r选项表示对目录递归地工作，即包括子目录及子目录中的文件，两个选项可以组合写成-qr，选项后是待创建的zip归档的名称<br>3.c 使用字符串的join方法，把source列表转换为字符串<br>4、使用os.system函数运行命令，利用这个函数就好像在<em> 系统 </em>中运行命令一样，成功返回0，否则返回错误号<br>5、根据打印的消息，显示备份是否创建成功<br>(注意，Windows把反斜杠()作为目录分隔符，而Python用反斜杠表示转义符，因此在source和target目录中，需要转义’C:\\Documents’或者使用自然字符串r’C:\\Documents’)<br>这被称为软件的<strong> 开发 </strong>环节。上述程序可以正确工作，但如果在使用中发生问题，则应回到设计环节或者调试程序</p>\n<h2 id=\"版本二\"><a href=\"#版本二\" class=\"headerlink\" title=\"版本二\"></a>版本二</h2><p>版本一可以工作，但我们可以对它进行优化让它在日常工作中变得更好，这称为软件的维护环节<br>例如文件名机制，可以使用当前日期作为目录名，当前时间作为文件名，存放在主备份目录中。优势是便于管理且文件名更短<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># Filename: backup_ver2.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1. The files and directories to be backed up are specified in a list.</span></span><br><span class=\"line\">source = [<span class=\"string\">'/home/swaroop/byte'</span>, <span class=\"string\">'/home/swaroop/bin'</span>]</span><br><span class=\"line\"><span class=\"comment\"># If you are using Windows, use source = [r'C:\\Documents', r'D:\\Work'] or something like that</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2. The backup must be stored in a main backup directory</span></span><br><span class=\"line\">target_dir = <span class=\"string\">'/mnt/e/backup/'</span> <span class=\"comment\"># Remember to change this to what you will be using</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3. The files are backed up into a zip file.</span></span><br><span class=\"line\"><span class=\"comment\"># 4. The current day is the name of the subdirectory in the main directory</span></span><br><span class=\"line\">today = target_dir + time.strftime(<span class=\"string\">'%Y%m%d'</span>)</span><br><span class=\"line\"><span class=\"comment\"># The current time is the name of the zip archive</span></span><br><span class=\"line\">now = time.strftime(<span class=\"string\">'%H%M%S'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Create the subdirectory if it isn't already there</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(today):</span><br><span class=\"line\">    os.mkdir(today) <span class=\"comment\"># make directory</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'Successfully created directory'</span>, today</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The name of the zip file</span></span><br><span class=\"line\">target = today + os.sep + now + <span class=\"string\">'.zip'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 5. We use the zip command (in Unix/Linux) to put the files in a zip archive</span></span><br><span class=\"line\">zip_command = <span class=\"string\">\"zip -qr '%s' %s\"</span> % (target, <span class=\"string\">' '</span>.join(source))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Run the backup</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> os.system(zip_command) == <span class=\"number\">0</span>:</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'Successful backup to'</span>, target</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'Backup FAILED'</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"输出-1\"><a href=\"#输出-1\" class=\"headerlink\" title=\"输出\"></a>输出</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python backup_ver2.py</span><br><span class=\"line\">Successfully created directory /mnt/e/backup/20041208</span><br><span class=\"line\">Successful backup to /mnt/e/backup/20041208/080020.zip</span><br><span class=\"line\"></span><br><span class=\"line\">$ python backup_ver2.py</span><br><span class=\"line\">Successful backup to /mnt/e/backup/20041208/080428.zip</span><br></pre></td></tr></table></figure>\n<h2 id=\"如何工作-1\"><a href=\"#如何工作-1\" class=\"headerlink\" title=\"如何工作\"></a>如何工作</h2><p>与版本一大部分相同，但使用os.exists函数，检验在主备份目录中是否有以当前日期明明的目录，如果没有，使用os.mkdir函数创建<br>os.sep变量根据操作系统给出目录分隔符(Linux/Unix下是’/‘，Windows下是’\\’，Mac OS下是’:’)，使用os.sep比直接使用字符更具有移植性</p>\n<h2 id=\"版本三\"><a href=\"#版本三\" class=\"headerlink\" title=\"版本三\"></a>版本三</h2><p>当备份多的时候无法区分备份内容，可以让用户对备份输入注释，添加到zip归档的文件名上<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># Filename: backup_ver3.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1. The files and directories to be backed up are specified in a list.</span></span><br><span class=\"line\">source = [<span class=\"string\">'/home/swaroop/byte'</span>, <span class=\"string\">'/home/swaroop/bin'</span>]</span><br><span class=\"line\"><span class=\"comment\"># If you are using Windows, use source = [r'C:\\Documents', r'D:\\Work'] or something like that</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2. The backup must be stored in a main backup directory</span></span><br><span class=\"line\">target_dir = <span class=\"string\">'/mnt/e/backup/'</span> <span class=\"comment\"># Remember to change this to what you will be using</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3. The files are backed up into a zip file.</span></span><br><span class=\"line\"><span class=\"comment\"># 4. The current day is the name of the subdirectory in the main directory</span></span><br><span class=\"line\">today = target_dir + time.strftime(<span class=\"string\">'%Y%m%d'</span>)</span><br><span class=\"line\"><span class=\"comment\"># The current time is the name of the zip archive</span></span><br><span class=\"line\">now = time.strftime(<span class=\"string\">'%H%M%S'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Take a comment from the user to create the name of the zip file</span></span><br><span class=\"line\">comment = raw_input(<span class=\"string\">'Enter a comment --&gt; '</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> len(comment) == <span class=\"number\">0</span>: <span class=\"comment\"># check if a comment was entered</span></span><br><span class=\"line\">    target = today + os.sep + now + <span class=\"string\">'.zip'</span></span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    target = today + os.sep + now + <span class=\"string\">'_'</span> +</span><br><span class=\"line\">        comment.replace(<span class=\"string\">' '</span>, <span class=\"string\">'_'</span>) + <span class=\"string\">'.zip'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Create the subdirectory if it isn't already there</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(today):</span><br><span class=\"line\">    os.mkdir(today) <span class=\"comment\"># make directory</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'Successfully created directory'</span>, today</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 5. We use the zip command (in Unix/Linux) to put the files in a zip archive</span></span><br><span class=\"line\">zip_command = <span class=\"string\">\"zip -qr '%s' %s\"</span> % (target, <span class=\"string\">' '</span>.join(source))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Run the backup</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> os.system(zip_command) == <span class=\"number\">0</span>:</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'Successful backup to'</span>, target</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'Backup FAILED'</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"输出-2\"><a href=\"#输出-2\" class=\"headerlink\" title=\"输出\"></a>输出</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python backup_ver3.py</span><br><span class=\"line\">File <span class=\"string\">\"backup_ver3.py\"</span>, line 25</span><br><span class=\"line\">target = today + os.sep + now + <span class=\"string\">'_'</span> +</span><br><span class=\"line\">                                ^</span><br><span class=\"line\">SyntaxError: invalid syntax</span><br></pre></td></tr></table></figure>\n<h2 id=\"如何不工作\"><a href=\"#如何不工作\" class=\"headerlink\" title=\"如何不工作\"></a>如何不工作</h2><p>这个程序不工作，Python提示有一个语法错误，根据给出的错误的位置，从那行开始<em> 调试 </em>程序<br>观察发现，有一个逻辑行，被分成了两个物理行，但没有指明这两个物理行属于同一逻辑航，需要使用反斜杠来表示逻辑航在下一物理行继续</p>\n<h2 id=\"版本四\"><a href=\"#版本四\" class=\"headerlink\" title=\"版本四\"></a>版本四</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># Filename: backup_ver4.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1. The files and directories to be backed up are specified in a list.</span></span><br><span class=\"line\">source = [<span class=\"string\">'/home/swaroop/byte'</span>, <span class=\"string\">'/home/swaroop/bin'</span>]</span><br><span class=\"line\"><span class=\"comment\"># If you are using Windows, use source = [r'C:\\Documents', r'D:\\Work'] or something like that</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2. The backup must be stored in a main backup directory</span></span><br><span class=\"line\">target_dir = <span class=\"string\">'/mnt/e/backup/'</span> <span class=\"comment\"># Remember to change this to what you will be using</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3. The files are backed up into a zip file.</span></span><br><span class=\"line\"><span class=\"comment\"># 4. The current day is the name of the subdirectory in the main directory</span></span><br><span class=\"line\">today = target_dir + time.strftime(<span class=\"string\">'%Y%m%d'</span>)</span><br><span class=\"line\"><span class=\"comment\"># The current time is the name of the zip archive</span></span><br><span class=\"line\">now = time.strftime(<span class=\"string\">'%H%M%S'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Take a comment from the user to create the name of the zip file</span></span><br><span class=\"line\">comment = raw_input(<span class=\"string\">'Enter a comment --&gt; '</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> len(comment) == <span class=\"number\">0</span>: <span class=\"comment\"># check if a comment was entered</span></span><br><span class=\"line\">    target = today + os.sep + now + <span class=\"string\">'.zip'</span></span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    target = today + os.sep + now + <span class=\"string\">'_'</span> + \\</span><br><span class=\"line\">        comment.replace(<span class=\"string\">' '</span>, <span class=\"string\">'_'</span>) + <span class=\"string\">'.zip'</span></span><br><span class=\"line\">    <span class=\"comment\"># Notice the backslash!</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Create the subdirectory if it isn't already there</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(today):</span><br><span class=\"line\">    os.mkdir(today) <span class=\"comment\"># make directory</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'Successfully created directory'</span>, today</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 5. We use the zip command (in Unix/Linux) to put the files in a zip archive</span></span><br><span class=\"line\">zip_command = <span class=\"string\">\"zip -qr '%s' %s\"</span> % (target, <span class=\"string\">' '</span>.join(source))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Run the backup</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> os.system(zip_command) == <span class=\"number\">0</span>:</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'Successful backup to'</span>, target</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'Backup FAILED'</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"输出-3\"><a href=\"#输出-3\" class=\"headerlink\" title=\"输出\"></a>输出</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python backup_ver4.py</span><br><span class=\"line\">Enter a comment --&gt; added new examples</span><br><span class=\"line\">Successful backup to /mnt/e/backup/20041208/082156_added_new_examples.zip</span><br><span class=\"line\"></span><br><span class=\"line\">$ python backup_ver4.py</span><br><span class=\"line\">Enter a comment --&gt;</span><br><span class=\"line\">Successful backup to /mnt/e/backup/20041208/082316.zip</span><br></pre></td></tr></table></figure>\n<h2 id=\"如何工作-2\"><a href=\"#如何工作-2\" class=\"headerlink\" title=\"如何工作\"></a>如何工作</h2><p>经过修改，程序现在工作了，相比版本二的改进：<br>使用raw_input函数得到用户的输入，通过len函数取得输入长度，判断是否有注释</p>\n<h2 id=\"进一步优化\"><a href=\"#进一步优化\" class=\"headerlink\" title=\"进一步优化\"></a>进一步优化</h2><p>交互性：使用-v选项来使程序更具交互性<br>参数传递：通过sys.argv列表获取文件和目录，使用list类提供的extend方法加入到source列表中<br>压缩命令：使用tar替代gzip命令，备份会更快更小(Linux/Unix一般默认可用，Windows可下载安装)。另外，使用Python标准库中的zipfile和tarfile更加理想，避免使用可能引发错误的os.system</p>\n","categories":["Python"],"tags":["Python"]},{"title":"简明Python教程-9.数据结构","url":"http://dotrabbit.tk/Python/000101-简明Python教程-9.数据结构/","content":"<h1 id=\"9-1-简介\"><a href=\"#9-1-简介\" class=\"headerlink\" title=\"9.1 简介\"></a>9.1 简介</h1><p>数据结构基本上就是——它们可以处理一些<em> 数据 </em>的<em> 结构 </em><br>它们是用来存储一组相关数据的<br>Python中有三种內建的数据结构——列表、元组合字典</p>\n<h1 id=\"9-2-列表\"><a href=\"#9-2-列表\" class=\"headerlink\" title=\"9.2 列表\"></a>9.2 列表</h1><p>list是处理一组有序项目的数据结构，即可以在一个列表中存储一个<em> 序列 </em>的项目<br>在列表中，在每个项目之间用逗号分割，并且将项目包括在方括号中，这样Python就知道你在指明一个列表<br>创建列表之后，可以添加、删除或是搜索列表中的项目<br>由于可以增加或删除项目，所以说列表是可变的数据类型，即这种类型是可以被改变的</p>\n<h2 id=\"对象与类的快速入门\"><a href=\"#对象与类的快速入门\" class=\"headerlink\" title=\"对象与类的快速入门\"></a>对象与类的快速入门</h2><p>当使用变量i并给它赋值的时候，可以认为创建了一个<strong> 类 </strong>(类型)int的<strong> 对象 </strong>(实例)I<br>可通过help(int)查看详细信息<br>类有<strong> 方法 </strong>，即仅仅为类而定义的函数<br>只有在有一个该类的对象的时候，才可以使用这些功能<br>使用点号来使用对象的方法，如mylist.append(‘an item’)<br>类有<strong> 域 </strong>，即仅仅为类而定义的变量<br>只有在有一个类的对象的时候，才可以使用这些变量/名称<br>使用点号来使用域，如mylist.fields</p>\n<h2 id=\"使用列表\"><a href=\"#使用列表\" class=\"headerlink\" title=\"使用列表\"></a>使用列表</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># Filename: using_list.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># This is my shopping list</span></span><br><span class=\"line\">shoplist = [<span class=\"string\">'apple'</span>, <span class=\"string\">'mango'</span>, <span class=\"string\">'carrot'</span>, <span class=\"string\">'banana'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'I have'</span>, len(shoplist),<span class=\"string\">'items to purchase.'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'These items are:'</span>, <span class=\"comment\"># Notice the comma at end of the line</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> shoplist:</span><br><span class=\"line\">    <span class=\"keyword\">print</span> item,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'\\nI also have to buy rice.'</span></span><br><span class=\"line\">shoplist.append(<span class=\"string\">'rice'</span>)</span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'My shopping list is now'</span>, shoplist</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'I will sort my list now'</span></span><br><span class=\"line\">shoplist.sort()</span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'Sorted shopping list is'</span>, shoplist</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'The first item I will buy is'</span>, shoplist[<span class=\"number\">0</span>]</span><br><span class=\"line\">olditem = shoplist[<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"keyword\">del</span> shoplist[<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'I bought the'</span>, olditem</span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'My shopping list is now'</span>, shoplist</span><br></pre></td></tr></table></figure>\n<h2 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python using_list.py</span><br><span class=\"line\">I have 4 items to purchase.</span><br><span class=\"line\">These items are: apple mango carrot banana</span><br><span class=\"line\">I also have to buy rice.</span><br><span class=\"line\">My shopping list is now [<span class=\"string\">'apple'</span>, <span class=\"string\">'mango'</span>, <span class=\"string\">'carrot'</span>, <span class=\"string\">'banana'</span>, <span class=\"string\">'rice'</span>]</span><br><span class=\"line\">I will sort my list now</span><br><span class=\"line\">Sorted shopping list is [<span class=\"string\">'apple'</span>, <span class=\"string\">'banana'</span>, <span class=\"string\">'carrot'</span>, <span class=\"string\">'mango'</span>, <span class=\"string\">'rice'</span>]</span><br><span class=\"line\">The first item I will buy is apple</span><br><span class=\"line\">I bought the apple</span><br><span class=\"line\">My shopping list is now [<span class=\"string\">'banana'</span>, <span class=\"string\">'carrot'</span>, <span class=\"string\">'mango'</span>, <span class=\"string\">'rice'</span>]</span><br></pre></td></tr></table></figure>\n<h2 id=\"如何工作\"><a href=\"#如何工作\" class=\"headerlink\" title=\"如何工作\"></a>如何工作</h2><p>变量shoplist保存物品名字的字符串(实际上，可以在列表中添加<em> 任何种类的对象 </em>，包括数字甚至其他列表)<br>使用for..in循环列表中各项目，列表也是一个序列，序列在后面讨论<br>print语句的结尾使用了一个逗号来消除每个print语句自动打印的换行符，虽然难看，但简单有效<br>使用append方法，在列表中添加项目<br>通过打印列表的内容，来检验项目的添加，只需简单地把列表传递给print语句，就可以得到一个整洁的输出<br>使用列表的sort方法对列表排序<br>列表的排序方法影响列表本身，而不是返回一个新列表，这与字符串不同，所以说列表是<em> 可变的 </em>，字符串是<em> 不可变 </em>的<br>del语句从列表中删除我们指定的项目，del shoplist[0]删除第一个元素(Python从0开始计数)<br>可以通过help(list)获得列表对象定义的所有方法等信息</p>\n<h1 id=\"9-3-元组\"><a href=\"#9-3-元组\" class=\"headerlink\" title=\"9.3 元组\"></a>9.3 元组</h1><p>元组和列表十分类似，但元组是<em> 不可变的 </em>(字符串也是)，即不可修改元组<br>元组通过 圆括号，和其中用逗号分割的项目 定义<br>通常用在需要安全地使用一组值的时候，即被使用的元组的值不会改变</p>\n<h2 id=\"使用元组\"><a href=\"#使用元组\" class=\"headerlink\" title=\"使用元组\"></a>使用元组</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># Filename: using_tuple.py</span></span><br><span class=\"line\"></span><br><span class=\"line\">zoo = (<span class=\"string\">'wolf'</span>, <span class=\"string\">'elephant'</span>, <span class=\"string\">'penguin'</span>)</span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'Number of animals in the zoo is'</span>, len(zoo)</span><br><span class=\"line\"></span><br><span class=\"line\">new_zoo = (<span class=\"string\">'monkey'</span>, <span class=\"string\">'dolphin'</span>, zoo)</span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'Number of animals in the new zoo is'</span>, len(new_zoo)</span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'All animals in new zoo are'</span>, new_zoo</span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'Animals brought from old zoo are'</span>, new_zoo[<span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'Last animal brought from old zoo is'</span>, new_zoo[<span class=\"number\">2</span>][<span class=\"number\">2</span>]</span><br></pre></td></tr></table></figure>\n<h2 id=\"输出-1\"><a href=\"#输出-1\" class=\"headerlink\" title=\"输出\"></a>输出</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python using_tuple.py</span><br><span class=\"line\">Number of animals <span class=\"keyword\">in</span> the zoo is 3</span><br><span class=\"line\">Number of animals <span class=\"keyword\">in</span> the new zoo is 3</span><br><span class=\"line\">All animals <span class=\"keyword\">in</span> new zoo are (<span class=\"string\">'monkey'</span>, <span class=\"string\">'dolphin'</span>, (<span class=\"string\">'wolf'</span>, <span class=\"string\">'elephant'</span>, <span class=\"string\">'penguin'</span>))</span><br><span class=\"line\">Animals brought from old zoo are (<span class=\"string\">'wolf'</span>, <span class=\"string\">'elephant'</span>, <span class=\"string\">'penguin'</span>)</span><br><span class=\"line\">Last animal brought from old zoo is penguin</span><br></pre></td></tr></table></figure>\n<h2 id=\"如何工作-1\"><a href=\"#如何工作-1\" class=\"headerlink\" title=\"如何工作\"></a>如何工作</h2><p>变量zoo是一个元组，可以使用len函数来获取元组的长度，表明元组也是一个序列(见9.5)<br>可以通过 方括号 来指明位置，来访问元组中的项目，就像列表一样，这称为索引运算符<br>使用new_zoo[2]来访问new_zoo中的第三个项目，new_zoo[2][2]来访问new_zoo元组的第三个项目的第三个项目<br>含有0个元素的元组，有一对空的圆括号组成，如myempty=()<br>含有1个元素的元组，在第一个/唯一一个项目后跟一个逗号，如singleton=(2, )，以区分于表达式中一个带圆括号的对象</p>\n<h2 id=\"元组与打印语句\"><a href=\"#元组与打印语句\" class=\"headerlink\" title=\"元组与打印语句\"></a>元组与打印语句</h2><p>元组最通常的用法是在打印语句中：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># Filename: print_tuple.py</span></span><br><span class=\"line\"></span><br><span class=\"line\">age = <span class=\"number\">22</span></span><br><span class=\"line\">name = <span class=\"string\">'Swaroop'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'%s is %d years old'</span> % (name, age)</span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'Why is %s playing with that python?'</span> % name</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"输出-2\"><a href=\"#输出-2\" class=\"headerlink\" title=\"输出\"></a>输出</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python print_tuple.py</span><br><span class=\"line\">Swaroop is 22 years old</span><br><span class=\"line\">Why is Swaroop playing with that python?</span><br></pre></td></tr></table></figure>\n<h2 id=\"如何工作-2\"><a href=\"#如何工作-2\" class=\"headerlink\" title=\"如何工作\"></a>如何工作</h2><p>print语句可以使用%符号定制的字符串，%s表示字符串，%d表示整数，元组必须按照相同顺序来对应这些定制<br>第一个print中，%s对应变量name，元组的第一个项目；%d对应元组的第二个项目age<br>Python会把元组中的每个项目，转换成字符串，并替换定制位置。%s被替换为变量name的值，以此类推<br>大多数时候，可以只使用%s定制，Python同样可以处理数。但对应的定制可以多一层检验<br>第二个print中，定制的%后跟着单个项目，没有圆括号，这只在定制项只有一个的时候有效</p>\n<h1 id=\"9-4-字典\"><a href=\"#9-4-字典\" class=\"headerlink\" title=\"9.4 字典\"></a>9.4 字典</h1><p>字典类似于地址簿，把<strong> 键 </strong>(名字)和<strong> 值 </strong>(详细情况)联系在一起<br>注意：<br>键必须是唯一的<br>键必须是不可变对象(如字符串)，值可以是不可变的或可变的。一般应该只使用简单的对象作为键<br>键值对在字典中标记为：d = {key1 : value1, key2 : value2}，键值对用冒号分割，各个对用逗号分割，包含在花括号中<br>字典中的键值对是没有顺序的。如果想要特定的顺序，应在使用前对它们排序<br>字典是dict类的实例/对象</p>\n<h2 id=\"使用字典\"><a href=\"#使用字典\" class=\"headerlink\" title=\"使用字典\"></a>使用字典</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># Filename: using_dict.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 'ab' is short for 'a'ddress'b'ook</span></span><br><span class=\"line\"></span><br><span class=\"line\">ab = &#123;       <span class=\"string\">'Swaroop'</span>   : <span class=\"string\">'swaroopch@byteofpython.info'</span>,</span><br><span class=\"line\">             <span class=\"string\">'Larry'</span>     : <span class=\"string\">'larry@wall.org'</span>,</span><br><span class=\"line\">             <span class=\"string\">'Matsumoto'</span> : <span class=\"string\">'matz@ruby-lang.org'</span>,</span><br><span class=\"line\">             <span class=\"string\">'Spammer'</span>   : <span class=\"string\">'spammer@hotmail.com'</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"Swaroop's address is %s\"</span> % ab[<span class=\"string\">'Swaroop'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Adding a key/value pair</span></span><br><span class=\"line\">ab[<span class=\"string\">'Guido'</span>] = <span class=\"string\">'guido@python.org'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Deleting a key/value pair</span></span><br><span class=\"line\"><span class=\"keyword\">del</span> ab[<span class=\"string\">'Spammer'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'\\nThere are %d contacts in the address-book\\n'</span> % len(ab)</span><br><span class=\"line\"><span class=\"keyword\">for</span> name, address <span class=\"keyword\">in</span> ab.items():</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'Contact %s at %s'</span> % (name, address)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"string\">'Guido'</span> <span class=\"keyword\">in</span> ab: <span class=\"comment\"># OR ab.has_key('Guido')</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"\\nGuido's address is %s\"</span> % ab[<span class=\"string\">'Guido'</span>]</span><br></pre></td></tr></table></figure>\n<h2 id=\"输出-3\"><a href=\"#输出-3\" class=\"headerlink\" title=\"输出\"></a>输出</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python using_dict.py</span><br><span class=\"line\">Swaroop<span class=\"string\">'s address is swaroopch@byteofpython.info</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">There are 4 contacts in the address-book</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Contact Swaroop at swaroopch@byteofpython.info</span></span><br><span class=\"line\"><span class=\"string\">Contact Matsumoto at matz@ruby-lang.org</span></span><br><span class=\"line\"><span class=\"string\">Contact Larry at larry@wall.org</span></span><br><span class=\"line\"><span class=\"string\">Contact Guido at guido@python.org</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Guido'</span>s address is guido@python.org</span><br></pre></td></tr></table></figure>\n<h2 id=\"如何工作-3\"><a href=\"#如何工作-3\" class=\"headerlink\" title=\"如何工作\"></a>如何工作</h2><p>使用字典的标记创建了字典ab，使用索引操作符指定键来使用键值对<br>使用索引操作符指定一个键并赋值，增加一个新的键值对，如Guido<br>使用del语句来删除键值对，使用索引操作符指明要删除的键，无需知道值<br>字典的items方法返回一个元组的列表，每个元组都包含一对项目——键与对应的值。抓取对，并分别赋给for..in循环中的变量name和address，然后在for块中打印<br>使用in操作符来检验一个键值对是否存在，或使用dict类的has_key方法(使用help(dict)来查看)</p>\n<h1 id=\"9-5-序列\"><a href=\"#9-5-序列\" class=\"headerlink\" title=\"9.5 序列\"></a>9.5 序列</h1><p>列表、元组和字符串都是序列<br>序列的两个主要特点是<strong> 索引 </strong>操作符和<strong> 切片 </strong>操作符<br>索引操作符让我们可以从序列中抓取一个特定项目<br>切片操作符让我们可以获取序列的一个切片</p>\n<h2 id=\"使用序列\"><a href=\"#使用序列\" class=\"headerlink\" title=\"使用序列\"></a>使用序列</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># Filename: seq.py</span></span><br><span class=\"line\"></span><br><span class=\"line\">shoplist = [<span class=\"string\">'apple'</span>, <span class=\"string\">'mango'</span>, <span class=\"string\">'carrot'</span>, <span class=\"string\">'banana'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Indexing or 'Subscription' operation</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'Item 0 is'</span>, shoplist[<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'Item 1 is'</span>, shoplist[<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'Item 2 is'</span>, shoplist[<span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'Item 3 is'</span>, shoplist[<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'Item -1 is'</span>, shoplist[<span class=\"number\">-1</span>]</span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'Item -2 is'</span>, shoplist[<span class=\"number\">-2</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Slicing on a list</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'Item 1 to 3 is'</span>, shoplist[<span class=\"number\">1</span>:<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'Item 2 to end is'</span>, shoplist[<span class=\"number\">2</span>:]</span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'Item 1 to -1 is'</span>, shoplist[<span class=\"number\">1</span>:<span class=\"number\">-1</span>]</span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'Item start to end is'</span>, shoplist[:]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Slicing on a string</span></span><br><span class=\"line\">name = <span class=\"string\">'swaroop'</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'characters 1 to 3 is'</span>, name[<span class=\"number\">1</span>:<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'characters 2 to end is'</span>, name[<span class=\"number\">2</span>:]</span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'characters 1 to -1 is'</span>, name[<span class=\"number\">1</span>:<span class=\"number\">-1</span>]</span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'characters start to end is'</span>, name[:]</span><br></pre></td></tr></table></figure>\n<h2 id=\"输出-4\"><a href=\"#输出-4\" class=\"headerlink\" title=\"输出\"></a>输出</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python seq.py</span><br><span class=\"line\">Item 0 is apple</span><br><span class=\"line\">Item 1 is mango</span><br><span class=\"line\">Item 2 is carrot</span><br><span class=\"line\">Item 3 is banana</span><br><span class=\"line\">Item -1 is banana</span><br><span class=\"line\">Item -2 is carrot</span><br><span class=\"line\">Item 1 to 3 is [<span class=\"string\">'mango'</span>, <span class=\"string\">'carrot'</span>]</span><br><span class=\"line\">Item 2 to end is [<span class=\"string\">'carrot'</span>, <span class=\"string\">'banana'</span>]</span><br><span class=\"line\">Item 1 to -1 is [<span class=\"string\">'mango'</span>, <span class=\"string\">'carrot'</span>]</span><br><span class=\"line\">Item start to end is [<span class=\"string\">'apple'</span>, <span class=\"string\">'mango'</span>, <span class=\"string\">'carrot'</span>, <span class=\"string\">'banana'</span>]</span><br><span class=\"line\">characters 1 to 3 is wa</span><br><span class=\"line\">characters 2 to end is aroop</span><br><span class=\"line\">characters 1 to -1 is waroo</span><br><span class=\"line\">characters start to end is swaroop</span><br></pre></td></tr></table></figure>\n<h2 id=\"如何工作-4\"><a href=\"#如何工作-4\" class=\"headerlink\" title=\"如何工作\"></a>如何工作</h2><p>通过索引来获取序列中的单个项目，也被称作下标操作，使用方括号中的数来制定序列对应位置的项目<br>Python从0开始计数，shoplist[0]抓取第一个元素，shoplist[3]抓取第四个元素<br>索引可以是负数，位置从序列尾开始计算。如shoplist[-1]表示序列最后一个元素，shoplist[-2]抓取序列倒数第二个元素<br>切片操作符：<br>1、是序列名后跟一个方括号，方括号中有一对可选的数字，并用冒号分割。这与索引操作符十分相似，需要注意的是，数是可选的，冒号是必须的<br>2、第一个数(冒号前)表示切片开始位置，第二个数(冒号后)表示切片结束位置。如果不指定第一个数，则从序列首开始，如果不指定第二个数，则停止在序列尾。注意，返回的序列从<em> 开始位置 </em>开始，在<em> 结束位置之前 </em>结束，即，开始位置包含在序列切片中，而结束位置被排斥在切片外<br>例如，shoplist[1:3]返回位置1开始，包括位置2，停止在位置3的一个序列切片。因此返回一个含有两个项目的切片<br>shoplist[:]返回整个序列的拷贝<br>可以用负数做切片，负数从负数尾开始计算位置。如，shoplist[:-1]返回除了最后一个项目外的序列切片<br>序列的神奇之处在于，可以用相同的方法访问元组、列表和字符串</p>\n<h1 id=\"9-6-引用\"><a href=\"#9-6-引用\" class=\"headerlink\" title=\"9.6 引用\"></a>9.6 引用</h1><p>当创建一个对象，并给它赋一个变量的时候，这个变量仅仅<em> 引用 </em>那个对象，而不是对象本身。即，变量名指向计算机中存储的那个对象的内存。<br>这被称作名称到对象的<strong> 绑定 </strong><br>一般不需担心，但有些细微的效果需要注意。</p>\n<h2 id=\"对象与引用\"><a href=\"#对象与引用\" class=\"headerlink\" title=\"对象与引用\"></a>对象与引用</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># Filename: reference.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'Simple Assignment'</span></span><br><span class=\"line\">shoplist = [<span class=\"string\">'apple'</span>, <span class=\"string\">'mango'</span>, <span class=\"string\">'carrot'</span>, <span class=\"string\">'banana'</span>]</span><br><span class=\"line\">mylist = shoplist <span class=\"comment\"># mylist is just another name pointing to the same object!</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">del</span> shoplist[<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'shoplist is'</span>, shoplist</span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'mylist is'</span>, mylist</span><br><span class=\"line\"><span class=\"comment\"># notice that both shoplist and mylist both print the same list without</span></span><br><span class=\"line\"><span class=\"comment\"># the 'apple' confirming that they point to the same object</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'Copy by making a full slice'</span></span><br><span class=\"line\">mylist = shoplist[:] <span class=\"comment\"># make a copy by doing a full slice</span></span><br><span class=\"line\"><span class=\"keyword\">del</span> mylist[<span class=\"number\">0</span>] <span class=\"comment\"># remove first item</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'shoplist is'</span>, shoplist</span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'mylist is'</span>, mylist</span><br><span class=\"line\"><span class=\"comment\"># notice that now the two lists are different</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"输出-5\"><a href=\"#输出-5\" class=\"headerlink\" title=\"输出\"></a>输出</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python reference.py</span><br><span class=\"line\">Simple Assignment</span><br><span class=\"line\">shoplist is [<span class=\"string\">'mango'</span>, <span class=\"string\">'carrot'</span>, <span class=\"string\">'banana'</span>]</span><br><span class=\"line\">mylist is [<span class=\"string\">'mango'</span>, <span class=\"string\">'carrot'</span>, <span class=\"string\">'banana'</span>]</span><br><span class=\"line\">Copy by making a full slice</span><br><span class=\"line\">shoplist is [<span class=\"string\">'mango'</span>, <span class=\"string\">'carrot'</span>, <span class=\"string\">'banana'</span>]</span><br><span class=\"line\">mylist is [<span class=\"string\">'carrot'</span>, <span class=\"string\">'banana'</span>]</span><br></pre></td></tr></table></figure>\n<h2 id=\"如何工作-5\"><a href=\"#如何工作-5\" class=\"headerlink\" title=\"如何工作\"></a>如何工作</h2><p>大多数解释已经在程序注释中了<br>需要记住的是，如果想复制一个列表，或者类似的序列或者其他复杂的对象(不是整数那样的<em> 简单对象 </em>)，则需要使用切片操作符来取得拷贝<br>如果只使用变量赋值，则两个变量都<em> 引用 </em>另一个对象</p>\n<h1 id=\"9-7-更多字符串的内容\"><a href=\"#9-7-更多字符串的内容\" class=\"headerlink\" title=\"9.7 更多字符串的内容\"></a>9.7 更多字符串的内容</h1><p>字符串也是对象，同样具有方法，可以完成包括检验一部分字符串和去除空格在内的各种工作<br>在程序中使用的字符串，都是str类的对象，下面例子说明其中一些方法，具体列表参见help(str)</p>\n<h2 id=\"字符串的方法\"><a href=\"#字符串的方法\" class=\"headerlink\" title=\"字符串的方法\"></a>字符串的方法</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># Filename: str_methods.py</span></span><br><span class=\"line\"></span><br><span class=\"line\">name = <span class=\"string\">'Swaroop'</span> <span class=\"comment\"># This is a string object </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> name.startswith(<span class=\"string\">'Swa'</span>):</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'Yes, the string starts with \"Swa\"'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"string\">'a'</span> <span class=\"keyword\">in</span> name:</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'Yes, it contains the string \"a\"'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> name.find(<span class=\"string\">'war'</span>) != <span class=\"number\">-1</span>:</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'Yes, it contains the string \"war\"'</span></span><br><span class=\"line\"></span><br><span class=\"line\">delimiter = <span class=\"string\">'_*_'</span></span><br><span class=\"line\">mylist = [<span class=\"string\">'Brazil'</span>, <span class=\"string\">'Russia'</span>, <span class=\"string\">'India'</span>, <span class=\"string\">'China'</span>]</span><br><span class=\"line\"><span class=\"keyword\">print</span> delimiter.join(mylist)</span><br></pre></td></tr></table></figure>\n<h2 id=\"输出-6\"><a href=\"#输出-6\" class=\"headerlink\" title=\"输出\"></a>输出</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python str_methods.py</span><br><span class=\"line\">Yes, the string starts with <span class=\"string\">\"Swa\"</span></span><br><span class=\"line\">Yes, it contains the string <span class=\"string\">\"a\"</span></span><br><span class=\"line\">Yes, it contains the string <span class=\"string\">\"war\"</span></span><br><span class=\"line\">Brazil_*_Russia_*_India_*_China</span><br></pre></td></tr></table></figure>\n<h2 id=\"如何工作-6\"><a href=\"#如何工作-6\" class=\"headerlink\" title=\"如何工作\"></a>如何工作</h2><p>startwith方法测试字符串是否以给定字符串开始<br>in操作符检验一个给定字符串是否为另一个字符串的一部分<br>find方法用来找出给定字符串在另一个字符串中的位置，或返回-1表示找不到子字符串<br>str类的join方法，用一个作为分隔符的字符串连接序列的项目，返回生成的大字符串</p>\n","categories":["Python"],"tags":["Python"]},{"title":"简明Python教程-8.模块","url":"http://dotrabbit.tk/Python/000100-简明Python教程-8.模块/","content":"<h1 id=\"8-1-简介\"><a href=\"#8-1-简介\" class=\"headerlink\" title=\"8.1 简介\"></a>8.1 简介</h1><p>上一章介绍了如何通过在程序中定义函数而重用代码，如果想在其他程序中重用很多函数呢？<br><strong>模块</strong>基本上就是一个包含了所有你定义的函数和变量的文件<br>* 为了在其他程序中重用模块，模块的文件名<strong> 必须 </strong>以.py为扩展名<br>模块可以从其他程序<em> 导入 </em>以使用它的功能，这也是我们使用Python标准库的方法</p>\n<h2 id=\"使用sys模块\"><a href=\"#使用sys模块\" class=\"headerlink\" title=\"使用sys模块\"></a>使用sys模块</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># Filename: using_sys.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'The command line arguments are:'</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> sys.argv:</span><br><span class=\"line\">    <span class=\"keyword\">print</span> i</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'\\n\\nThe PYTHONPATH is'</span>, sys.path, <span class=\"string\">'\\n'</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python using_sys.py we are arguments</span><br><span class=\"line\">The <span class=\"built_in\">command</span> line arguments are:</span><br><span class=\"line\">using_sys.py</span><br><span class=\"line\">we</span><br><span class=\"line\">are</span><br><span class=\"line\">arguments</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">The PYTHONPATH is [<span class=\"string\">'/home/swaroop/byte/code'</span>, <span class=\"string\">'/usr/lib/python23.zip'</span>,</span><br><span class=\"line\"><span class=\"string\">'/usr/lib/python2.3'</span>, <span class=\"string\">'/usr/lib/python2.3/plat-linux2'</span>,</span><br><span class=\"line\"><span class=\"string\">'/usr/lib/python2.3/lib-tk'</span>, <span class=\"string\">'/usr/lib/python2.3/lib-dynload'</span>,</span><br><span class=\"line\"><span class=\"string\">'/usr/lib/python2.3/site-packages'</span>, <span class=\"string\">'/usr/lib/python2.3/site-packages/gtk-2.0'</span>]</span><br></pre></td></tr></table></figure>\n<h2 id=\"如何工作\"><a href=\"#如何工作\" class=\"headerlink\" title=\"如何工作\"></a>如何工作</h2><p>1、利用import语句，<em> 导入 </em>sys模块，这句语句告诉Python，我们想要使用这个模块<br>* sys模块包含了与Python解释器和它的环境有关的函数<br>2、Python执行import sys语句的时候，它在sys.path变量中所列目录中寻找sys.py模块。如果找到了这个文件，这个模块的主块中的语句将被运行，然后这个模块就能够<em> 使用 </em>了。<br>注意，初始化过程仅在<em> 第一次 </em>导入模块的时候进行。另外sys是system的缩写<br>3、sys模块中的argv变量通过使用点号指明——sys.argv<br>优势：名称不会与你的程序中使用的argv变量冲突；清晰地表明了这个名称是sys模块的一部分<br>4、sys.argv是一个字符串的<em> 列表 </em>，包含了<em> 命令行参数 </em>的列表，即用命令行传递给程序的参数<br>如果使用IDE，请在菜单中寻找指定程序命令行参数的方法<br>执行python using_sys.py we are arguments，即使用python命令运行using_sys.py模块，后面跟着的内容被作为参数传递给程序，Python为我们把它存储在sys.argv变量中<br>5、脚本名称总是sys.argv列表的第一个参数<br>Python从0开始计数，’using_sys.py’是sys.argv[0]、’we’是sys.argv[1]、’are’是sys.argv[2]以及’arguments’是sys.argv[3]<br>6、sys.path包含导入模块的目录名列表，与PYTHONPATH环境变量是相同的</p>\n<h1 id=\"8-2-字节编译的-pyc文件\"><a href=\"#8-2-字节编译的-pyc文件\" class=\"headerlink\" title=\"8.2 字节编译的.pyc文件\"></a>8.2 字节编译的.pyc文件</h1><p>导入模块相对费时，Python做了一些技巧。<br>包括创建<em> 字节编译的文件 </em>，这些文件以.pyc作为扩展名<br>字节编译的文件与Python变换程序的中间状态有关(见第一章介绍中的“解释性”)<br>导入模块时.pyc文件快得多，因为一部分导入模块所需的处理已经完成了，且这些字节编译文件也是平台无关的</p>\n<h1 id=\"8-3-from-import语句\"><a href=\"#8-3-from-import语句\" class=\"headerlink\" title=\"8.3 from..import语句\"></a>8.3 from..import语句</h1><p>如果想要直接用argv，而不是sys.argv来使用变量，可以使用 from sys import argv 语句<br>如果想要导入所有sys模块使用的名字，可以使用 from sys import * 语句<br>这对所有模块都适用<br>一般来说，应避免使用 from..import ，而使用import语句，使程序更加易读，也避免名称冲突</p>\n<h1 id=\"8-4-模块的-name\"><a href=\"#8-4-模块的-name\" class=\"headerlink\" title=\"8.4 模块的__name__\"></a>8.4 模块的__name__</h1><p>每个模块都有一个名称，在模块中可以通过语句来找出。<br>当第一次导入一个模块时，将运行它的主块。<br>可以利用__name__属性，来区分程序本身被使用还是被别的模块导入：</p>\n<h2 id=\"使用模块的-name\"><a href=\"#使用模块的-name\" class=\"headerlink\" title=\"使用模块的__name__\"></a>使用模块的__name__</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># Filename: using_name.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'This program is being run by itself'</span></span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'I am being imported from another module'</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"输出-1\"><a href=\"#输出-1\" class=\"headerlink\" title=\"输出\"></a>输出</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python using_name.py</span><br><span class=\"line\">This program is being run by itself</span><br><span class=\"line\"></span><br><span class=\"line\">$ python</span><br><span class=\"line\">&gt;&gt;&gt; import using_name</span><br><span class=\"line\">I am being imported from another module</span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"如何工作-1\"><a href=\"#如何工作-1\" class=\"headerlink\" title=\"如何工作\"></a>如何工作</h2><p>每个Python模块都有__name__，如果它是__main__，则说明该模块被用户单独运行。</p>\n<h1 id=\"8-5-制作你自己的模块\"><a href=\"#8-5-制作你自己的模块\" class=\"headerlink\" title=\"8.5 制作你自己的模块\"></a>8.5 制作你自己的模块</h1><p>创建模块非常简单，我们也一直在这样做。每个Python程序也是一个模块。</p>\n<h2 id=\"创建你自己的模块\"><a href=\"#创建你自己的模块\" class=\"headerlink\" title=\"创建你自己的模块\"></a>创建你自己的模块</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># Filename: mymodule.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayhi</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'Hi, this is mymodule speaking.'</span></span><br><span class=\"line\"></span><br><span class=\"line\">version = <span class=\"string\">'0.1'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># End of mymodule.py</span></span><br></pre></td></tr></table></figure>\n<p>上面是一个<em> 模块 </em>的例子，它与普通的Python程序相比没有什么特别之处<br>在别的Python程序中使用这个模块(模块应放置在导入它的程序同目录或sys.path的目录中)：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># Filename: mymodule_demo.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> mymodule</span><br><span class=\"line\"></span><br><span class=\"line\">mymodule.sayhi()</span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'Version'</span>, mymodule.version</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"输出-2\"><a href=\"#输出-2\" class=\"headerlink\" title=\"输出\"></a>输出</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python mymodule_demo.py</span><br><span class=\"line\">Hi, this is mymodule speaking.</span><br><span class=\"line\">Version 0.1</span><br></pre></td></tr></table></figure>\n<h2 id=\"如何工作-2\"><a href=\"#如何工作-2\" class=\"headerlink\" title=\"如何工作\"></a>如何工作</h2><p>Python重用了点号，来使用模块的成员</p>\n<h2 id=\"from-import\"><a href=\"#from-import\" class=\"headerlink\" title=\"from..import\"></a>from..import</h2><p>使用from..import语法的版本：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># Filename: mymodule_demo2.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> mymodule <span class=\"keyword\">import</span> sayhi, version</span><br><span class=\"line\"><span class=\"comment\"># Alternative:</span></span><br><span class=\"line\"><span class=\"comment\"># from mymodule import *</span></span><br><span class=\"line\"></span><br><span class=\"line\">sayhi()</span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'Version'</span>, version</span><br></pre></td></tr></table></figure></p>\n<p>Mymodule_demo2.py的输出与mymodule_demo.py完全相同</p>\n<h1 id=\"8-6-dir-函数\"><a href=\"#8-6-dir-函数\" class=\"headerlink\" title=\"8.6 dir()函数\"></a>8.6 dir()函数</h1><p>內建的dir函数可以列出模块定义的标识符，包括函数、类和变量<br>提供参数为模块名时，返回该模块定义的名称列表<br>不提供参数时，返回当前模块中定义的名称列表</p>\n<h2 id=\"使用dir函数\"><a href=\"#使用dir函数\" class=\"headerlink\" title=\"使用dir函数\"></a>使用dir函数</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python</span><br><span class=\"line\">&gt;&gt;&gt; import sys</span><br><span class=\"line\">&gt;&gt;&gt; dir(sys) <span class=\"comment\"># get list of attributes for sys module</span></span><br><span class=\"line\">[<span class=\"string\">'__displayhook__'</span>, <span class=\"string\">'__doc__'</span>, <span class=\"string\">'__excepthook__'</span>, <span class=\"string\">'__name__'</span>, <span class=\"string\">'__stderr__'</span>,</span><br><span class=\"line\"><span class=\"string\">'__stdin__'</span>, <span class=\"string\">'__stdout__'</span>, <span class=\"string\">'_getframe'</span>, <span class=\"string\">'api_version'</span>, <span class=\"string\">'argv'</span>,</span><br><span class=\"line\"><span class=\"string\">'builtin_module_names'</span>, <span class=\"string\">'byteorder'</span>, <span class=\"string\">'call_tracing'</span>, <span class=\"string\">'callstats'</span>,</span><br><span class=\"line\"><span class=\"string\">'copyright'</span>, <span class=\"string\">'displayhook'</span>, <span class=\"string\">'exc_clear'</span>, <span class=\"string\">'exc_info'</span>, <span class=\"string\">'exc_type'</span>,</span><br><span class=\"line\"><span class=\"string\">'excepthook'</span>, <span class=\"string\">'exec_prefix'</span>, <span class=\"string\">'executable'</span>, <span class=\"string\">'exit'</span>, <span class=\"string\">'getcheckinterval'</span>,</span><br><span class=\"line\"><span class=\"string\">'getdefaultencoding'</span>, <span class=\"string\">'getdlopenflags'</span>, <span class=\"string\">'getfilesystemencoding'</span>,</span><br><span class=\"line\"><span class=\"string\">'getrecursionlimit'</span>, <span class=\"string\">'getrefcount'</span>, <span class=\"string\">'hexversion'</span>, <span class=\"string\">'maxint'</span>, <span class=\"string\">'maxunicode'</span>,</span><br><span class=\"line\"><span class=\"string\">'meta_path'</span>,<span class=\"string\">'modules'</span>, <span class=\"string\">'path'</span>, <span class=\"string\">'path_hooks'</span>, <span class=\"string\">'path_importer_cache'</span>,</span><br><span class=\"line\"><span class=\"string\">'platform'</span>, <span class=\"string\">'prefix'</span>, <span class=\"string\">'ps1'</span>, <span class=\"string\">'ps2'</span>, <span class=\"string\">'setcheckinterval'</span>, <span class=\"string\">'setdlopenflags'</span>,</span><br><span class=\"line\"><span class=\"string\">'setprofile'</span>, <span class=\"string\">'setrecursionlimit'</span>, <span class=\"string\">'settrace'</span>, <span class=\"string\">'stderr'</span>, <span class=\"string\">'stdin'</span>, <span class=\"string\">'stdout'</span>,</span><br><span class=\"line\"><span class=\"string\">'version'</span>, <span class=\"string\">'version_info'</span>, <span class=\"string\">'warnoptions'</span>]</span><br><span class=\"line\">&gt;&gt;&gt; dir() <span class=\"comment\"># get list of attributes for current module</span></span><br><span class=\"line\">[<span class=\"string\">'__builtins__'</span>, <span class=\"string\">'__doc__'</span>, <span class=\"string\">'__name__'</span>, <span class=\"string\">'sys'</span>]</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">&gt;&gt;&gt; a = 5 <span class=\"comment\"># create a new variable 'a'</span></span><br><span class=\"line\">&gt;&gt;&gt; dir()</span><br><span class=\"line\">[<span class=\"string\">'__builtins__'</span>, <span class=\"string\">'__doc__'</span>, <span class=\"string\">'__name__'</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'sys'</span>]</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">&gt;&gt;&gt; del a <span class=\"comment\"># delete/remove a name</span></span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">&gt;&gt;&gt; dir()</span><br><span class=\"line\">[<span class=\"string\">'__builtins__'</span>, <span class=\"string\">'__doc__'</span>, <span class=\"string\">'__name__'</span>, <span class=\"string\">'sys'</span>]</span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"如何工作-3\"><a href=\"#如何工作-3\" class=\"headerlink\" title=\"如何工作\"></a>如何工作</h2><p>首先，在引入的sys模块上使用dir，查看其属性列表<br>然后，不给dir函数传递参数，默认地，返回当前模块的属性列表<br>引入的模块同样是列表的一部分<br>定义新变量a并赋值，观察到列表中增加了相同的值，使用del语句删除当前模块中的变量/属性，变化反映在了dir的输出中<br>del语句在运行后可以<em> 删除 </em>一个变量/名称，del a之后变量a将无法再使用，就像没存在过一样</p>\n","categories":["Python"],"tags":["Python"]},{"title":"简明Python教程-7.函数","url":"http://dotrabbit.tk/Python/000099-简明Python教程-7.函数/","content":"<h1 id=\"7-1-简介\"><a href=\"#7-1-简介\" class=\"headerlink\" title=\"7.1 简介\"></a>7.1 简介</h1><p>1、函数是重用的程序段<br>2、给一块语句一个名称，然后在程序的任何地方使用这个名称任意多次地运行这个语句块，称为<em> 调用 </em>函数<br>3、函数通过<strong> def </strong>关键字定义<br>* def关键字后跟一个函数的<em> 标识符 </em>名称，然后跟一个圆括号<br>* 圆括号之中可以包括一些变量名<br>* 该行以冒号结尾<br>4、接下来是一块语句，称为<em> 函数体 </em></p>\n<h2 id=\"定义函数\"><a href=\"#定义函数\" class=\"headerlink\" title=\"定义函数\"></a>定义函数</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># Filename: function1.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayHello</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'Hello World!'</span> <span class=\"comment\"># block belonging to the function</span></span><br><span class=\"line\"></span><br><span class=\"line\">sayHello() <span class=\"comment\"># call the function</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python function1.py</span><br><span class=\"line\">Hello World!</span><br></pre></td></tr></table></figure>\n<h2 id=\"如何工作\"><a href=\"#如何工作\" class=\"headerlink\" title=\"如何工作\"></a>如何工作</h2><p>1、定义一个称为sayHello的函数<br>2、此函数无参数，因此圆括号中没有声明任何变量<br>3、参数是给函数的输入，传递给函数不同的值，得到相应的结果</p>\n<h1 id=\"7-2-函数形参\"><a href=\"#7-2-函数形参\" class=\"headerlink\" title=\"7.2 函数形参\"></a>7.2 函数形参</h1><p>1、函数的参数是你提供给函数的值，就像变量一样<br>2、参数在函数的圆括号内指定，用逗号分隔<br>3、调用函数时，同样以圆括号和逗号的方式提供值<br>4、术语：<br>函数中的参数称为<em> 形参 </em><br>提供给函数调用的值称为<em> 实参 </em></p>\n<h2 id=\"使用函数形参\"><a href=\"#使用函数形参\" class=\"headerlink\" title=\"使用函数形参\"></a>使用函数形参</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># Filename: func_param.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">printMax</span><span class=\"params\">(a, b)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> a &gt; b:</span><br><span class=\"line\">        <span class=\"keyword\">print</span> a, <span class=\"string\">'is maximum'</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">print</span> b, <span class=\"string\">'is maximum'</span></span><br><span class=\"line\"></span><br><span class=\"line\">printMax(<span class=\"number\">3</span>, <span class=\"number\">4</span>) <span class=\"comment\"># directly give literal values</span></span><br><span class=\"line\"></span><br><span class=\"line\">x = <span class=\"number\">5</span></span><br><span class=\"line\">y = <span class=\"number\">7</span></span><br><span class=\"line\"></span><br><span class=\"line\">printMax(x, y) <span class=\"comment\"># give variables as arguments</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"输出-1\"><a href=\"#输出-1\" class=\"headerlink\" title=\"输出\"></a>输出</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python func_param.py</span><br><span class=\"line\">4 is maximum</span><br><span class=\"line\">7 is maximum</span><br></pre></td></tr></table></figure>\n<h2 id=\"如何工作-1\"><a href=\"#如何工作-1\" class=\"headerlink\" title=\"如何工作\"></a>如何工作</h2><p>1、定义一个称为printMax的函数，该函数有两个形参，叫做a和b<br>2、使用if..else语句找出两者之中较大的一个，并打印<br>3、第一次调用将数字作为<em> 实参 </em>传递给函数，第二次调用中将变量作为<em> 实参 </em>，两次调用printMax函数的工作完全相同</p>\n<h1 id=\"7-3-局部变量\"><a href=\"#7-3-局部变量\" class=\"headerlink\" title=\"7.3 局部变量\"></a>7.3 局部变量</h1><p>1、在函数定义内声明的变量，与函数外具有相同名称的其他变量没有任何关系<br>2、变量名称对于函数来说是<em> 局部 </em>的<br>3、变量的<em> 作用域 </em>：所有变量的作用域是它们被定义的块，从它们的名称被定义的那点开始</p>\n<h2 id=\"使用局部变量\"><a href=\"#使用局部变量\" class=\"headerlink\" title=\"使用局部变量\"></a>使用局部变量</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># Filename: func_local.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'x is'</span>, x</span><br><span class=\"line\">    x = <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'Changed local x to'</span>, x</span><br><span class=\"line\"></span><br><span class=\"line\">x = <span class=\"number\">50</span></span><br><span class=\"line\">func(x)</span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'x is still'</span>, x</span><br></pre></td></tr></table></figure>\n<h2 id=\"输出-2\"><a href=\"#输出-2\" class=\"headerlink\" title=\"输出\"></a>输出</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python func_local.py</span><br><span class=\"line\">x is 50</span><br><span class=\"line\">Changed <span class=\"built_in\">local</span> x to 2</span><br><span class=\"line\">x is still 50</span><br></pre></td></tr></table></figure>\n<h2 id=\"如何工作-2\"><a href=\"#如何工作-2\" class=\"headerlink\" title=\"如何工作\"></a>如何工作</h2><p>第一个print：打印形参x的值，50<br>第二个print：打印局部变量x的新值，2<br>第三个print：打印主块中x的值，不受影响</p>\n<h2 id=\"使用global语句\"><a href=\"#使用global语句\" class=\"headerlink\" title=\"使用global语句\"></a>使用global语句</h2><p>1、global语句告诉Python一个变量名不是局部的，是全局的<br>2、使用global语句，可以为一个定义在函数外的变量赋值的功能<br>3、在函数内，可以直接使用定义在函数外的变量的值(如果函数内没有同名变量)，但应避免这么做，因为这使得程序的读者不清楚这是在哪里定义的，使用global语句可以清楚地表明变量是在函数外的块定义的<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># Filename: func_global.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> x</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'x is'</span>, x</span><br><span class=\"line\">    x = <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'Changed local x to'</span>, x</span><br><span class=\"line\"></span><br><span class=\"line\">x = <span class=\"number\">50</span></span><br><span class=\"line\">func()</span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'Value of x is'</span>, x</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"输出-3\"><a href=\"#输出-3\" class=\"headerlink\" title=\"输出\"></a>输出</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python func_global.py</span><br><span class=\"line\">x is 50</span><br><span class=\"line\">Changed global x to 2</span><br><span class=\"line\">Value of x is 2</span><br></pre></td></tr></table></figure>\n<h2 id=\"如何工作-3\"><a href=\"#如何工作-3\" class=\"headerlink\" title=\"如何工作\"></a>如何工作</h2><p>global语句生命x是<em> 全局 </em>的，因此当在函数内把值赋给x的时候，这个变化也反应在主块中使用x的值的时候<br>可以使用global语句指定多个全局变量，如global x, y, z</p>\n<h1 id=\"7-4-默认参数值\"><a href=\"#7-4-默认参数值\" class=\"headerlink\" title=\"7.4 默认参数值\"></a>7.4 默认参数值</h1><p>1、对于一些函数，可能希望它的一些参数是<em> 可选 </em>的，当调用时不提供这些参数的值的话，就使用默认值，此功能借助默认参数值完成<br>2、在函数定义的形参名后加上赋值运算符(=)和默认值，从而给形参指定默认参数值<br>3、默认参数值应该是一个参数，应该是不可变的</p>\n<h2 id=\"使用默认参数值\"><a href=\"#使用默认参数值\" class=\"headerlink\" title=\"使用默认参数值\"></a>使用默认参数值</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># Filename: func_default.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">say</span><span class=\"params\">(message, times = <span class=\"number\">1</span>)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> message * times</span><br><span class=\"line\"></span><br><span class=\"line\">say(<span class=\"string\">'Hello'</span>)</span><br><span class=\"line\">say(<span class=\"string\">'World'</span>, <span class=\"number\">5</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"输出-4\"><a href=\"#输出-4\" class=\"headerlink\" title=\"输出\"></a>输出</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python func_default.py</span><br><span class=\"line\">Hello</span><br><span class=\"line\">WorldWorldWorldWorldWorld</span><br></pre></td></tr></table></figure>\n<h2 id=\"如何工作-4\"><a href=\"#如何工作-4\" class=\"headerlink\" title=\"如何工作\"></a>如何工作</h2><p>1、名为say的函数用来打印一个字符任意所需的次数<br>2、如果不提供值，则默认打印一遍。通过给形参times指定默认参数值1来实现此功能<br>3、调用：<br>第一次，只提供一个字符串，打印一次；<br>第二次，提供了字符串和参数5，打印5次<br>4、重要：<br><strong> 只有在形参表末尾的那些参数可以有默认参数值 </strong><br>即不能在声明函数形参的时候，先声明有默认值的形参，后声明没有默认值的形参，因为赋给形参的值是根据位置而复制的<br>例如，def func(a, b=5)有效，dec func(a=5, b)无效</p>\n<h1 id=\"7-5-关键参数\"><a href=\"#7-5-关键参数\" class=\"headerlink\" title=\"7.5 关键参数\"></a>7.5 关键参数</h1><p>1、可以通过命名，来为函数的许多参数中的，一部分参数赋值，这被称作<em> 关键参数 </em><br>2、使用名字(关键字)，而不是位置，来给函数指定实参<br>3、优势：不用担心参数顺序；可以只给想要的参数赋值</p>\n<h2 id=\"使用关键参数\"><a href=\"#使用关键参数\" class=\"headerlink\" title=\"使用关键参数\"></a>使用关键参数</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># Filename: func_key.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span><span class=\"params\">(a, b=<span class=\"number\">5</span>, c=<span class=\"number\">10</span>)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'a is'</span>, a, <span class=\"string\">'and b is'</span>, b, <span class=\"string\">'and c is'</span>, c</span><br><span class=\"line\"></span><br><span class=\"line\">func(<span class=\"number\">3</span>, <span class=\"number\">7</span>)</span><br><span class=\"line\">func(<span class=\"number\">25</span>, c=<span class=\"number\">24</span>)</span><br><span class=\"line\">func(c=<span class=\"number\">50</span>, a=<span class=\"number\">100</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"输出-5\"><a href=\"#输出-5\" class=\"headerlink\" title=\"输出\"></a>输出</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python func_key.py</span><br><span class=\"line\">a is 3 and b is 7 and c is 10</span><br><span class=\"line\">a is 25 and b is 5 and c is 24</span><br><span class=\"line\">a is 100 and b is 5 and c is 50</span><br></pre></td></tr></table></figure>\n<h2 id=\"如何工作-5\"><a href=\"#如何工作-5\" class=\"headerlink\" title=\"如何工作\"></a>如何工作</h2><p>1、func函数有一个没有默认值的参数，和两个有默认值的参数<br>2、第一次调用，func(3, 7)，a=3(实参位置)，b=7(实参位置)，c=10(默认值)<br>3、第二次调用，fimc(25, c=24)，a=25(实参位置)，b=5(默认值)，c=24(关键参数)<br>4、第三次调用，func(c=50, a=100)，完全使用关键参数指定参数值，可以不用根据顺序来指定参数</p>\n<h1 id=\"7-6-return语句\"><a href=\"#7-6-return语句\" class=\"headerlink\" title=\"7.6 return语句\"></a>7.6 return语句</h1><p>return语句用来从一个函数<em> 返回 </em>，即跳出函数<br>也可以从函数<em> 返回 </em>一个值</p>\n<h2 id=\"使用字面意义上的语句\"><a href=\"#使用字面意义上的语句\" class=\"headerlink\" title=\"使用字面意义上的语句\"></a>使用字面意义上的语句</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># Filename: func_return.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">maximum</span><span class=\"params\">(x, y)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> x &gt; y:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> y</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> maximum(<span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"输出-6\"><a href=\"#输出-6\" class=\"headerlink\" title=\"输出\"></a>输出</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python func_return.py</span><br><span class=\"line\">3</span><br></pre></td></tr></table></figure>\n<h2 id=\"如何工作-6\"><a href=\"#如何工作-6\" class=\"headerlink\" title=\"如何工作\"></a>如何工作</h2><p>1、maximum函数通过if..else语句比较出较大值，然后<em> 返回 </em>值<br>2、如果没有返回值的return语句，等价于return None<br>* None是Python中表示没有任何东西的特殊类型<br>3、如果不提供return语句，函数会在结尾暗含一个return None语句</p>\n<h1 id=\"7-7-DocStrings\"><a href=\"#7-7-DocStrings\" class=\"headerlink\" title=\"7.7 DocStrings\"></a>7.7 DocStrings</h1><p>Python有一个很奇妙的特性，称为<em> 文档 </em>字符串，通常被称为<em> docstrings </em><br>应当尽量使用DocStrings。它可以使程序文档更加简单易懂；可以在程序运行时，从函数恢复文档字符串</p>\n<h2 id=\"使用DocStrings\"><a href=\"#使用DocStrings\" class=\"headerlink\" title=\"使用DocStrings\"></a>使用DocStrings</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># Filename: func_doc.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">printMax</span><span class=\"params\">(x, y)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">'''Prints the maximum of two numbers.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    The two values must be integers.'''</span></span><br><span class=\"line\">    x = int(x) <span class=\"comment\"># convert to integers, if possible</span></span><br><span class=\"line\">    y = int(y)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> x &gt; y:</span><br><span class=\"line\">        <span class=\"keyword\">print</span> x, <span class=\"string\">'is maximum'</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">print</span> y, <span class=\"string\">'is maximum'</span></span><br><span class=\"line\"></span><br><span class=\"line\">printMax(<span class=\"number\">3</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"keyword\">print</span> printMax.__doc__</span><br></pre></td></tr></table></figure>\n<h2 id=\"如何工作-7\"><a href=\"#如何工作-7\" class=\"headerlink\" title=\"如何工作\"></a>如何工作</h2><p>1、函数第一个逻辑行的字符串，是这个函数的<em> 文档字符串 </em>。另外，DocStrings也适用于<em> 模块 </em>和<em> 类 </em><br>2、文档字符串的惯例是一个多行字符串：<br>第一行：以大写字母开始，句号结尾<br>第二行：空行<br>第三行：详细的描述<br><em>强烈建议</em>在你的函数中使用文档字符串时，遵循这个惯例<br>3、可以使用<strong>doc</strong>(注意双下划线)，调用文档字符串属性<br>* Python把<em> 每一样东西 </em>都作为对象，包括这个函数，后面章节详细介绍<br>4、help()函数所做的，就是抓取函数的<strong>doc</strong>属性，然后展示<br>* 可以调用help(printMax)查看，按q退出help</p>\n","categories":["Python"],"tags":["Python"]},{"title":"简明Python教程-6.控制流","url":"http://dotrabbit.tk/Python/000098-简明Python教程-6.控制流/","content":"<h1 id=\"6-1-简介\"><a href=\"#6-1-简介\" class=\"headerlink\" title=\"6.1 简介\"></a>6.1 简介</h1><p>通过控制流语句实现语句流的执行顺序。<br>Python中有三种控制流语句——if、for和while</p>\n<h1 id=\"6-2-if语句\"><a href=\"#6-2-if语句\" class=\"headerlink\" title=\"6.2 if语句\"></a>6.2 if语句</h1><p>if语句用来检验一个条件<br>如果为真，运行一块语句(称为if-块)<br>否则，处理另外一块语句(称为else-块)<br>else从句是可选的</p>\n<h2 id=\"使用if语句\"><a href=\"#使用if语句\" class=\"headerlink\" title=\"使用if语句\"></a>使用if语句</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># Filename: if.py</span></span><br><span class=\"line\"></span><br><span class=\"line\">number = <span class=\"number\">23</span></span><br><span class=\"line\">guess = int(raw_input(<span class=\"string\">'Enter an integer : '</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> guess == number:</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'Congratulations, you guessed it.'</span> <span class=\"comment\"># New block starts here</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"(but you do not win any prizes!)\"</span> <span class=\"comment\"># New block ends here</span></span><br><span class=\"line\"><span class=\"keyword\">elif</span> guess &lt; number:</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'No, it is a little higher than that'</span> <span class=\"comment\"># Another block</span></span><br><span class=\"line\">    <span class=\"comment\"># You can do whatever you want in a block ...</span></span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'No, it is a little lower than that'</span> </span><br><span class=\"line\">    <span class=\"comment\"># you must have guess &gt; number to reach here</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'Done'</span></span><br><span class=\"line\"><span class=\"comment\"># This last statement is always executed, after the if statement is executed</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python if.py</span><br><span class=\"line\">Enter an <span class=\"built_in\">integer</span> : 50</span><br><span class=\"line\">No, it is a little lower than that</span><br><span class=\"line\">Done</span><br><span class=\"line\">$ python if.py</span><br><span class=\"line\">Enter an <span class=\"built_in\">integer</span> : 22</span><br><span class=\"line\">No, it is a little higher than that</span><br><span class=\"line\">Done</span><br><span class=\"line\">$ python if.py</span><br><span class=\"line\">Enter an <span class=\"built_in\">integer</span> : 23</span><br><span class=\"line\">Congratulations, you guessed it.</span><br><span class=\"line\">(but you <span class=\"keyword\">do</span> not win any prizes!)</span><br><span class=\"line\">Done</span><br></pre></td></tr></table></figure>\n<h2 id=\"如何工作\"><a href=\"#如何工作\" class=\"headerlink\" title=\"如何工作\"></a>如何工作</h2><p>程序首先将目标数字预设为23<br>然后通过raw_input()函数获取用户猜测的数字(函数是重用的程序段，见下一章)<br>接下来将用户猜测与目标数字做比较，打印相应消息<br>* Python中没有switch语句，可以使用if..elif..else语句或字典来完成同样的工作</p>\n<h1 id=\"6-3-while语句\"><a href=\"#6-3-while语句\" class=\"headerlink\" title=\"6.3 while语句\"></a>6.3 while语句</h1><p>while语句是循环语句的一个例子<br>在一个条件为真的情况下，while语句重复执行一块语句<br>while语句有一个可选的else语句</p>\n<h2 id=\"使用while语句\"><a href=\"#使用while语句\" class=\"headerlink\" title=\"使用while语句\"></a>使用while语句</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># Filename: while.py</span></span><br><span class=\"line\"></span><br><span class=\"line\">number = <span class=\"number\">23</span></span><br><span class=\"line\">running = <span class=\"keyword\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> running:</span><br><span class=\"line\">    guess = int(raw_input(<span class=\"string\">'Enter an integer : '</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> guess == number:</span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'Congratulations, you guessed it.'</span> </span><br><span class=\"line\">        running = <span class=\"keyword\">False</span> <span class=\"comment\"># this causes the while loop to stop</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> guess &lt; number:</span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'No, it is a little higher than that'</span> </span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'No, it is a little lower than that'</span> </span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'The while loop is over.'</span> </span><br><span class=\"line\">    <span class=\"comment\"># Do anything else you want to do here</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'Done'</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"输出-1\"><a href=\"#输出-1\" class=\"headerlink\" title=\"输出\"></a>输出</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python while.py</span><br><span class=\"line\">Enter an <span class=\"built_in\">integer</span> : 50</span><br><span class=\"line\">No, it is a little lower than that.</span><br><span class=\"line\">Enter an <span class=\"built_in\">integer</span> : 22</span><br><span class=\"line\">No, it is a little higher than that.</span><br><span class=\"line\">Enter an <span class=\"built_in\">integer</span> : 23</span><br><span class=\"line\">Congratulations, you guessed it.</span><br><span class=\"line\">The <span class=\"keyword\">while</span> loop is over.</span><br><span class=\"line\">Done</span><br></pre></td></tr></table></figure>\n<h2 id=\"如何工作-1\"><a href=\"#如何工作-1\" class=\"headerlink\" title=\"如何工作\"></a>如何工作</h2><p>让用户不断地猜数直到猜对为止，而不像刚才每次都需要重复执行一遍程序<br>raw_input和if语句被移到了while循环内，并在while循环开始前把running设为True<br>一直到running变为False，循环停止，执行else块<br>else实际上是多余的，可以将其中的语句放在与while同一个语句块中</p>\n<h1 id=\"6-4-for循环\"><a href=\"#6-4-for循环\" class=\"headerlink\" title=\"6.4 for循环\"></a>6.4 for循环</h1><p>for..in是另外一个循环语句<br>在一序列的对象上逐一使用队列中的每个项目(后续会学习序列)</p>\n<h2 id=\"使用for语句\"><a href=\"#使用for语句\" class=\"headerlink\" title=\"使用for语句\"></a>使用for语句</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># Filename: for.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, <span class=\"number\">5</span>):</span><br><span class=\"line\">    <span class=\"keyword\">print</span> i</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'The for loop is over'</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"输出-2\"><a href=\"#输出-2\" class=\"headerlink\" title=\"输出\"></a>输出</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python for.py</span><br><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">The <span class=\"keyword\">for</span> loop is over</span><br></pre></td></tr></table></figure>\n<h2 id=\"如何工作-2\"><a href=\"#如何工作-2\" class=\"headerlink\" title=\"如何工作\"></a>如何工作</h2><p>使用range函数生成一个数的序列，然后打印这个序列的数<br><em>range函数：<br>range从第一个参数到第二个参数为止，返回一个序列<br>如range(1,5)返回序列[1,2,3,4]<br>默认步长为1，可以用第三个参数指定<br>如range(1,5,2)返回[1,3]<br>range向上延伸到第二个参数，不包含第二个参数</em><br>for循环在序列内依次复制给i（for i in range(1,5)等价于for i in [1,2,3,4]），然后打印<br>else是可选的，总是在for循环结束后执行一次，除非遇到break语句<br>for..in循环对于任何序列都使用，可以使用任何种类的由任何对象组成的序列</p>\n<h1 id=\"6-5-break语句\"><a href=\"#6-5-break语句\" class=\"headerlink\" title=\"6.5 break语句\"></a>6.5 break语句</h1><p>break语句是用来终止循环语句的<br>如果从for或while循环中break，相应的else块将不执行</p>\n<h2 id=\"使用break语句\"><a href=\"#使用break语句\" class=\"headerlink\" title=\"使用break语句\"></a>使用break语句</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># Filename: break.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">    s = raw_input(<span class=\"string\">'Enter something : '</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> s == <span class=\"string\">'quit'</span>:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'Length of the string is'</span>, len(s)</span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'Done'</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"输出-3\"><a href=\"#输出-3\" class=\"headerlink\" title=\"输出\"></a>输出</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python break.py</span><br><span class=\"line\">Enter something : Programming is fun</span><br><span class=\"line\">Length of the string is 18</span><br><span class=\"line\">Enter something : When the work is <span class=\"keyword\">done</span></span><br><span class=\"line\">Length of the string is 21</span><br><span class=\"line\">Enter something : <span class=\"keyword\">if</span> you wanna make your work also fun:</span><br><span class=\"line\">Length of the string is 37</span><br><span class=\"line\">Enter something :       use Python!</span><br><span class=\"line\">Length of the string is 12</span><br><span class=\"line\">Enter something : quit</span><br><span class=\"line\">Done</span><br></pre></td></tr></table></figure>\n<h2 id=\"如何工作-3\"><a href=\"#如何工作-3\" class=\"headerlink\" title=\"如何工作\"></a>如何工作</h2><p>循环获取输入，并利用内建的len函数获取输入长度，并输出<br>当用户输入quit时，停止程序</p>\n<h1 id=\"6-6-continue语句\"><a href=\"#6-6-continue语句\" class=\"headerlink\" title=\"6.6 continue语句\"></a>6.6 continue语句</h1><p>continue语句告诉Python跳过当前循环块中的剩余语句，然后继续下一轮循环</p>\n<h2 id=\"使用coninue语句\"><a href=\"#使用coninue语句\" class=\"headerlink\" title=\"使用coninue语句\"></a>使用coninue语句</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># Filename: continue.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">    s = raw_input(<span class=\"string\">'Enter something : '</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> s == <span class=\"string\">'quit'</span>:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(s) &lt; <span class=\"number\">3</span>:</span><br><span class=\"line\">        <span class=\"keyword\">continue</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'Input is of sufficient length'</span></span><br><span class=\"line\">    <span class=\"comment\"># Do other kinds of processing here...</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"输出-4\"><a href=\"#输出-4\" class=\"headerlink\" title=\"输出\"></a>输出</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python continue.py</span><br><span class=\"line\">Enter something : a</span><br><span class=\"line\">Enter something : 12</span><br><span class=\"line\">Enter something : abc</span><br><span class=\"line\">Input is of sufficient length</span><br><span class=\"line\">Enter something : quit</span><br></pre></td></tr></table></figure>\n<h2 id=\"如何工作-4\"><a href=\"#如何工作-4\" class=\"headerlink\" title=\"如何工作\"></a>如何工作</h2><p>用户输入字符，仅当它们长度大于等于3时才处理，否则直接continue，忽略块中的剩余语句</p>\n","categories":["Python"],"tags":["Python"]},{"title":"简明Python教程-5.运算符与表达式","url":"http://dotrabbit.tk/Python/000097-简明Python教程-5.运算符与表达式/","content":"<h1 id=\"5-1-简介\"><a href=\"#5-1-简介\" class=\"headerlink\" title=\"5.1 简介\"></a>5.1 简介</h1><p>表达式可分解为运算符和操作数，如2+3。<br>运算符：完成某件事，如+符号，或其他特定的关键字<br>操作数：运算符运算的数据，如2和3</p>\n<h1 id=\"5-2-运算符\"><a href=\"#5-2-运算符\" class=\"headerlink\" title=\"5.2 运算符\"></a>5.2 运算符</h1><table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>名称</th>\n<th>说明</th>\n<th>例子</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>+</td>\n<td>加</td>\n<td>两个对象相加</td>\n<td>3 + 5得到8。’a’ + ‘b’得到’ab’</td>\n</tr>\n<tr>\n<td>-</td>\n<td>减</td>\n<td>得到负数或是一个数减去另一个数</td>\n<td>-5.2得到一个负数。50 - 24得到26</td>\n</tr>\n<tr>\n<td>*</td>\n<td>乘</td>\n<td>两个数相乘或是返回一个被重复若干次的字符串</td>\n<td>2 * 3得到6。’la’ * 3得到’lalala’</td>\n</tr>\n<tr>\n<td>**</td>\n<td>幂</td>\n<td>返回x的y次幂</td>\n<td>3 ** 4得到81（即3 * 3 * 3 * 3）</td>\n</tr>\n<tr>\n<td>/</td>\n<td>除</td>\n<td>x除以y</td>\n<td>4/3得到1（整数的除法得到整数结果）。4.0/3或4/3.0得到1.3333333333333333</td>\n</tr>\n<tr>\n<td>//</td>\n<td>取整除</td>\n<td>返回商的整数部分</td>\n<td>4 // 3.0得到1.0</td>\n</tr>\n<tr>\n<td>%</td>\n<td>取模</td>\n<td>返回除法的余数</td>\n<td>8%3得到2。-25.5%2.25得到1.5</td>\n</tr>\n<tr>\n<td>&lt;&lt;</td>\n<td>左移</td>\n<td>把一个数的比特向左移一定数目（每个数在内存中都表示为比特或二进制数字，即0和1）</td>\n<td>2 &lt;&lt; 2得到8（2按比特表示为10）</td>\n</tr>\n<tr>\n<td>&gt;&gt;</td>\n<td>右移</td>\n<td>把一个数的比特向右移一定数目</td>\n<td>11 &gt;&gt; 1得到5。（11按比特表示为1011，向右移动1比特后得到101，即十进制的5）</td>\n</tr>\n<tr>\n<td>&amp;</td>\n<td>按位与</td>\n<td>数的按位与</td>\n<td>5 &amp; 3得到1</td>\n</tr>\n<tr>\n<td>&#124;</td>\n<td>按位或</td>\n<td>数的按位或</td>\n<td>5 &#124; 3得到7</td>\n</tr>\n<tr>\n<td>^</td>\n<td>按位异或</td>\n<td>数的按位异或</td>\n<td>5 ^ 3得到6</td>\n</tr>\n<tr>\n<td>~</td>\n<td>按位翻转</td>\n<td>x的按位翻转是-(x+1)</td>\n<td>~5得到-6</td>\n</tr>\n<tr>\n<td>&lt;</td>\n<td>小于</td>\n<td>返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。注意，这些变量名的大写。</td>\n<td>5 &lt; 3返回0（即False）而3 &lt; 5返回1（即True）。比较可以被任意连接：3 &lt; 5 &lt; 7返回True</td>\n</tr>\n<tr>\n<td>&gt;</td>\n<td>大于</td>\n<td>返回x是否大于y</td>\n<td>5 &gt; 3返回True。如果两个操作数都是数字，它们首先被转换为一个共同的类型。否则，它总是返回False</td>\n</tr>\n<tr>\n<td>&lt;=</td>\n<td>小于等于</td>\n<td>返回x是否小于等于y</td>\n<td>x = 3; y = 6; x &lt;= y返回True</td>\n</tr>\n<tr>\n<td>&gt;=</td>\n<td>大于等于</td>\n<td>返回x是否大于等于y</td>\n<td>x = 4; y = 3; x &gt;= y返回True</td>\n</tr>\n<tr>\n<td>==</td>\n<td>等于</td>\n<td>比较对象是否相等</td>\n<td>x = 2; y = 2; x == y返回True。x = ‘str’; y = ‘stR’; x == y返回False。x = ‘str’; y = ‘str’; x == y返回True</td>\n</tr>\n<tr>\n<td>!=</td>\n<td>不等于</td>\n<td>比较两个对象是否不相等</td>\n<td>x = 2; y = 3; x != y返回True</td>\n</tr>\n<tr>\n<td>not</td>\n<td>布尔“非”</td>\n<td>如果x为True，返回False。如果x为False，它返回True。</td>\n<td>x = True; not x返回False</td>\n</tr>\n<tr>\n<td>and</td>\n<td>布尔“与”</td>\n<td>如果x为False，x and y返回False，否则它返回y的计算值。</td>\n<td>x = False; y = True; x and y，由于x是False，返回False。在这里，Python不会计算y，因为它知道这个表达式的值肯定是False（因为x是False）。这个现象称为短路计算</td>\n</tr>\n<tr>\n<td>or</td>\n<td>布尔“或”</td>\n<td>如果x是True，它返回True，否则它返回y的计算值。</td>\n<td>x = True; y = False; x or y返回True。短路计算在这里也适用</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"5-3-运算符优先级\"><a href=\"#5-3-运算符优先级\" class=\"headerlink\" title=\"5.3 运算符优先级\"></a>5.3 运算符优先级</h1><p>应当使用圆括号来明确运算顺序，但同时注意不要滥用。<br>优先级：</p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>lambda</td>\n<td>Lambda表达式</td>\n</tr>\n<tr>\n<td>or</td>\n<td>布尔“或”</td>\n</tr>\n<tr>\n<td>and</td>\n<td>布尔“与”</td>\n</tr>\n<tr>\n<td>not x</td>\n<td>布尔“非”</td>\n</tr>\n<tr>\n<td>in，not in</td>\n<td>成员测试</td>\n</tr>\n<tr>\n<td>is，is not</td>\n<td>同一性测试</td>\n</tr>\n<tr>\n<td>&lt;，&lt;=，&gt;，&gt;=，!=，==</td>\n<td>比较</td>\n</tr>\n<tr>\n<td>&#124;</td>\n<td>按位或</td>\n</tr>\n<tr>\n<td>^</td>\n<td>按位异或</td>\n</tr>\n<tr>\n<td>&amp;</td>\n<td>按位与</td>\n</tr>\n<tr>\n<td>&lt;&lt;，&gt;&gt;</td>\n<td>移位</td>\n</tr>\n<tr>\n<td>+，-</td>\n<td>加法与减法</td>\n</tr>\n<tr>\n<td>*，/，%</td>\n<td>乘法、除法与取余</td>\n</tr>\n<tr>\n<td>+x，-x</td>\n<td>正负号</td>\n</tr>\n<tr>\n<td>~x</td>\n<td>按位翻转</td>\n</tr>\n<tr>\n<td>**</td>\n<td>指数</td>\n</tr>\n<tr>\n<td>x.attribute</td>\n<td>属性参考</td>\n</tr>\n<tr>\n<td>x[index]</td>\n<td>下标</td>\n</tr>\n<tr>\n<td>x[index:index]</td>\n<td>寻址段</td>\n</tr>\n<tr>\n<td>f(arguments…)</td>\n<td>函数调用</td>\n</tr>\n<tr>\n<td>(experession,…)</td>\n<td>绑定或元组显示</td>\n</tr>\n<tr>\n<td>[expression,…]</td>\n<td>列表显示</td>\n</tr>\n<tr>\n<td>{key:datum,…}</td>\n<td>字典显示</td>\n</tr>\n<tr>\n<td>‘expression,…’</td>\n<td>字符串转换</td>\n</tr>\n</tbody>\n</table>\n<p>同一行具有相同优先级。<br>* 计算顺序<br>默认下，运算符优先级决定了运算符计算顺序。<br>如果想要改变顺序，需要使用圆括号。<br>* 结合规律<br>运算符通常由左向右结合，如2+3+4，等价于(2+3)+4<br>赋值运算符等由右向左结合，如a=b=c，等价于a=(b=c)</p>\n<h1 id=\"5-4-表达式\"><a href=\"#5-4-表达式\" class=\"headerlink\" title=\"5.4 表达式\"></a>5.4 表达式</h1><p>使用表达式<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># Filename: expression.py</span></span><br><span class=\"line\"></span><br><span class=\"line\">length = <span class=\"number\">5</span></span><br><span class=\"line\">breadth = <span class=\"number\">2</span></span><br><span class=\"line\">area = length * breadth</span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'Area is'</span>, area</span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'Perimeter is'</span>, <span class=\"number\">2</span> * (length + breadth)</span><br></pre></td></tr></table></figure></p>\n<p>输出<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python expression.py</span><br><span class=\"line\">Area is 10</span><br><span class=\"line\">Perimeter is 14</span><br></pre></td></tr></table></figure></p>\n<p>如何工作<br>length * breadth的计算结果存储在变量area中</p>\n","categories":["Python"],"tags":["Python"]},{"title":"简明Python教程-4.基本概念","url":"http://dotrabbit.tk/Python/000096-简明Python教程-4.基本概念/","content":"<h1 id=\"4-1-字面意义上的常量\"><a href=\"#4-1-字面意义上的常量\" class=\"headerlink\" title=\"4.1 字面意义上的常量\"></a>4.1 字面意义上的常量</h1><p>如5、1.23、9.25e-3这样的数，或者如同’This is a string’、”It’s a string!”这样的字符串。<br>它们被称作字面意义上的，按照它们的字面意义使用它们的值。</p>\n<h1 id=\"4-2-数\"><a href=\"#4-2-数\" class=\"headerlink\" title=\"4.2 数\"></a>4.2 数</h1><p>Python中有4中类型的数：<br>整数 —— 如2<br>长整数 ——大一些的整数<br>浮点数 ——如3.23、52.3E-4(E标记10的幂)<br>复数 —— 如(-5+4j)和(2.3-4.6j)</p>\n<h1 id=\"4-3-字符串\"><a href=\"#4-3-字符串\" class=\"headerlink\" title=\"4.3 字符串\"></a>4.3 字符串</h1><p>字符串是字符的序列，基本上就是一组单词。</p>\n<ul>\n<li>使用单引号 ( ‘ )<br>如 ‘Quote me on this’</li>\n<li>使用双引号 ( “ )<br>如 “What’s your name?”</li>\n<li>使用三引号 ( ‘’’ 或 “”” )<br>可以指示一个多行的字符串，并在其中自由地使用单引号和双引号，如：<br>‘’’This is a multi-line string. This is the first line.<br>This is the second line.<br>“What’s your name?,” I asked.<br>He said “Bond, James Bond.”<br>‘’’</li>\n<li>转义符<br>1、如 ‘What\\’s your name’（或”What’s your name”）<br>2、\\\\ 转义反斜杠本身<br>3、行末反斜杠表示字符串在下一行继续：<br>“This is the first sentence.\\<br>This is the second sentence.”<br>等价于：”This is the first sentence. This is the second sentence.”</li>\n<li>自然字符串<br>不被转义的字符串，加前缀r或R指定，如 r”Newlines are indicated by \\n”</li>\n<li>Unicode字符串<br>Unicode是书写国际文本的标准方法。Python允许处理Unicode文本，只需要在字符串前加上前缀u或U，如：<br>u”This is a Unicode string.”。<br>* 处理文本文件时要使用Unicode字符串，特别是其中含有非英语的文本时。</li>\n<li>字符串是不可变的<br>字符串一旦创造，就不能再改变它了。</li>\n<li>按字面意义级连字符串<br>两个字符串按字面意义相邻会被Python自动级连，如：<br>‘What\\’s’ ‘ your name?’ 会被自动转为 “What’s your name?”</li>\n</ul>\n<p>* Python中没有专门的char数据类型。<br>* 单引号与双引号字符串是完全相同的。<br>* 要用自然字符串处理正则表达式，否则会需要很多反斜杠。如后向引用符可以写成’\\1’’或r’\\1’。</p>\n<h1 id=\"4-4-变量\"><a href=\"#4-4-变量\" class=\"headerlink\" title=\"4.4 变量\"></a>4.4 变量</h1><p>值可以变化，可以存储任何东西。<br>只是计算机中存储信息的一部分内存。<br>与常量不同，需要能够访问这些变量的方法，因此需要给变量名字。</p>\n<h1 id=\"4-5-标识符的命名\"><a href=\"#4-5-标识符的命名\" class=\"headerlink\" title=\"4.5 标识符的命名\"></a>4.5 标识符的命名</h1><p><em>标识符</em> 是用来标识 <em>某样东西</em> 的名字，规则如下：<br>1、第一个字符是大小写字母或下划线( ‘_’ )；<br>2、其他部分可以是大小写字母、下划线或数字；<br>3、大小写敏感，如myname和myName<strong> 不是 </strong>一个标识符。<br>i、__my_name、name_23、a1b2_c3是有效的<br>2things、this is spaced out、my-name是无效的</p>\n<h1 id=\"4-6-数据类型\"><a href=\"#4-6-数据类型\" class=\"headerlink\" title=\"4.6 数据类型\"></a>4.6 数据类型</h1><p>变量可以处理不同类型的值，称为<strong> 数据类型 </strong>。<br><em>基本类型</em> 有数和字符串。<br>也可以用<em> 类 </em>创造自己的类型。</p>\n<h1 id=\"4-7-对象\"><a href=\"#4-7-对象\" class=\"headerlink\" title=\"4.7 对象\"></a>4.7 对象</h1><p>广义上说，Python中程序用到的任何东西都称为<em> 对象 </em>。<br>* 在Python中，包括数、字符串，甚至函数，都是对象。<br>例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Filename : var.py</span></span><br><span class=\"line\">i = <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> i</span><br><span class=\"line\">i =  i + <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> i</span><br><span class=\"line\"></span><br><span class=\"line\">s = <span class=\"string\">'''This is a multi-line string.</span></span><br><span class=\"line\"><span class=\"string\">This is the second line.'''</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> s</span><br></pre></td></tr></table></figure>\n<p><strong> 输出 </strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python var.py</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">This is a multi-line string.</span><br><span class=\"line\">This is the second line.</span><br></pre></td></tr></table></figure></p>\n<p><strong> 如何工作 </strong><br>1、使用赋值运算符( = )将常量5赋值给变量i。称为语句，声明需要做的事情；<br>2、用print打印i的值；<br>3、对i中存储的值加1，再存回i，打印i，得到期望值6；<br>4、类似地，将字符串常量赋值给变量s，然后打印。<br>* 使用变量时只需要给它们赋值，不需要声明变量，或定义其数据类型</p>\n<h1 id=\"4-8-逻辑行与物理行\"><a href=\"#4-8-逻辑行与物理行\" class=\"headerlink\" title=\"4.8 逻辑行与物理行\"></a>4.8 逻辑行与物理行</h1><ul>\n<li>概念<br>物理行是编程时所看见的，逻辑航是Python所看见的单个语句。<br>Python假定每个物理行对应一个逻辑行</li>\n<li>分号<br>可以使用分号来特别标明，一个物理行中使用多个逻辑行：<br>写法一：<br>i = 5<br>print i<br>写法二：<br>i = 5;<br>print i;<br>写法三：<br>i = 5; print i;<br>写法四：<br>i = 5; print i<br>是等价的</li>\n<li>风格<br>强烈建议每个物理行只写一个逻辑行。<br>仅当逻辑行太长的时候，在多于一个物理行写一个逻辑行：<br>s = ‘This is a sring.\\<br>This continues the string.’<br>print s<br>输出：<br>This is a string. This continues the string.<br>类似地，<br>print \\<br>i<br>等价于，<br>print i</li>\n<li>暗示<br>有一种暗示的假设，当逻辑行中出现圆括号、方括号或波形括号时，可以不使用反斜杠，如列表等。</li>\n</ul>\n<h1 id=\"4-9-缩进\"><a href=\"#4-9-缩进\" class=\"headerlink\" title=\"4.9 缩进\"></a>4.9 缩进</h1><p>行首的空白在Python中是重要的，称为缩进。<br>逻辑行首的空白(空格或制表符)决定逻辑行的缩进层次，从而决定语句的分组。<br>同一层次的语句必须有相同的缩进，每一组这样的语句称为一个块。<br>* 错误的缩进会引发错误<br>* 不要混合使用制表符和空格来缩进，跨平台时可能无法正常工作<br>* 强烈建议每个缩进层次使用单个制表符或两个空格或四个空格<br>* 选择一种风格，然后只使用这一种风格</p>\n","categories":["Python"],"tags":["Python"]},{"title":"简明Python教程-3.最初的步骤","url":"http://dotrabbit.tk/Python/000095-简明Python教程-3.最初的步骤/","content":"<h1 id=\"3-1-简介\"><a href=\"#3-1-简介\" class=\"headerlink\" title=\"3.1 简介\"></a>3.1 简介</h1><p>编写一个传统的“Hello World”程序。<br>两种方式：1、交互式的带提示符的解释器；2、源文件</p>\n<h1 id=\"3-2-使用带提示符的解释器\"><a href=\"#3-2-使用带提示符的解释器\" class=\"headerlink\" title=\"3.2 使用带提示符的解释器\"></a>3.2 使用带提示符的解释器</h1><p>1、在命令行的shell提示符下，输入<strong> python </strong>，(或使用IDLE程序)；<br>2、输入 print ‘Hello World’，回车。<br>Python会在下一行立即输出单词Hello World。<br>* Linux/BSD shell按Ctrl-d退出提示符，Windows按Ctrl-z退出。</p>\n<h1 id=\"3-3-挑选一个编辑器\"><a href=\"#3-3-挑选一个编辑器\" class=\"headerlink\" title=\"3.3 挑选一个编辑器\"></a>3.3 挑选一个编辑器</h1><p>要有语法加亮功能。<br>Windows:IDLE Linux:Vim/Emacs<br>可在 <a href=\"https://wiki.python.org/moin\" target=\"_blank\" rel=\"noopener\">https://wiki.python.org/moin</a> 查看详尽的Python编辑器和IDE列表。</p>\n<h1 id=\"3-4-使用源文件\"><a href=\"#3-4-使用源文件\" class=\"headerlink\" title=\"3.4 使用源文件\"></a>3.4 使用源文件</h1><p>将下面这段程序保存为helloworld.py：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># FileName : helloworld.py</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'Hello World'</span></span><br></pre></td></tr></table></figure>\n<p>打开shell(Linux终端或DOS提示符)，键入命令 <strong> python <em> helloworld.py </em> </strong>；<br>如果使用IDLE，点击菜单的Edit -&gt; Run Script或Ctrl-F5，会看到输出Hello World。</p>\n<p><strong> 输出： </strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python helloworld.py</span><br><span class=\"line\">Hello World</span><br></pre></td></tr></table></figure></p>\n<p>注意：<br>1、确保键入的程序准确无误，Python是大小写敏感的，即print与Print是不一样的。<br>2、确保每一行的开始字符前没有空格或制表符。</p>\n<p><strong> 如何工作： </strong><br>前两行被称作注释，任何在#号右面的内容都是注释。<br>Python至少应当有第一行那样的特殊注释：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br></pre></td></tr></table></figure></p>\n<p>它被称作组织行——头两个字符是#!，后面跟着一个程序。告诉Linux/Unix系统当执行程序时应该运行哪个解释器。<br>跟在注释之后的是一句Python语句，打印”Hello World”，print是操作符，”Hello World”称作字符串。</p>\n<h1 id=\"3-5-可执行的Python程序\"><a href=\"#3-5-可执行的Python程序\" class=\"headerlink\" title=\"3.5 可执行的Python程序\"></a>3.5 可执行的Python程序</h1><p>对于Linux/Unix系统，首先需要通过chmod命令给程序可执行的许可，然后运行程序：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ chmod a+x helloworld.py</span><br><span class=\"line\">$ ./helloworld.py</span><br><span class=\"line\">Hellow World</span><br></pre></td></tr></table></figure>\n<p>chmod命令用来改变文件的模式，给系统中所有用户这个源文件的执行许可。<br>然后通过指定源文件的位置来执行程序，使用 ./ 表示程序位于当前目录。</p>\n<p>可以通过添加目录到PATH来实现从各个位置运行程序：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ PATH = <span class=\"variable\">$PATH</span>:/home/swaroop/mydir</span><br><span class=\"line\">$ cp helloworld.py /home/swaroop/mydir</span><br><span class=\"line\">$ helloworld </span><br><span class=\"line\">Hello World</span><br></pre></td></tr></table></figure>\n<p>* 对于Python来说，程序、脚本、软件指的是同一个东西。</p>\n<h1 id=\"3-6-获取帮助\"><a href=\"#3-6-获取帮助\" class=\"headerlink\" title=\"3.6 获取帮助\"></a>3.6 获取帮助</h1><p>使用内建的help功能，获得Python函数或语句的快速帮助信息。<br>如：<br><code>help(str)</code> 获取str类的帮助。<br>* 按q退出。<br><code>Help(&#39;print&#39;)</code> 获取print操作符的帮助。<br>* print上使用了引号，Python可以理解希望获取关于print的帮助而不是想要打印东西。</p>\n","categories":["Python"],"tags":["Python"]},{"title":"简明Python教程-2.安装Python","url":"http://dotrabbit.tk/Python/000094-简明Python教程-2.安装Python/","content":"<h1 id=\"2-1-Linux和BSD用户\"><a href=\"#2-1-Linux和BSD用户\" class=\"headerlink\" title=\"2.1 Linux和BSD用户\"></a>2.1 Linux和BSD用户</h1><p>Fedora或者Mandrake或者其他Linux发行版、FreeBSD等BSD系统中可能已经安装了Python。<br>打开shell程序(konsole或gnome-terminal)，输入python -V</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python -V</span><br><span class=\"line\">Python 2.7.8</span><br></pre></td></tr></table></figure>\n<p>如果显示如上信息，则已经安装了Python。<br>如果看到如下信息，则还没有(几乎不可能)。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python -V</span><br><span class=\"line\">bash: python: <span class=\"built_in\">command</span> not found</span><br></pre></td></tr></table></figure>\n<p>可以利用以下方式安装：<br>1、利用操作系统附带的包管理软件，安装二进制包。<br>如Fedora Linux的yum、Mandrake Linux的urpmi、Debian Linux的apt-get、FreeBSD的pkg_add等等(需要联网)。<br>2、可以从<a href=\"https://www.python.org/downloads/\" target=\"_blank\" rel=\"noopener\">源代码</a>编译Python然后安装(网站上有编译指令)。</p>\n<h1 id=\"2-2-Windows用户\"><a href=\"#2-2-Windows用户\" class=\"headerlink\" title=\"2.2 Windows用户\"></a>2.2 Windows用户</h1><p>访问 <a href=\"https://www.python.org/downloads/\" target=\"_blank\" rel=\"noopener\">https://www.python.org/downloads/</a> 下载安装。<br>设置环境变量：在PATH中加入C:\\Python27</p>\n","categories":["Python"],"tags":["Python"]},{"title":"简明Python教程-1.介绍","url":"http://dotrabbit.tk/Python/000093-简明Python教程-1.介绍/","content":"<h1 id=\"1-1-简介\"><a href=\"#1-1-简介\" class=\"headerlink\" title=\"1.1 简介\"></a>1.1 简介</h1><p>简单，功能强大。<br>注：Python语言的创造者Guido van Rossum是根据英国广播公司的节目“蟒蛇飞行马戏”命名这个语言的。</p>\n<h1 id=\"1-2-Python的特色\"><a href=\"#1-2-Python的特色\" class=\"headerlink\" title=\"1.2 Python的特色\"></a>1.2 Python的特色</h1><ul>\n<li>简单<br>编写类似伪代码，专注于解决问题，而不是语言本身</li>\n<li>易学<br>语法简单，极易上手</li>\n<li>免费、开源<br>FLOSS(自由/开放源码软件)之一</li>\n<li>高层语言<br>无需考虑诸如如何管理内存一类的底层细节</li>\n<li>可移植性<br>开源，多平台</li>\n<li>解释性<br>Python写的程序不需要编译成二进制代码。可以直接从源代码运行程序。<br>Python解释器把源代码转换成字节码，再把它翻译成计算机使用的语言(二进制代码，即0和1)并运行。<br>无需担心如何编译程序、如何确保连接转载正确的库等等。<br>只要把你的Python程序拷贝到另外一台计算机上，就可以工作了，使得你的Python程序更加易于移植。</li>\n<li>面向对象<br>Python既支持面向过程的编程，也支持面向对象的编程。</li>\n<li>可扩展性<br>如果希望某些关键代码运行得更快或者某些算法不公开，可以将部分程序用C或C++编写，然后在Python程序中使用它们。</li>\n<li>丰富的库<br>标准库庞大</li>\n</ul>\n<h1 id=\"1-3-为什么不适用Perl？\"><a href=\"#1-3-为什么不适用Perl？\" class=\"headerlink\" title=\"1.3 为什么不适用Perl？\"></a>1.3 为什么不适用Perl？</h1><p>Perl程序简单，但不适用大型程序。<br>Python更简单、清晰、易于编写、易懂、易维护。<br>Python的库也在慢慢扩大。</p>\n","categories":["Python"],"tags":["Python"]},{"title":"简明Python教程","url":"http://dotrabbit.tk/Python/000092-简明Python教程/","content":"<p>《A Byte of Python》<br>Swaroop, C. H. 著<br>沈洁元  译</p>\n<p>地址：<a href=\"http://old.sebug.net/paper/python/index.html\" target=\"_blank\" rel=\"noopener\">http://old.sebug.net/paper/python/index.html</a></p>\n<p>总结，概括，以及略有更新</p>\n","categories":["Python"],"tags":["Python"]},{"title":"LeetCode-75.Sort Colors","url":"http://dotrabbit.tk/算法/000091-LeetCode-75.Sort Colors/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Given an array with n objects colored red, white or blue, sort them so that objects of the same color are adjacent, with the colors in the order red, white and blue.</p>\n<p>Here, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.</p>\n<p><strong>Note:</strong><br>You are not suppose to use the library’s sort function for this problem.</p>\n<p><strong>Follow up:</strong><br>A rather straight forward solution is a two-pass algorithm using counting sort.<br>First, iterate the array counting number of 0’s, 1’s, and 2’s, then overwrite array with total number of 0’s, then 1’s and followed by 2’s.</p>\n<p>Could you come up with an one-pass algorithm using only constant space?</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>给出一个包含n个物体的数组，分别被涂成了红色、白色和蓝色，将它们排序，使得相同颜色的物体相邻，顺序为红色、白色和蓝色。<br>在这里我们用整数0、1和2来分别代表红色、白色和蓝色。<br>注意：你不应当使用库排序函数来解本题。<br>跟进：一个较为直接的解法是两趟遍历数组，计数0、1和2的个数，然后逐个对数组中的数字赋值。<br>你能给出只使用常数空间的一趟遍历的算法吗？</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><h2 id=\"方法一：库函数……\"><a href=\"#方法一：库函数……\" class=\"headerlink\" title=\"方法一：库函数……\"></a>方法一：库函数……</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sortColors</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">        Arrays.sort(nums);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"方法二：分别统计三种颜色数量，然后遍历赋值\"><a href=\"#方法二：分别统计三种颜色数量，然后遍历赋值\" class=\"headerlink\" title=\"方法二：分别统计三种颜色数量，然后遍历赋值\"></a>方法二：分别统计三种颜色数量，然后遍历赋值</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sortColors</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> red = <span class=\"number\">0</span>, white = <span class=\"number\">0</span>, blue = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> num : nums) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (num) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">                    red++;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">                    white++;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">                    blue++;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (red-- &gt; <span class=\"number\">0</span>) nums[index++] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (white-- &gt; <span class=\"number\">0</span>) nums[index++] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (blue-- &gt; <span class=\"number\">0</span>) nums[index++] = <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"方法三\"><a href=\"#方法三\" class=\"headerlink\" title=\"方法三\"></a>方法三</h2><p>设立两个指针firstNotRed和lastNotBlue。<br>firstNotRed指向第一个不是0的元素，lastNotBlue指向最后一个不是2的元素。初始时分别指向数组头尾。<br>从头遍历数组，当遇到0时，与firstNotRed交换，并更新firstNotRed；当遇到2时，与lastNotBlue交换，并更新lastNotBlue，同时遍历指针回退，继续处理交换过来的值。<br>时刻保证firstNotRed左边的值都为0，lastNotBlue后面的值都为2：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sortColors</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> firstNotRed = <span class=\"number\">0</span>, lastNotBlue = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= lastNotBlue; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[i] == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                nums[i] = nums[firstNotRed];</span><br><span class=\"line\">                nums[firstNotRed] = <span class=\"number\">0</span>;</span><br><span class=\"line\">                firstNotRed++;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nums[i] == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">                nums[i] = nums[lastNotBlue];</span><br><span class=\"line\">                nums[lastNotBlue] = <span class=\"number\">2</span>;</span><br><span class=\"line\">                lastNotBlue--;</span><br><span class=\"line\">                i--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>参考：<br><a href=\"https://segmentfault.com/a/1190000003761919\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000003761919</a><br><a href=\"http://blog.csdn.net/doc_sgl/article/details/12007965\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/doc_sgl/article/details/12007965</a></p>\n","categories":["算法"],"tags":["算法","LeetCode","Array"]},{"title":"LeetCode-117.Populating Next Right Pointers in Each Node II","url":"http://dotrabbit.tk/算法/000089-LeetCode-117.Populating Next Right Pointers in Each Node II/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Follow up for problem “<em> Populating Next Right Pointers in Each Node </em>“.</p>\n<p>What if the given tree could be any binary tree? Would your previous solution still work?</p>\n<p><strong> Note: </strong></p>\n<ul>\n<li>You may only use constant extra space.<br>For example,<br>Given the following binary tree,<br>　　　　　1<br>　　　　/　\\<br>　　　2　　　3<br>　　/　\\　　/　\\<br>　4　　5　 　　　7<br>After calling your function, the tree should look like:<br>　　　　　1 -&gt; NULL<br>　　　　/　　\\<br>　　　2　-&gt;　　3 -&gt; NULL<br>　　/　\\　　　/　\\<br>　4-&gt;　5　　-&gt;　　7 -&gt; NULL</li>\n</ul>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>116. Populating Next Right Pointers in Each Node的跟进。<br>如果给出的二叉树可以是任意二叉树呢？你之前的方法还可以工作吗？<br>注意：你只能使用常数额外空间。<br>例如，给出如下二叉树，<br>　　　　　1<br>　　　　/　\\<br>　　　2　　　3<br>　　/　\\　　/　\\<br>　4　　5　 　　　7<br>在调用你的函数之后，树应当变成：<br>　　　　　1 -&gt; NULL<br>　　　　/　　\\<br>　　　2　-&gt;　　3 -&gt; NULL<br>　　/　\\　　　/　\\<br>　4-&gt;　5　　-&gt;　　7 -&gt; NULL</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><p>因为还是只能使用常数额外空间，所以思路与116. Populating Next Right Pointers in Each Node一样，利用next指针，逐层遍历。<br>不过需要设立cur和next两个指针，分别指向同一层的当前和下一个节点；另外需要在遍历过程中记录下一层的第一个节点first：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for binary tree with next pointer.</span></span><br><span class=\"line\"><span class=\"comment\"> * public class TreeLinkNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeLinkNode left, right, next;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeLinkNode(int x) &#123; val = x; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">connect</span><span class=\"params\">(TreeLinkNode root)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        TreeLinkNode first = root;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (first != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            TreeLinkNode cur = <span class=\"keyword\">null</span>, next = <span class=\"keyword\">null</span>, node = first;</span><br><span class=\"line\">            first = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (node != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (node.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (cur == <span class=\"keyword\">null</span>) cur = node.left;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (next == <span class=\"keyword\">null</span>) next = node.left;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (cur != <span class=\"keyword\">null</span> &amp;&amp; first == <span class=\"keyword\">null</span>) first = cur;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (cur != <span class=\"keyword\">null</span> &amp;&amp; next != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    cur.next = next;</span><br><span class=\"line\">                    cur = next;</span><br><span class=\"line\">                    next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"keyword\">if</span> (node.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (cur == <span class=\"keyword\">null</span>) cur = node.right;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (next == <span class=\"keyword\">null</span>) next = node.right;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (cur != <span class=\"keyword\">null</span> &amp;&amp; first == <span class=\"keyword\">null</span>) first = cur;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (cur != <span class=\"keyword\">null</span> &amp;&amp; next != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    cur.next = next;</span><br><span class=\"line\">                    cur = next;</span><br><span class=\"line\">                    next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                node = node.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>参考：<br><a href=\"http://www.cnblogs.com/felixfang/p/3647898.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/felixfang/p/3647898.html</a></p>\n","categories":["算法"],"tags":["算法","LeetCode"]},{"title":"LeetCode-116.Populating Next Right Pointers in Each Node","url":"http://dotrabbit.tk/算法/000088-LeetCode-116.Populating Next Right Pointers in Each Node/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Given a binary tree</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct TreeLinkNode &#123;</span><br><span class=\"line\">  TreeLinkNode *left;</span><br><span class=\"line\">  TreeLinkNode *right;</span><br><span class=\"line\">  TreeLinkNode *next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.</p>\n<p>Initially, all next pointers are set to NULL.</p>\n<p>Note:</p>\n<p>You may only use constant extra space.<br>You may assume that it is a perfect binary tree (ie, all leaves are at the same level, and every parent has two children).<br>For example,<br>Given the following perfect binary tree,<br>　　　　　1<br>　　　　/　\\<br>　　　2　　　3<br>　　/　\\　　/　\\<br>　4　　5　6　　7<br>After calling your function, the tree should look like:<br>　　　　　1 -&gt; NULL<br>　　　　/　　\\<br>　　　2　-&gt;　　3 -&gt; NULL<br>　　/　\\　　　/　\\<br>　4-&gt;　5-&gt;　6-&gt;　7 -&gt; NULL</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>给出二叉树<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct TreeLinkNode &#123;</span><br><span class=\"line\">  TreeLinkNode *left;</span><br><span class=\"line\">  TreeLinkNode *right;</span><br><span class=\"line\">  TreeLinkNode *next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>令每个节点的next指向其右边的节点。如果其右边没有节点，那么next应当设为NULL。<br>所有next指针都被初始化为NULL。<br>注意：<br>你只可以使用常数额外空间。<br>你可以认为这是一颗完全二叉树(即所有的叶子节点都在同一层，并且每个父节点都有两个孩子节点)。<br>例如，给出如下完全二叉树，<br>　　　　　1<br>　　　　/　\\<br>　　　2　　　3<br>　　/　\\　　/　\\<br>　4　　5　6　　7<br>在调用你的函数之后，树应当变成：<br>　　　　　1 -&gt; NULL<br>　　　　/　　\\<br>　　　2　-&gt;　　3 -&gt; NULL<br>　　/　\\　　　/　\\<br>　4-&gt;　5-&gt;　6-&gt;　7 -&gt; NULL</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><p>本题的难点在于只能使用常数额外空间，所以不能广度遍历。<br>注意到题中的next指针可以复用，有：<br>node.left.next = node.right<br>node.right.next = node.next.left<br>从root开始，设立first指向下一行的第一个节点，node临时节点从第一个节点开始，利用next指针在本层逐渐向后遍历，遍历过程中将下一层的next指针指好。<br>当first的下一层指针为空时，表示已经到最下层，退出循环：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for binary tree with next pointer.</span></span><br><span class=\"line\"><span class=\"comment\"> * public class TreeLinkNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeLinkNode left, right, next;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeLinkNode(int x) &#123; val = x; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">connect</span><span class=\"params\">(TreeLinkNode root)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        TreeLinkNode first = root;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (first.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            TreeLinkNode node = first;</span><br><span class=\"line\">            first = first.left;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (node != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                node.left.next = node.right;</span><br><span class=\"line\">                node.right.next = node.next == <span class=\"keyword\">null</span> ? <span class=\"keyword\">null</span> : node.next.left;</span><br><span class=\"line\">                node = node.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Python：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Definition for binary tree with next pointer.</span></span><br><span class=\"line\"><span class=\"comment\"># class TreeLinkNode(object):</span></span><br><span class=\"line\"><span class=\"comment\">#     def __init__(self, x):</span></span><br><span class=\"line\"><span class=\"comment\">#         self.val = x</span></span><br><span class=\"line\"><span class=\"comment\">#         self.left = None</span></span><br><span class=\"line\"><span class=\"comment\">#         self.right = None</span></span><br><span class=\"line\"><span class=\"comment\">#         self.next = None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">connect</span><span class=\"params\">(self, root)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type root: TreeLinkNode</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: nothing</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        next_level_first_Node = root</span><br><span class=\"line\">        <span class=\"keyword\">while</span> next_level_first_Node.left:</span><br><span class=\"line\">            node = next_level_first_Node</span><br><span class=\"line\">            next_level_first_Node = next_level_first_Node.left</span><br><span class=\"line\">            <span class=\"keyword\">while</span> node:</span><br><span class=\"line\">                node.left.next = node.right</span><br><span class=\"line\">                <span class=\"keyword\">if</span> node.next:</span><br><span class=\"line\">                    node.right.next = node.next.left</span><br><span class=\"line\">                node = node.next</span><br></pre></td></tr></table></figure></p>\n<p>另附广度优先遍历版本：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for binary tree with next pointer.</span></span><br><span class=\"line\"><span class=\"comment\"> * public class TreeLinkNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeLinkNode left, right, next;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeLinkNode(int x) &#123; val = x; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">connect</span><span class=\"params\">(TreeLinkNode root)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        Queue&lt;TreeLinkNode&gt; queue = <span class=\"keyword\">new</span> LinkedList&lt;TreeLinkNode&gt;();</span><br><span class=\"line\">        TreeLinkNode node = root;</span><br><span class=\"line\">        queue.add(node);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!queue.isEmpty()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> size = queue.size();</span><br><span class=\"line\">            TreeLinkNode cur = <span class=\"keyword\">null</span>, next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (size-- &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                cur = queue.poll();</span><br><span class=\"line\">                next = size == <span class=\"number\">0</span> ? <span class=\"keyword\">null</span> : queue.peek();</span><br><span class=\"line\">                cur.next = next;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (cur.left != <span class=\"keyword\">null</span>) queue.add(cur.left);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (cur.right != <span class=\"keyword\">null</span>) queue.add(cur.right);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>参考：<br><a href=\"http://www.cnblogs.com/felixfang/p/3647898.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/felixfang/p/3647898.html</a> </p>\n","categories":["算法"],"tags":["算法","LeetCode"]},{"title":"LeetCode-24.Swap Nodes in Pairs","url":"http://dotrabbit.tk/算法/000087-LeetCode-24.Swap Nodes in Pairs/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Given a linked list, swap every two adjacent nodes and return its head.</p>\n<p>For example,<br>Given <strong> 1 </strong>-&gt;<strong> 2 </strong>-&gt;<strong> 3 </strong>-&gt;<strong> 4 </strong>, you should return the list as <strong> 2 </strong>-&gt;<strong> 1 </strong>-&gt;<strong> 4 </strong>-&gt;<strong> 3 </strong>.</p>\n<p>Your algorithm should use only constant space. You may <strong> not </strong> modify the values in the list, only nodes itself can be changed.</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>给出一个单链表，交换每两个相邻节点，并返回头结点。<br>例如，给出<strong> 1 </strong>-&gt;<strong> 2 </strong>-&gt;<strong> 3 </strong>-&gt;<strong> 4 </strong>，应当返回<strong> 2 </strong>-&gt;<strong> 1 </strong>-&gt;<strong> 4 </strong>-&gt;<strong> 3 </strong>。<br>你的算法应当只使用常数空间。你<strong> 不 </strong>能修改list中的值，只能改变节点。</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><p>画图很清晰，每次交换两个节点，需要注意的是，交换完两个节点后，后面节点的后继，要指向下两个节点交换后的在前面的节点：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * public class ListNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode next;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">swapPairs</span><span class=\"params\">(ListNode head)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head == <span class=\"keyword\">null</span> || head.next == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">        ListNode left = head, right = head.next;</span><br><span class=\"line\">        head = right;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            left.next = right.next;</span><br><span class=\"line\">            right.next = left;</span><br><span class=\"line\">            left = left.next;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (left == <span class=\"keyword\">null</span> || left.next == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">            right = right.next;</span><br><span class=\"line\">            right.next = left.next;</span><br><span class=\"line\">            right = left.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","categories":["算法"],"tags":["算法","LeetCode"]},{"title":"LeetCode-230.Kth Smallest Element in a BST","url":"http://dotrabbit.tk/算法/000086-LeetCode-230.Kth Smallest Element in a BST/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Given a binary search tree, write a function <strong> kthSmallest </strong> to find the <strong> k </strong>th smallest element in it.</p>\n<p><strong> Note: </strong><br>You may assume k is always valid, 1 ≤ k ≤ BST’s total elements.</p>\n<p><strong> Follow up: </strong><br>What if the BST is modified (insert/delete operations) often and you need to find the kth smallest frequently? How would you optimize the kthSmallest routine?</p>\n<p><strong> Hint: </strong><br>1、Try to utilize the property of a BST.<br>2、What if you could modify the BST node’s structure?<br>3、The optimal runtime complexity is O(height of BST).</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>给出一颗二叉搜索树，编写函数<strong> kthSmallest </strong>，查找其中第k小的树。<br>注意：<br>你可以认为k总是合法的，1 ≤ k ≤ 二叉搜索树的总元素数。<br>跟进：<br>如果二叉搜索树的修改(插入/删除操作)很频繁，而你需要经常查找第k个元素呢？你将如何改进算法？<br>提示：<br>1、尝试利用二叉搜索树的性质。<br>2、如果你可以修改二叉搜索树的结构呢？<br>3、理想的运行时间复杂度是O(二叉搜索树的高度)。</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><p>利用二叉搜索树的性质：中序遍历二叉搜索树，可以得到一个递增的数组：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * public class TreeNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode left;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode right;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">kthSmallest</span><span class=\"params\">(TreeNode root, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        Stack&lt;TreeNode&gt; stack = <span class=\"keyword\">new</span> Stack&lt;TreeNode&gt;();</span><br><span class=\"line\">        TreeNode node = root;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (node != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                stack.push(node);</span><br><span class=\"line\">                node = node.left;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            node = stack.pop();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (++index == k) <span class=\"keyword\">return</span> node.val;</span><br><span class=\"line\">            node = node.right;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>跟进：<br>修改二叉搜索树的结构，对于每个节点，增加其左子树的节点个数属性 leftNums，每次做树修改时更新。<br>当查找第k小的元素时，只要用k与leftNums属性比较。<br>如果 k &lt; leftNums，则在其左子树中查找；如果k == leftNums，则返回根节点值；如果 k &gt; leftNums，则在其右子树中查找：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * public class TreeNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode left;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode right;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int leftNums;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">kthSmallest</span><span class=\"params\">(TreeNode root, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        TreeNode node = root;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (k == node.leftNums + <span class=\"number\">1</span>) <span class=\"keyword\">return</span>  node.val;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (k &lt; node.leftNums + <span class=\"number\">1</span>) node = node.left;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                k -= node.leftNums + <span class=\"number\">1</span>;</span><br><span class=\"line\">                node = node.right;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>参考：<br><a href=\"http://www.geeksforgeeks.org/find-k-th-smallest-element-in-bst-order-statistics-in-bst/\" target=\"_blank\" rel=\"noopener\">http://www.geeksforgeeks.org/find-k-th-smallest-element-in-bst-order-statistics-in-bst/</a></p>\n","categories":["算法"],"tags":["算法","LeetCode"]},{"title":"LeetCode-107.Binary Tree Level Order Traversal II","url":"http://dotrabbit.tk/算法/000085-LeetCode-107.Binary Tree Level Order Traversal II/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Given a binary tree, return the <em> bottom-up level order </em> traversal of its nodes’ values. (ie, from left to right, level by level).</p>\n<p>For example:<br>Given binary tree <strong> {3,9,20,#,#,15,7} </strong>,<br>　　　3<br>　　/　\\<br>　9　　　20<br>　　　　/　\\<br>　　　15　　7<br>return its bottom-up level order traversal as:<br>[<br>　[15,7],<br>　[9,20],<br>　[3]<br>]</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>给出一颗二叉树，返回其自底向上层次遍历的节点值。(例如，从左到右，一层一层的)。<br>例如，给出一颗二叉树 <strong> {3,9,20,#,#,15,7} </strong>，<br>　　　3<br>　　/　\\<br>　9　　　20<br>　　　　/　\\<br>　　　15　　7<br>返回其自底向上层次遍历如下：<br>[<br>　[15,7],<br>　[9,20],<br>　[3]<br>]</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><p>将 102. Binary Tree Level Order Traversal 每次add时，改为addFirst：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * public class TreeNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode left;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode right;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrderBottom(TreeNode root) &#123;</span><br><span class=\"line\">        LinkedList&lt;List&lt;Integer&gt;&gt; res = <span class=\"keyword\">new</span> LinkedList&lt;List&lt;Integer&gt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">        Queue&lt;TreeNode&gt; queue = <span class=\"keyword\">new</span> LinkedList&lt;TreeNode&gt;();</span><br><span class=\"line\">        queue.add(root);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!queue.isEmpty()) &#123;</span><br><span class=\"line\">            List&lt;Integer&gt; level = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">            <span class=\"keyword\">int</span> size = queue.size();</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (size-- &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                TreeNode node = queue.poll();</span><br><span class=\"line\">                level.add(node.val);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (node.left != <span class=\"keyword\">null</span>) queue.add(node.left);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (node.right != <span class=\"keyword\">null</span>) queue.add(node.right);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            res.addFirst(level);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","categories":["算法"],"tags":["算法","LeetCode"]},{"title":"LeetCode-102.Binary Tree Level Order Traversal","url":"http://dotrabbit.tk/算法/000084-LeetCode-102.Binary Tree Level Order Traversal/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Given a binary tree, return the level order traversal of its nodes’ values. (ie, from left to right, level by level).</p>\n<p>For example:<br>Given binary tree <strong> {3,9,20,#,#,15,7} </strong>,<br>　　　3<br>　　/　\\<br>　9　　　20<br>　　　　/　\\<br>　　　15　　7<br>return its level order traversal as:<br>[<br>　[3],<br>　[9,20],<br>　[15,7]<br>]</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>给出一颗二叉树，返回其层次遍历的节点值。(例如，从左到右，一层一层的)。<br>例如，给出一颗二叉树 {3,9,20,#,#,15,7}，<br>　　　3<br>　　/　\\<br>　9　　　20<br>　　　　/　\\<br>　　　15　　7<br>返回其层次遍历如下：<br>[<br>　[3],<br>　[9,20],<br>　[15,7]<br>]</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><h1 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h1><p>利用两个队列，一个记录当前层，遍历当前层时，更新下一层节点。<br>每一层遍历结束之后，更新当前层为下一层，下一层为新队列，直到下一层没有节点为止：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * public class TreeNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode left;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode right;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) &#123;</span><br><span class=\"line\">        List&lt;List&lt;Integer&gt;&gt; res = <span class=\"keyword\">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">        Queue&lt;TreeNode&gt; cur = <span class=\"keyword\">new</span> LinkedList&lt;TreeNode&gt;();</span><br><span class=\"line\">        Queue&lt;TreeNode&gt; next = <span class=\"keyword\">new</span> LinkedList&lt;TreeNode&gt;();</span><br><span class=\"line\">        cur.add(root);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!cur.isEmpty()) &#123;</span><br><span class=\"line\">            List&lt;Integer&gt; level = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (!cur.isEmpty()) &#123;</span><br><span class=\"line\">                TreeNode node = cur.poll();</span><br><span class=\"line\">                level.add(node.val);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (node.left != <span class=\"keyword\">null</span>) next.add(node.left);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (node.right != <span class=\"keyword\">null</span>) next.add(node.right);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            res.add(level);</span><br><span class=\"line\">            cur = next;</span><br><span class=\"line\">            next = <span class=\"keyword\">new</span> LinkedList&lt;TreeNode&gt;();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h1><p>只用一个队列，按照层次入队。<br>每一层入队之后，利用一个int记录这一层的size，出栈size个元素，即为当前层的list：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * public class TreeNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode left;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode right;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) &#123;</span><br><span class=\"line\">        List&lt;List&lt;Integer&gt;&gt; res = <span class=\"keyword\">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">        Queue&lt;TreeNode&gt; queue = <span class=\"keyword\">new</span> LinkedList&lt;TreeNode&gt;();</span><br><span class=\"line\">        queue.add(root);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!queue.isEmpty()) &#123;</span><br><span class=\"line\">            List&lt;Integer&gt; level = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">            <span class=\"keyword\">int</span> size = queue.size();</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (size-- &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                TreeNode node = queue.poll();</span><br><span class=\"line\">                level.add(node.val);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (node.left != <span class=\"keyword\">null</span>) queue.add(node.left);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (node.right != <span class=\"keyword\">null</span>) queue.add(node.right);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            res.add(level);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>参考：<br><a href=\"http://www.programcreek.com/2014/04/leetcode-binary-tree-level-order-traversal-java/\" target=\"_blank\" rel=\"noopener\">http://www.programcreek.com/2014/04/leetcode-binary-tree-level-order-traversal-java/</a><br><a href=\"http://www.oschina.net/code/snippet_2399500_48960\" target=\"_blank\" rel=\"noopener\">http://www.oschina.net/code/snippet_2399500_48960</a></p>\n","categories":["算法"],"tags":["算法","LeetCode"]},{"title":"LeetCode-94.Binary Tree Inorder Traversal","url":"http://dotrabbit.tk/算法/000083-LeetCode-94.Binary Tree Inorder Traversal/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Given a binary tree, return the inorder traversal of its nodes’ values.</p>\n<p>For example:<br>Given binary tree <strong> {1,#,2,3} </strong>,<br>　1<br>　　\\<br>　　　2<br>　　/<br>　3<br>return <strong> [1,3,2] </strong>.</p>\n<p><strong> Note: </strong> Recursive solution is trivial, could you do it iteratively?</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>给出一颗二叉树，返回中序遍历序列。<br>例如：给出二叉树 {1, #, 2, 3}。<br>　1<br>　　\\<br>　　　2<br>　　/<br>　3<br>返回 [1,3,2]。<br>注意：递归解法很普通，你能否用非递归方法解出？</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for binary tree</span></span><br><span class=\"line\"><span class=\"comment\"> * public class TreeNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode left;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode right;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title\">inorderTraversal</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;Integer&gt; res = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">        inorderTraversal(root, res);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">inorderTraversal</span><span class=\"params\">(TreeNode root, List&lt;Integer&gt; result)</span> </span>&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">    \t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">    \tinorderTraversal(root.left, result);</span><br><span class=\"line\">    \tresult.add(root.val);</span><br><span class=\"line\">    \tinorderTraversal(root.right, result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>非递归：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for binary tree</span></span><br><span class=\"line\"><span class=\"comment\"> * public class TreeNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode left;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode right;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title\">inorderTraversal</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;Integer&gt; res = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">        Stack&lt;TreeNode&gt; stack = <span class=\"keyword\">new</span> Stack&lt;TreeNode&gt;();</span><br><span class=\"line\">        TreeNode node = root;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!stack.isEmpty() || node != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (node != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                stack.push(node);</span><br><span class=\"line\">                node = node.left;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            node = stack.pop();</span><br><span class=\"line\">            res.add(node.val);</span><br><span class=\"line\">            node = node.right;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>参考：<br><a href=\"http://www.programcreek.com/2012/12/leetcode-solution-of-binary-tree-inorder-traversal-in-java/\" target=\"_blank\" rel=\"noopener\">http://www.programcreek.com/2012/12/leetcode-solution-of-binary-tree-inorder-traversal-in-java/</a></p>\n","categories":["算法"],"tags":["算法","LeetCode"]},{"title":"设计模式-单例模式","url":"http://dotrabbit.tk/Java/000082-设计模式-单例模式/","content":"<h1 id=\"1、饿汉式\"><a href=\"#1、饿汉式\" class=\"headerlink\" title=\"1、饿汉式\"></a>1、饿汉式</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton instance = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>线程安全，但容易导致启动较慢。<br>在《Java与模式》中，作者提出：“饿汉式单例类可以在Java语言实现，但不易在C++内实现，因为静态初始化在C++里没有固定的顺序，因而静态的instance变量的初始化与类的加载顺序没有保证，可能会出问题。这就是为什么GoF在提出单例类的概念时，举的例子是懒汉式的。他们的书影响之大，以致Java语言中单例类的例子也大多是懒汉式的。实际上，本书认为饿汉式单例类更符合Java语言本身的特点。”</p>\n<h1 id=\"2、lazy-load延迟加载，不线程安全\"><a href=\"#2、lazy-load延迟加载，不线程安全\" class=\"headerlink\" title=\"2、lazy-load延迟加载，不线程安全\"></a>2、lazy-load延迟加载，不线程安全</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton instance;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tinstance = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"3、加方法锁\"><a href=\"#3、加方法锁\" class=\"headerlink\" title=\"3、加方法锁\"></a>3、加方法锁</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton instance;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tinstance = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>线程安全。<br>但较为耗费资源。因为每个线程调用getInstance()都要加锁，我们想要只在第一次调用getInstance()时加锁。</p>\n<h1 id=\"4、加代码块锁\"><a href=\"#4、加代码块锁\" class=\"headerlink\" title=\"4、加代码块锁\"></a>4、加代码块锁</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton instance;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">synchronized</span> (Singleton.class) &#123;</span><br><span class=\"line\">\t\t\t\tinstance = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可能两个线程并发进入if判断语句，在一个new后，另一个线程也直接进入new。线程不安全。</p>\n<h1 id=\"5、双重检测代码块同步锁\"><a href=\"#5、双重检测代码块同步锁\" class=\"headerlink\" title=\"5、双重检测代码块同步锁\"></a>5、双重检测代码块同步锁</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton instance;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">synchronized</span> (Singleton.class) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\tinstance = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>二次检查可以解决4中的问题，但是，“双重检查锁定背后的理论是完美的。不幸地是，现实完全不同。双重检查锁定的问题是：并不能保证它会在单处理器或多处理器计算机上顺利运行。双重检查锁定失败的问题并不归咎于 JVM 中的实现 bug，而是归咎于 Java 平台内存模型。内存模型允许所谓的‘无序写入’，这也是这些习语失败的一个主要原因。”<br>因为存在指令重排序问题，所以该方法也是线程不安全的。</p>\n<h1 id=\"6、双重检测改进\"><a href=\"#6、双重检测改进\" class=\"headerlink\" title=\"6、双重检测改进\"></a>6、双重检测改进</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton instance;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">synchronized</span> (Singleton.class) &#123;</span><br><span class=\"line\">\t\t\t\tSingleton temp = instance;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (temp == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\tinstance = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>或<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> Singleton instance;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">synchronized</span> (Singleton.class) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\tinstance = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>volatile修饰可以确保 instance = new Singleton(); 对应的指令不会重排序</p>\n<h1 id=\"7、最佳写法：initialization-on-demand-holder\"><a href=\"#7、最佳写法：initialization-on-demand-holder\" class=\"headerlink\" title=\"7、最佳写法：initialization on demand holder\"></a>7、最佳写法：initialization on demand holder</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span> <span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 延迟加载实例</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonHolder</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">static</span> Singleton instance = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> SingletonHolder.instance;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Java机制规定，内部类SingletonHolder只有在getInstance()方法第一次调用的时候才会被加载（实现了lazy），而且其加载过程是线程安全的。内部类加载的时候实例化一次instance。</p>\n<p>参考：<br><a href=\"http://www.iteye.com/topic/537563\" target=\"_blank\" rel=\"noopener\">http://www.iteye.com/topic/537563</a><br><a href=\"http://www.jb51.net/article/46922.htm\" target=\"_blank\" rel=\"noopener\">http://www.jb51.net/article/46922.htm</a><br><a href=\"http://www.cnblogs.com/xudong-bupt/p/3433643.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/xudong-bupt/p/3433643.html</a><br>《Spring实战》</p>\n","categories":["Java"],"tags":["Java","设计模式"]},{"title":"LeetCode-89.Gray Code","url":"http://dotrabbit.tk/算法/000081-LeetCode-89.Gray Code/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>The gray code is a binary numeral system where two successive values differ in only one bit.</p>\n<p>Given a non-negative integer n representing the total number of bits in the code, print the sequence of gray code. A gray code sequence must begin with 0.</p>\n<p>For example, given n = 2, return <strong> [0,1,3,2] </strong>. Its gray code sequence is:</p>\n<p>00 - 0<br>01 - 1<br>11 - 3<br>10 - 2</p>\n<p><strong> Note: </strong><br>For a given n, a gray code sequence is not uniquely defined.</p>\n<p>For example, <strong> [0,2,3,1] </strong> is also a valid gray code sequence according to the above definition.</p>\n<p>For now, the judge is able to judge based on one instance of gray code sequence. Sorry about that.</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>格雷码是一种二进制编码系统，连续的两个值只有一位不同。<br>给出一个非负整数n，代表码中的总位数，打印格雷码序列。格雷码序列必须从0开始。<br>例如，给出n=2，返回<strong> [0, 1, 3, 2] </strong>。格雷码序列为：<br>00 - 0<br>01 - 1<br>11 - 3<br>10 - 2<br><strong> 注意： </strong><br>对于给定的n，格雷码可能不唯一。<br>例如，根据以上定义，<strong> [0, 2, 3, 1] </strong>也是一个合法的格雷码序列。<br>目前判定系统只能判定格雷码序列的一种实例。很抱歉。</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><p>主要考察对格雷码的理解……：<br>1、1位格雷码有两个码字；<br>2、(n+1)位格雷码中的前2^n个码字等于n位格雷码的码字，按顺序书写，加前缀0；<br>3、(n+1)位格雷码中的后2^n个码字等于n位格雷码的码字，按逆序书写，加前缀1。<br>从1到n循环n次，每次计算位数为n时的格雷码。对于从n到n+1，前2^n个码字相同，后2^n个码字将前2^n个码字逆序遍历，加上高位1，加入链表即可：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title\">grayCode</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;Integer&gt; code = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">        code.add(<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> high = <span class=\"number\">1</span> &lt;&lt; i;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = code.size() - <span class=\"number\">1</span>; j &gt;= <span class=\"number\">0</span>; j--)</span><br><span class=\"line\">                code.add(high + code.get(j));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> code;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>另外数学解法，有公式，第i个格雷码等于 (i&gt;&gt;1) ^ i：</p>\n<p>参考：<br><a href=\"http://baike.baidu.com/link?url=gfP5sqEiL4VrmUkCitxCU530pPcl6LudQBWW34BDYoLgFEnsTvTDtpJAG11crE054jUR9_sneONV1n6xhiv7dA_ousggtmyrx7nRVqQ-Q1_1egMV0cB1H3obLaj1iri2k_f9yhpE-mPVW6pCQbGc-K\" target=\"_blank\" rel=\"noopener\">http://baike.baidu.com/link?url=gfP5sqEiL4VrmUkCitxCU530pPcl6LudQBWW34BDYoLgFEnsTvTDtpJAG11crE054jUR9_sneONV1n6xhiv7dA_ousggtmyrx7nRVqQ-Q1_1egMV0cB1H3obLaj1iri2k_f9yhpE-mPVW6pCQbGc-K</a><br><a href=\"http://blog.csdn.net/sbitswc/article/details/20110655\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/sbitswc/article/details/20110655</a><br><a href=\"http://blog.csdn.net/doc_sgl/article/details/12251523\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/doc_sgl/article/details/12251523</a></p>\n","categories":["算法"],"tags":["算法","LeetCode"]},{"title":"LeetCode-154.Find Minimum in Rotated Sorted Array II","url":"http://dotrabbit.tk/算法/000080-LeetCode-154.Find Minimum in Rotated Sorted Array II/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>  <em>Follow up</em> for “Find Minimum in Rotated Sorted Array”:<br>  What if duplicates are allowed?<br>  Would this affect the run-time complexity? How and why?</p>\n<p>Suppose a sorted array is rotated at some pivot unknown to you beforehand.</p>\n<p>(i.e., <strong>0 1 2 4 5 6 7</strong> might become <strong>4 5 6 7 0 1 2</strong>).</p>\n<p>Find the minimum element.</p>\n<p>The array may contain duplicates.</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>　153. Find Minimum in Rotated Sorted Array的跟进：<br>　如果有重复元素呢？<br>　会对时间复杂度有影响吗？怎样影响以及为什么？<br>假设一个有序数组，以一个未知的枢轴旋转了。(例如，<strong> 0 1 2 4 5 6 7 </strong>可能变为<strong> 4 5 6 7 0 1 2 </strong>)。<br>找出数组中的最小元素。<br>数组中可能有重复元素。</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><p>由153. Find Minimum in Rotated Sorted Array方法三改进。<br>由于存在首尾元素相同的情况，此时若nums[mid]与last相等，无法判断mid在左右哪部分，所以对于这种情况逐个元素排除，令low步进，直到nums[low]与last不等，此时则若nums[mid]与last相等则mid一定在右半部分；或者low与high相等，此时直接返回：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">findMin</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> low = <span class=\"number\">0</span>, high = nums.length - <span class=\"number\">1</span>, last = nums[high];</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (low &lt; high) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[low] == last) &#123;</span><br><span class=\"line\">                low++;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> mid = (high + low) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[mid] &gt; last) low = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nums[mid] &lt;= last) high = mid;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nums[high];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","categories":["算法"],"tags":["算法","LeetCode","Array"]},{"title":"LeetCode-153.Find Minimum in Rotated Sorted Array","url":"http://dotrabbit.tk/算法/000079-LeetCode-153.Find Minimum in Rotated Sorted Array/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Suppose a sorted array is rotated at some pivot unknown to you beforehand.</p>\n<p>(i.e., <strong>0 1 2 4 5 6 7</strong> might become <strong>4 5 6 7 0 1 2</strong>).</p>\n<p>Find the minimum element.</p>\n<p>You may assume no duplicate exists in the array.</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>假设一个有序数组，以一个未知的枢轴旋转了。(例如，<strong>0 1 2 4 5 6 7</strong>可能变为<strong>4 5 6 7 0 1 2</strong>)。<br>找出数组中的最小元素。<br>你可以认为数组中没有重复元素。</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><h2 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2><p>遍历……<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">findMin</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; nums.length; i++)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[i - <span class=\"number\">1</span>] &gt; nums[i])</span><br><span class=\"line\">                <span class=\"keyword\">return</span> nums[i];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2><p>二分变种<br>旋转后的数组分成左右两部分，以int last = nums[nums.length - 1]作为哨兵，比last大的都在左半部分，比last小的都在右半部分。<br>每次二分后将nums[mid]与last作比较，如果nums[mid] &gt; last，则mid在左半部分，将low移到mid的右边；如果nums[mid] &lt;= last，则mid在右半部分，将high移到mid的左边。<br>退出循环时，high指向最大值，low指向最小值：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">findMin</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> low = <span class=\"number\">0</span>, high = nums.length - <span class=\"number\">1</span>, last = nums[high];</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (low &lt;= high) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> mid = (low + high) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[mid] &gt; last) low = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nums[mid] &lt;= last) high = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nums[low];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>需要注意的是，以nums[nums.length - 1]作为哨兵，当数组旋转为初始递增状态时也适用；而以nums[0]作为哨兵时，当数组旋转为初始递增状态时则会出错，需要对这种情况，包括只有一个元素的情况先做判断：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">findMin</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> low = <span class=\"number\">0</span>, high = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 数组旋转出初始递增状态的情况，包括只有一个元素的情况</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[low] &lt;= nums[high]) <span class=\"keyword\">return</span> nums[low];</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (low &lt;= high) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> mid = (low + high) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[mid] &gt;= nums[<span class=\"number\">0</span>]) low = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nums[mid] &lt; nums[<span class=\"number\">0</span>]) high = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nums[low];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"方法三\"><a href=\"#方法三\" class=\"headerlink\" title=\"方法三\"></a>方法三</h2><p>方法二对情况的讨论不是很清晰，且无法应付154. Find Minimum in Rotated Sorted Array II。<br>看到参考二的文章，突然想起了之前做过的278. First Bad Version，其实两题有相同的地方：都是分成左右两部分，找右半部分的第一个元素。<br>改造了278题的算法如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">findMin</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> low = <span class=\"number\">0</span>, high = nums.length - <span class=\"number\">1</span>, last = nums[high];</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (low &lt; high) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> mid = (low + high) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[mid] &gt; last) low = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(nums[mid] &lt; last) high = mid;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nums[high];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>利用方法二，将last = nums[num.length - 1]作为哨兵，判断num[mid]在左半部分还是右半部分，相当于好版本或坏版本。<br>当mid在左半部分时，更新low为mid + 1，否则更新high为mid，最后返回nums[high]即可。<br>注意循环条件为low&lt;high。</p>\n<p>参考：<br><a href=\"http://www.cnblogs.com/x1957/p/4028271.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/x1957/p/4028271.html</a><br><a href=\"http://www.tuicool.com/articles/ry6Zz2\" target=\"_blank\" rel=\"noopener\">http://www.tuicool.com/articles/ry6Zz2</a></p>\n","categories":["算法"],"tags":["算法","LeetCode","Array"]},{"title":"LeetCode-81.Search in Rotated Sorted Array II","url":"http://dotrabbit.tk/算法/000078-LeetCode-81.Search in Rotated Sorted Array II/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Follow up for “Search in Rotated Sorted Array”:<br>What if <em>duplicates</em> are allowed?</p>\n<p>Would this affect the run-time complexity? How and why?</p>\n<p>Write a function to determine if a given target is in the array.</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>33. Search in Rotated Sorted Array的跟进：<br>如果有<em>重复</em>元素呢？<br>会对时间复杂度有影响吗？怎样影响以及为什么？<br>编写函数判断数组中是否存在给定的target。</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><h2 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2><p>遍历……<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">search</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[i] == target)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2><p>因为存在重复元素，如在 [1,3,1,1,1] 中查找 3，low=0，high=4，mid=2，nums[low]与nums[mid]相等，但nums[low]<br>到nums[mid]无序。<br>这种情况下33题的方法二会出错，因此nums[low]与nums[mid]相等的情况应当单独判断。<br>因为nums[low] = nums[mid] != target，并且此时无法判断数组的有序状况，所以退化为普通数组查找。所以令low步进即可：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">search</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> low = <span class=\"number\">0</span>, high = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (low &lt;= high) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> mid = (low + high) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[mid] == target) <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[low] &lt; nums[mid]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (nums[low] &lt;= target &amp;&amp; target &lt; nums[mid]) high = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> low = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nums[low] &gt; nums[mid]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (nums[mid] &lt; target &amp;&amp; target &lt;= nums[high]) low = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> high = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> low++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>参考：<br><a href=\"http://my.oschina.net/simon203/blog/262523\" target=\"_blank\" rel=\"noopener\">http://my.oschina.net/simon203/blog/262523</a></p>\n","categories":["算法"],"tags":["算法","LeetCode","Array"]},{"title":"LeetCode-33.Search in Rotated Sorted Array","url":"http://dotrabbit.tk/算法/000077-LeetCode-33.Search in Rotated Sorted Array/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Suppose a sorted array is rotated at some pivot unknown to you beforehand.</p>\n<p>(i.e., <strong>0 1 2 4 5 6 7</strong> might become <strong>4 5 6 7 0 1 2</strong>).</p>\n<p>You are given a target value to search. If found in the array return its index, otherwise return -1.</p>\n<p>You may assume no duplicate exists in the array.</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>假设一个有序数组，以一个未知的枢轴旋转了。(例如，<strong>0 1 2 4 5 6 7</strong>可能变为<strong>4 5 6 7 0 1 2</strong>)。<br>给出一个target值进行搜索。如果在数组中找到了则返回index，否则返回-1。<br>你可以认为数组中没有重复元素。</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><h2 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2><p>遍历……<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">search</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[i] == target)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2><p>对于题中的旋转数组，一定是分成左右两部分，两部分分别递增，而左半部分所有元素都比右半部分所有元素大。<br>采取二分策略，中点一定落在左或右部分。对于有序的部分，可以轻易判断出是否在区间上，如果在，则留下有序部分；如果不在，则继续在另外的分成左右两部分的数组中查找：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">search</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> low = <span class=\"number\">0</span>, high = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (low &lt;= high) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> mid = (low + high) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[mid] == target) <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[low] &lt;= nums[mid]) &#123;            <span class=\"comment\">// 等号很重要，因为low可能等于mid</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (nums[low] &lt;= target &amp;&amp; target &lt; nums[mid]) high = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> low = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (nums[mid] &lt; target &amp;&amp; target &lt;= nums[high]) low = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> high = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>参考：<br><a href=\"https://segmentfault.com/a/1190000003811864\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000003811864</a></p>\n","categories":["算法"],"tags":["算法","LeetCode","Array"]},{"title":"LeetCode-108.Convert Sorted Array to Binary Search Tree","url":"http://dotrabbit.tk/算法/000076-LeetCode-108.Convert Sorted Array to Binary Search Tree/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Given an array where elements are sorted in ascending order, convert it to a height balanced BST.</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>给出一个升序数组，将其转换为一颗平衡的二叉搜索树。</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><p>每次二分取中点作为根，两侧元素递归。注意二分的终止情况：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * public class TreeNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode left;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode right;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> TreeNode <span class=\"title\">sortedArrayToBST</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums == <span class=\"keyword\">null</span> || nums.length == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getBalancedBST(nums, <span class=\"number\">0</span>, nums.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> TreeNode <span class=\"title\">getBalancedBST</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> low, <span class=\"keyword\">int</span> high)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (low &gt; high) <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (low == high) <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TreeNode(nums[low]);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = (high + low) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        TreeNode root = <span class=\"keyword\">new</span> TreeNode(nums[mid]);</span><br><span class=\"line\">        root.left = getBalancedBST(nums, low, mid - <span class=\"number\">1</span>);</span><br><span class=\"line\">        root.right = getBalancedBST(nums, mid + <span class=\"number\">1</span>, high);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","categories":["算法"],"tags":["算法","LeetCode"]},{"title":"LeetCode-142.Linked List Cycle II","url":"http://dotrabbit.tk/算法/000075-LeetCode-142.Linked List Cycle II/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Given a linked list, return the node where the cycle begins. If there is no cycle, return <strong> null </strong>.<br>Follow up:<br>Can you solve it without using extra space?</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>给出一个链表，返回换开始的节点。如果没有环，返回空。<br>跟进：你能不适用额外空间解决本题吗？</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><p>根据公式推导，可得出结论：<br>设立快慢指针，快指针每次走两步，慢指针每次走一步，若有环，当快慢指针相遇时，另设一个指针，从头部开始每次一步，慢指针也保持每次一步，那么第三个指针与慢指针最终会在换入口处相遇：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * class ListNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode next;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode(int x) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         val = x;</span></span><br><span class=\"line\"><span class=\"comment\"> *         next = null;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">detectCycle</span><span class=\"params\">(ListNode head)</span> </span>&#123;</span><br><span class=\"line\">        ListNode slow = head, fast = head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fast == <span class=\"keyword\">null</span> || fast.next == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            slow = slow.next;</span><br><span class=\"line\">            fast = fast.next.next;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fast == slow) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ListNode cycle = head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (cycle != slow) &#123;</span><br><span class=\"line\">            cycle = cycle.next;</span><br><span class=\"line\">            slow = slow.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> cycle;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>参考：<br><a href=\"http://www.tuicool.com/articles/3EZJbm\" target=\"_blank\" rel=\"noopener\">http://www.tuicool.com/articles/3EZJbm</a></p>\n","categories":["算法"],"tags":["算法","LeetCode"]},{"title":"LeetCode-141.Linked List Cycle","url":"http://dotrabbit.tk/算法/000074-LeetCode-141.Linked List Cycle/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Given a linked list, determine if it has a cycle in it.</p>\n<p>Follow up:<br>Can you solve it without using extra space?</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>给出一个链表，判断它是否有环。<br>跟进：你能不适用额外空间解决本题吗？</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><p>设立快慢指针，快指针每次走一步，慢指针每次走两步。如果快指针走到了链表尾则无环，如果快慢指针相遇则有环：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * class ListNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode next;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode(int x) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         val = x;</span></span><br><span class=\"line\"><span class=\"comment\"> *         next = null;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasCycle</span><span class=\"params\">(ListNode head)</span> </span>&#123;</span><br><span class=\"line\">        ListNode slow = head, fast = head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (fast != <span class=\"keyword\">null</span> &amp;&amp; fast.next != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            slow = slow.next;</span><br><span class=\"line\">            fast = fast.next.next;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (slow == fast) <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","categories":["算法"],"tags":["算法","LeetCode"]},{"title":"LeetCode-35.Search Insert Position","url":"http://dotrabbit.tk/算法/000073-LeetCode-35.Search Insert Position/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.</p>\n<p>You may assume no duplicates in the array.</p>\n<p>Here are few examples.<br>[1,3,5,6], 5 → 2<br>[1,3,5,6], 2 → 1<br>[1,3,5,6], 7 → 4<br>[1,3,5,6], 0 → 0</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>给出一个有序数组，和一个target值。如果找到target则返回其index，如果找不到，则返回它应当插入的index。<br>你可以认为数组中无重复元素。<br>这里有一些例子。<br>[1,3,5,6], 5 → 2<br>[1,3,5,6], 2 → 1<br>[1,3,5,6], 7 → 4<br>[1,3,5,6], 0 → 0</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><p>考察对二分查找的深入理解。设立low和high，不断取中判断。当找到元素时直接返回，若找不到，则退出循环时，一定是high比low小1，并且 nums[high] &lt; target &lt; nums[low]，所以直接返回low即可：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">searchInsert</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> low = <span class=\"number\">0</span>, high = nums.length - <span class=\"number\">1</span>, mid;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (low &lt;= high) &#123;</span><br><span class=\"line\">            mid = (low + high) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[mid] &lt; target) low = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nums[mid] &gt; target) high = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> low;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","categories":["算法"],"tags":["算法","LeetCode","Array"]},{"title":"LeetCode-96.Unique Binary Search Trees","url":"http://dotrabbit.tk/算法/000072-LeetCode-96.Unique Binary Search Trees/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Given n, how many structurally unique <strong> BST’s </strong> (binary search trees) that store values 1…<em> n </em>?</p>\n<p>For example,<br>Given n = 3, there are a total of 5 unique BST’s.</p>\n<p>　1　　　　　　　3　　　3　　　2　　　1<br>　　\\　　　　　/　　　/　　　　/　\\　　　\\<br>　　　3　　　2　　　1　　　　1　　3　　　2<br>　　/　　　/　　　　　\\　　　　　　　　　　　\\<br>　2　　　1　　　　　　　2　　　　　　　　　　3</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>给出n，有多少种唯一的存储1到n的BST(搜索二叉树)？<br>例如，给出n=3，总共有5中唯一的BST。<br>　1　　　　　　　3　　　3　　　2　　　1<br>　　\\　　　　　/　　　/　　　　/　\\　　　\\<br>　　　3　　　2　　　1　　　　1　　3　　　2<br>　　/　　　/　　　　　\\　　　　　　　　　　　\\<br>　2　　　1　　　　　　　2　　　　　　　　　　3</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><p>假设n个元素，以k为根的BST数量为，由1到k-1组成的BST数量与k+1到n组成的BST数量的乘积，即C[k为根] = C[k - 1] * C[n - k]。<br>n个元素所有的BST即为以从1到n为根，每个BST数量的和。<br>利用动态规划，从1开始计算，一直到n，记录过程中每个C：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">numTrees</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] res = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n + <span class=\"number\">1</span>];</span><br><span class=\"line\">        res[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        res[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= i; j++) &#123;</span><br><span class=\"line\">                res[i] += res[j - <span class=\"number\">1</span>] * res[i - j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res[n];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>参考：<br><a href=\"http://www.blogjava.net/menglee/archive/2013/12/20/407801.html\" target=\"_blank\" rel=\"noopener\">http://www.blogjava.net/menglee/archive/2013/12/20/407801.html</a><br><a href=\"http://www.tuicool.com/articles/IFZbAr\" target=\"_blank\" rel=\"noopener\">http://www.tuicool.com/articles/IFZbAr</a></p>\n","categories":["算法"],"tags":["算法","LeetCode"]},{"title":"LeetCode-318.Maximum Product of Word Lengths","url":"http://dotrabbit.tk/算法/000071-LeetCode-318.Maximum Product of Word Lengths/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Given a string array <strong> words </strong>, find the maximum value of <strong> length(word[i]) * length(word[j]) </strong> where the two words do not share common letters. You may assume that each word will contain only lower case letters. If no such two words exist, return 0.</p>\n<p><strong> Example 1: </strong><br>Given <strong> [“abcw”, “baz”, “foo”, “bar”, “xtfn”, “abcdef”] </strong><br>Return <strong> 16 </strong><br>The two words can be <strong> “abcw”, “xtfn” </strong>.</p>\n<p><strong> Example 2: </strong><br>Given <strong> [“a”, “ab”, “abc”, “d”, “cd”, “bcd”, “abcd”] </strong><br>Return <strong> 4 </strong><br>The two words can be <strong> “ab”, “cd” </strong>.</p>\n<p><strong> Example 3: </strong><br>Given <strong> [“a”, “aa”, “aaa”, “aaaa”] </strong><br>Return <strong> 0 </strong><br>No such pair of words.</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>给出一个字符串数组words，找到无相同字母的单词中，length(word[i]) * length(word[j]) 的最小值。你可以认为每个单词值包含小写字母。如果没有无相同字母的单词，返回0。<br>例1：<br>给出[“abcw”, “baz”, “foo”, “bar”, “xtfn”, “abcdef”]，返回16。<br>单词可以是 “abcw”，”xtfn”。<br>例2：<br>给出[“a”, “ab”, “abc”, “d”, “cd”, “bcd”, “abcd”]，返回4。<br>单词可以是 “ab”，”cd”。<br>例3：<br>给出[“a”, “aa”, “aaa”, “aaaa”]，返回0。<br>没有无相同字母的单词。</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><p>对于每个单词，设一个26位的int，位操作，记录其字母出现情况。<br>判断两个单词是否有相同字母时，只要对其对应的int做与操作，如果结果为0，则无相同字母。<br>时间复杂度O(n)：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">maxProduct</span><span class=\"params\">(String[] words)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 记录每个单词中字母情况的int数组，每个元素为26位int</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] letters = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[words.length];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; words.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> letter = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">char</span> c : words[i].toCharArray())</span><br><span class=\"line\">                letter |= <span class=\"number\">1</span> &lt;&lt; (c - <span class=\"string\">'a'</span>);</span><br><span class=\"line\">            letters[i] = letter;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; words.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt; words.length; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((letters[i] &amp; letters[j]) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> len = words[i].length() * words[j].length();</span><br><span class=\"line\">                    res = len &gt; res ? len : res;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>参考：<br><a href=\"https://segmentfault.com/a/1190000004186943\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000004186943</a></p>\n","categories":["算法"],"tags":["算法","LeetCode"]},{"title":"LeetCode-144.Binary Tree Preorder Traversal","url":"http://dotrabbit.tk/算法/000070-LeetCode-144.Binary Tree Preorder Traversal/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Given a binary tree, return the preorder traversal of its nodes’ values.</p>\n<p>For example:<br>Given binary tree <strong> {1,#,2,3} </strong>,<br>　1<br>　　\\<br>　　　2<br>　　/<br>　3<br>return <strong>　[1,2,3] </strong>.</p>\n<p><strong> Note: </strong> Recursive solution is trivial, could you do it iteratively?</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>给出一颗二叉树，返回先序遍历序列。<br>例如：给出二叉树 {1, #, 2, 3}。<br>　1<br>　　\\<br>　　　2<br>　　/<br>　3<br>返回 [1,2,3]。<br>注意：递归解法很普通，你能否用非递归方法解出？</p>\n<p>解：<br>递归：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * public class TreeNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode left;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode right;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title\">preorderTraversal</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;Integer&gt; res = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">        preorderTraversal(root, res);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">preorderTraversal</span><span class=\"params\">(TreeNode root, List&lt;Integer&gt; res)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        res.add(root.val);</span><br><span class=\"line\">        preorderTraversal(root.left, res);</span><br><span class=\"line\">        preorderTraversal(root.right, res);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>非递归：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * public class TreeNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode left;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode right;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title\">preorderTraversal</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;Integer&gt; res = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">        Stack&lt;TreeNode&gt; stack = <span class=\"keyword\">new</span> Stack&lt;TreeNode&gt;();</span><br><span class=\"line\">        TreeNode node = root;</span><br><span class=\"line\">        stack.push(node);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!stack.isEmpty()) &#123;</span><br><span class=\"line\">            node = stack.pop();</span><br><span class=\"line\">            res.add(node.val);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (node.right != <span class=\"keyword\">null</span>) stack.push(node.right);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (node.left != <span class=\"keyword\">null</span>) stack.push(node.left);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","categories":["算法"],"tags":["算法","LeetCode"]},{"title":"LeetCode-268.Missing Number","url":"http://dotrabbit.tk/算法/000069-LeetCode-268.Missing Number/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Given an array containing n distinct numbers taken from <strong>0, 1, 2, …, n</strong>, find the one that is missing from the array.</p>\n<p>For example,<br>Given <em>nums</em> = <strong>[0, 1, 3]</strong> return <strong>2</strong>.</p>\n<p><strong>Note:</strong><br>Your algorithm should run in linear runtime complexity. Could you implement it using only constant extra space complexity?</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>给出一个包含从0到n中n个不同数字的数组，找到数组中缺失的数字。<br>例如，给出nums = [0, 1, 3]，返回2。<br>注意：你的算法应当运行在线性时间复杂度内。你能只用常数额外空间复杂度实现吗？</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><h2 id=\"方法一：加和\"><a href=\"#方法一：加和\" class=\"headerlink\" title=\"方法一：加和\"></a>方法一：加和</h2><p>如果不缺数字的话，则从0到n所有数和为 sum = n * (n + 1) / 2；求出nums中所有数的和numsSum，则sum - numsSum即为所求：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">missingNumber</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = nums.length, sum = n * (n + <span class=\"number\">1</span>) / <span class=\"number\">2</span>, numsSum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) numsSum += nums[i];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sum - numsSum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"方法二：异或\"><a href=\"#方法二：异或\" class=\"headerlink\" title=\"方法二：异或\"></a>方法二：异或</h2><p>异或相对于求和和乘积等运算，有不会导致溢出的优点：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">missingNumber</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = nums.length, xor = <span class=\"number\">0</span>, numsXor = nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n + <span class=\"number\">1</span>; i++) xor ^= i;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; nums.length; i++) numsXor ^= nums[i];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> xor ^ numsXor;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>参考：<br><a href=\"http://www.geeksforgeeks.org/find-the-missing-number/\" target=\"_blank\" rel=\"noopener\">http://www.geeksforgeeks.org/find-the-missing-number/</a></p>\n","categories":["算法"],"tags":["算法","LeetCode","Array"]},{"title":"LeetCode-238.Product of Array Except Self","url":"http://dotrabbit.tk/算法/000068-LeetCode-238.Product of Array Except Self/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Given an array of <em>n</em> integers where <em>n</em> &gt; 1, <strong>nums</strong>, return an array <strong>output</strong> such that <strong>output[i]</strong> is equal to the product of all the elements of <strong>nums</strong> except <strong>nums[i]</strong>.</p>\n<p>Solve it <strong>without division</strong> and in O(n).</p>\n<p>For example, given <strong>[1,2,3,4]</strong>, return <strong>[24,12,8,6]</strong>.</p>\n<p><strong>Follow up:</strong><br>Could you solve it with constant space complexity? (Note: The output array does not count as extra space for the purpose of space complexity analysis.)</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>给出一个由n个整数组成的数组nums，n&gt;1，返回一个output数组，使得output[i]等于nums中除nums[i]之外所有元素的乘积。<br>不用除法在O(n)内解决本题。<br>例如，给出 <strong>[1,2,3,4]</strong> ，返回 <strong>[24,12,8,6]</strong> 。<br><strong>跟进：</strong><br>你能否在常数空间复杂度下解决本题？(分析空间复杂度时output数组不算做额外空间。)</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><p>先从左向右遍历，使得对于output中每个数output[i]，都等于nums[1]到nums[i - 1]的乘积。<br>再从右向左遍历，设一个tmp值，对于每个output[i]，tmp等于nums[nums.length - 1]到nums[i + 1]的乘积，output[i]与tmp相乘，即得所得：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] productExceptSelf(<span class=\"keyword\">int</span>[] nums) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = nums.length, tmp = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] output = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[len];</span><br><span class=\"line\">        output[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; len; i++)</span><br><span class=\"line\">            output[i] = output[i - <span class=\"number\">1</span>] * nums[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = len - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">            output[i] *= tmp;</span><br><span class=\"line\">            tmp *= nums[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> output;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>参考：<br><a href=\"https://leetcode.com/discuss/46104/simple-java-solution-in-o-n-without-extra-space\" target=\"_blank\" rel=\"noopener\">https://leetcode.com/discuss/46104/simple-java-solution-in-o-n-without-extra-space</a></p>\n","categories":["算法"],"tags":["算法","LeetCode","Array"]},{"title":"LeetCode-155.Min Stack","url":"http://dotrabbit.tk/算法/000065-LeetCode-155.Min Stack/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.</p>\n<ul>\n<li>push(x) – Push element x onto stack.</li>\n<li>pop() – Removes the element on top of the stack.</li>\n<li>top() – Get the top element.</li>\n<li>getMin() – Retrieve the minimum element in the stack.</li>\n</ul>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>设计一个栈，支持push、pop、top操作，并能在常数时间内取出最小元素。</p>\n<ul>\n<li>push(x) – 将元素x push到栈顶部。</li>\n<li>pop() – 将元素从栈顶移除。</li>\n<li>top() – 获取顶部元素。</li>\n<li>getMin() – 取出栈中最小的元素。</li>\n</ul>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><p>另外设立一个栈，记录当前最小值。<br>push操作时，若最小值栈为空，则进栈；若不为空，与栈顶元素比较，如果小于栈顶元素，进栈，否则不操作；<br>pop操作时，与最小值栈栈顶元素比较，若相等则最小值栈也pop；若大于则不操作(不可能小于)；<br>top操作时，直接返回栈顶元素；<br>getMin操作时，直接返回最小栈栈顶元素：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MinStack</span> </span>&#123;</span><br><span class=\"line\">    Stack&lt;Integer&gt; minStack, minValues;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MinStack</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        minStack = <span class=\"keyword\">new</span>  Stack&lt;Integer&gt;();</span><br><span class=\"line\">        minValues = <span class=\"keyword\">new</span> Stack&lt;Integer&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">        minStack.push(x);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (minValues.isEmpty() || minValues.peek() &gt;= x) minValues.push(x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">pop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (minStack.peek().equals(minValues.peek())) minValues.pop();</span><br><span class=\"line\">        minStack.pop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">top</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> minStack.peek();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getMin</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> minValues.peek();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","categories":["算法"],"tags":["算法","LeetCode"]},{"title":"LeetCode-278.First Bad Version","url":"http://dotrabbit.tk/算法/000064-LeetCode-278.First Bad Version/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.</p>\n<p>Suppose you have n versions <strong> [1, 2, …, n] </strong> and you want to find out the first bad one, which causes all the following ones to be bad.</p>\n<p>You are given an API <strong> bool isBadVersion(version) </strong> which will return whether <strong> version </strong> is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>你是一个产品经理，目前正在领导一个小组开发一个新产品。不幸的是，最新版本的产品没有通过质量测试。因为每个版本都是基于前一个版本开发的，一个坏版本之后的所有版本都是坏的。<br>假设你有n个版本<strong> [1, 2, …, n] </strong>，并且你想要找到导致后面坏版本的第一个坏版本。<br>你可以使用一个API <strong> bool isBadVersion(version) </strong>，可以判断某个<strong> version </strong>是否是坏版本。实现函数，找到第一个坏版本。你应当最小化API的调用次数。</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><p>本题可理解为有重复元素的有序数组，寻找下界。<br>设立左右指针，每次取中，判断是否坏版本。如果mid是坏版本，则更新right为mid，否则更新left为mid+1。直到左右同时指向第一个坏版本停止。<br>需要注意一点，在取中时不能直接加除以2，可能出现溢出情况：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* The isBadVersion API is defined in the parent class VersionControl.</span></span><br><span class=\"line\"><span class=\"comment\">      boolean isBadVersion(int version); */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> <span class=\"keyword\">extends</span> <span class=\"title\">VersionControl</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">firstBadVersion</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> left = <span class=\"number\">1</span>, right = n;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (left &lt; right) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> mid = left + (right - left) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isBadVersion(mid)) right = mid;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> left;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>参考：<br><a href=\"http://blog.csdn.net/xudli/article/details/48286081\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/xudli/article/details/48286081</a></p>\n","categories":["算法"],"tags":["算法","LeetCode"]},{"title":"LeetCode-228.Summary Ranges","url":"http://dotrabbit.tk/算法/000063-LeetCode-228.Summary Ranges/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Given a sorted integer array without duplicates, return the summary of its ranges.</p>\n<p>For example, given [0,1,2,4,5,7], return [“0-&gt;2”,”4-&gt;5”,”7”].</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>给出一个无重复元素的已排序整型数组，返回其连续范围的集合。<br>例如，给出[0,1,2,4,5,7]，返回[“0-&gt;2”,”4-&gt;5”,”7”]。</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><p>每次循环设定起始和终止指针，终止指针不断向后扫描，直到不连续，输出range，更新起始指针，直到遍历完数组：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">summaryRanges</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;String&gt; rangesList = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (index &lt; nums.length) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> end = index + <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (end &lt; nums.length &amp;&amp; nums[end] - nums[end - <span class=\"number\">1</span>] == <span class=\"number\">1</span>) end++;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (end - index == <span class=\"number\">1</span>) rangesList.add(String.valueOf(nums[index++]));</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                rangesList.add(nums[index] + <span class=\"string\">\"-&gt;\"</span> + nums[end - <span class=\"number\">1</span>]);</span><br><span class=\"line\">                index = end;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> rangesList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","categories":["算法"],"tags":["算法","LeetCode","Array"]},{"title":"LeetCode-6.ZigZag Conversion","url":"http://dotrabbit.tk/算法/000062-LeetCode-6.ZigZag Conversion/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>The string “PAYPALISHIRING” is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)</p>\n<p>Ｐ　　　Ａ　　　Ｈ　　　Ｎ<br>Ａ　Ｐ　Ｌ　Ｓ　Ｉ　Ｉ　Ｇ<br>Ｙ　　　Ｉ　　　Ｒ<br>And then read line by line: “PAHNAPLSIIGYIR”<br>Write the code that will take a string and make this conversion given a number of rows:</p>\n<p>string convert(string text, int nRows);<br>convert(“PAYPALISHIRING”, 3) should return “PAHNAPLSIIGYIR”.</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>给出行数，字符串”PAYPALISHIRING”按照zigzag模式写出来如下：(你可能需要用优化的字体来显示该模式以获得更好的辨识)<br>Ｐ　　　Ａ　　　Ｈ　　　Ｎ<br>Ａ　Ｐ　Ｌ　Ｓ　Ｉ　Ｉ　Ｇ<br>Ｙ　　　Ｉ　　　Ｒ<br>然后按行读出：”PAHNAPLSIIGYIR”<br>编写代码，将给定字符串按照指定行数转换：string convert(string text, int nRows);<br>convert(“PAYPALISHIRING”, 3) 应当返回 “PAHNAPLSIIGYIR”。</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><p>当nRows = 5时，写出如下zigzag模式：<br>1　　　　　9　　　　　　17<br>2　　　8　10　　　16　18<br>3　　7　　11　　15　　19<br>4　6　　　12　14　　　20<br>5　　　　　13　　　　　21<br>从中可以观察得到，对于第一行和最后一行，每隔 8 (= nRows - 2)个字符循环一次；而对于其他行，除了该循环之外，还包括一个 2 <em> nRows - 2 - 2 </em> row 的循环，直接遍历，需要注意当nRows = 1时直接返回：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">convert</span><span class=\"params\">(String s, <span class=\"keyword\">int</span> nRows)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s == <span class=\"keyword\">null</span> || s.length() == <span class=\"number\">0</span> || nRows &lt;= <span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">        String zStr = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = s.length();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> row = <span class=\"number\">0</span>; row &lt; nRows; row++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> index = row;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (index &lt; len) &#123;</span><br><span class=\"line\">                zStr += s.charAt(index);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (row != <span class=\"number\">0</span> &amp;&amp; row != nRows - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    index += <span class=\"number\">2</span> * nRows - <span class=\"number\">2</span> - <span class=\"number\">2</span> * row;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (index &lt; len)</span><br><span class=\"line\">                        zStr += s.charAt(index);</span><br><span class=\"line\">                    index += <span class=\"number\">2</span> * row;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> index += <span class=\"number\">2</span> * nRows - <span class=\"number\">2</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> zStr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","categories":["算法"],"tags":["算法","LeetCode"]},{"title":"LeetCode-125.Valid Palindrome","url":"http://dotrabbit.tk/算法/000061-LeetCode-125.Valid Palindrome/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.</p>\n<p>For example,<br>“A man, a plan, a canal: Panama” is a palindrome.<br>“race a car” is not a palindrome.</p>\n<p>Note:<br>Have you consider that the string might be empty? This is a good question to ask during an interview.</p>\n<p>For the purpose of this problem, we define empty string as valid palindrome.</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>给出一个字符串，判断它是否是回文的，只考虑字母数字的字符，并忽略大小写。<br>例如，<br>“A man, a plan, a canal: Panama” 是一个回文。<br>“race a car” 不是回文。<br>注意：<br>你是否考虑到字符串可能为空？这是一个面试时的好问题。<br>对于本题，认为空字符串是一个合法的回文字符串。</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><p>设立左右两个指针，分别从头尾遍历，左右字符不同时返回false，相遇时返回true。本题需要特别注意的是1、非字母数字字符，2、大小写：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isPalindrome</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>, right = s.length() - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (left &lt; right) &#123;</span><br><span class=\"line\">        \t<span class=\"keyword\">while</span> (!isValid(s.charAt(left))) &#123;</span><br><span class=\"line\">        \t\tleft++;</span><br><span class=\"line\">        \t\t<span class=\"keyword\">if</span> (left == right) <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        \t&#125;</span><br><span class=\"line\">        \t<span class=\"keyword\">while</span> (!isValid(s.charAt(right))) &#123;</span><br><span class=\"line\">        \t\tright--;</span><br><span class=\"line\">        \t\t<span class=\"keyword\">if</span> (left == right) <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        \t&#125;</span><br><span class=\"line\">        \t<span class=\"keyword\">if</span> (Character.toLowerCase(s.charAt(left)) != Character.toLowerCase(s.charAt(right)))</span><br><span class=\"line\">        \t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        \tleft++;</span><br><span class=\"line\">        \tright--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isValid</span><span class=\"params\">(<span class=\"keyword\">char</span> c)</span> </span>&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> (c &gt;= <span class=\"string\">'a'</span> &amp;&amp; c &lt;= <span class=\"string\">'z'</span>) || (c &gt;= <span class=\"string\">'A'</span> &amp;&amp; c &lt;= <span class=\"string\">'Z'</span>) || (c &gt;= <span class=\"string\">'0'</span> &amp;&amp; c &lt;= <span class=\"string\">'9'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","categories":["算法"],"tags":["算法","LeetCode"]},{"title":"LeetCode-28.Implement strStr()","url":"http://dotrabbit.tk/算法/000060-LeetCode-28.Implement strStr()/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Implement strStr().</p>\n<p>Returns the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>实现strStr()。<br>返回haystack中，needle出现的第一个下标，如果haystack不包含needle，返回-1。</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><h2 id=\"方法一：API法\"><a href=\"#方法一：API法\" class=\"headerlink\" title=\"方法一：API法\"></a>方法一：API法</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">strStr</span><span class=\"params\">(String haystack, String needle)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> haystack.indexOf(needle);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"方法二：暴力破解法\"><a href=\"#方法二：暴力破解法\" class=\"headerlink\" title=\"方法二：暴力破解法\"></a>方法二：暴力破解法</h2><p>从haystack的第一个字符作为开始，向后判断needle.length()位字符看是否相等。<br>直到遇到子串，或长度超出：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">strStr</span><span class=\"params\">(String haystack, String needle)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> hLen = haystack.length(), nLen = needle.length();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= hLen - nLen; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> lastIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (lastIndex &lt; nLen) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (haystack.charAt(i + lastIndex) != needle.charAt(lastIndex))</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                lastIndex++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (lastIndex == nLen)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>另外一种更简洁写法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">strStr</span><span class=\"params\">(String haystack, String needle)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> hIndex = <span class=\"number\">0</span>, nIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nIndex == needle.length()) <span class=\"keyword\">return</span> hIndex;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (hIndex + nIndex == haystack.length()) <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (haystack.charAt(hIndex + nIndex) != needle.charAt(nIndex)) &#123;</span><br><span class=\"line\">                hIndex++;</span><br><span class=\"line\">                nIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> nIndex++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>但是效率最低……</p>\n<h2 id=\"方法三：KMP\"><a href=\"#方法三：KMP\" class=\"headerlink\" title=\"方法三：KMP\"></a>方法三：KMP</h2><p>参考：<br><a href=\"http://www.programcreek.com/2012/12/leetcode-implement-strstr-java/\" target=\"_blank\" rel=\"noopener\">http://www.programcreek.com/2012/12/leetcode-implement-strstr-java/</a><br><a href=\"http://www.2cto.com/kf/201411/355542.html\" target=\"_blank\" rel=\"noopener\">http://www.2cto.com/kf/201411/355542.html</a></p>\n","categories":["算法"],"tags":["算法","LeetCode"]},{"title":"LeetCode-303.Range Sum Query - Immutable","url":"http://dotrabbit.tk/算法/000059-LeetCode-303.Range Sum Query - Immutable/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Given an integer array nums, find the sum of the elements between indices i and j (i ≤ j), inclusive.</p>\n<p><strong> Example: </strong><br>Given nums = [-2, 0, 3, -5, 2, -1]</p>\n<p>sumRange(0, 2) -&gt; 1<br>sumRange(2, 5) -&gt; -1<br>sumRange(0, 5) -&gt; -3</p>\n<p><strong> Note: </strong><br>You may assume that the array does not change.<br>There are many calls to sumRange function.</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>给出一个整型数组nums，计算下标在i到j (i ≤ j，包括i、j)之间的元素之和。<br>例如：<br>给出 nums = [-2, 0, 3, -5, 2, -1]<br>sumRange(0, 2) -&gt; 1<br>sumRange(2, 5) -&gt; -1<br>sumRange(0, 5) -&gt; -3<br>注意：<br>你可以认为数组是不变的。<br>会多次调用sumRange函数。</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><p>构造从第一个元素开始，到后面所有元素的和的记录sums。<br>当i等于0时，直接返回sums[j]；<br>当i不等于0时，返回sums[j] - sums[i - 1]，<br>例如，sumRange(2, 5) = sumRange(0, 5) - sumRange(0, 1) = sums[5] - sums[1]：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NumArray</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] sums;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">NumArray</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">        sums = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[nums.length];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">            sum += nums[i];</span><br><span class=\"line\">            sums[i] = sum;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">sumRange</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> sums[j];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sums[j] - sums[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Your NumArray object will be instantiated and called as such:</span></span><br><span class=\"line\"><span class=\"comment\">// NumArray numArray = new NumArray(nums);</span></span><br><span class=\"line\"><span class=\"comment\">// numArray.sumRange(0, 1);</span></span><br><span class=\"line\"><span class=\"comment\">// numArray.sumRange(1, 2);</span></span><br></pre></td></tr></table></figure>","categories":["算法"],"tags":["算法","LeetCode"]},{"title":"LeetCode-257.Binary Tree Paths","url":"http://dotrabbit.tk/算法/000058-LeetCode-257.Binary Tree Paths/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Given a binary tree, return all root-to-leaf paths.</p>\n<p>For example, given the following binary tree:</p>\n<p>　　1<br>　/　　\\<br>2　　　　3<br>　\\<br>　　5<br>All root-to-leaf paths are:</p>\n<p>[“1-&gt;2-&gt;5”, “1-&gt;3”]</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>给出一颗二叉树，返回所有的从根到叶子节点的路径。<br>例如，给出下列二叉树：<br>　　1<br>　/　　\\<br>2　　　　3<br>　\\<br>　　5<br>所有的从根到叶子节点的路径为：<br>[“1-&gt;2-&gt;5”, “1-&gt;3”]</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><p>最终结果list的size即为叶子节点个数，当遇到叶子节点时，记录值，并新建list，对于每个节点，其到所有叶子节点的路径为，其左孩子到所有叶子节点的所有路径加上自身，与右子树到所有叶子节点的所有路径之和：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * public class TreeNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode left;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode right;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">binaryTreePaths</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root.left == <span class=\"keyword\">null</span> &amp;&amp; root.right == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> Arrays.asList(String.valueOf(root.val));</span><br><span class=\"line\">        </span><br><span class=\"line\">        List&lt;String&gt; leftPaths = binaryTreePaths(root.left);</span><br><span class=\"line\">        List&lt;String&gt; rightPaths = binaryTreePaths(root.right);</span><br><span class=\"line\">        List&lt;String&gt; allPaths = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; leftPaths.size(); i++) leftPaths.set(i, root.val + <span class=\"string\">\"-&gt;\"</span> + leftPaths.get(i));</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; rightPaths.size(); i++) rightPaths.set(i, root.val + <span class=\"string\">\"-&gt;\"</span> + rightPaths.get(i));</span><br><span class=\"line\">        allPaths.addAll(leftPaths);</span><br><span class=\"line\">        allPaths.addAll(rightPaths);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> allPaths;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>7ms，效率较低，因为过程中涉及了大量不必要的链表操作，且浪费许多空间。<br>新增加一个函数，遍历二叉树，当遇到叶子节点时更新list，否则递归遍历：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * public class TreeNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode left;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode right;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    List&lt;String&gt; paths = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">binaryTreePaths</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root != <span class=\"keyword\">null</span>) getPath(root, String.valueOf(root.val));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> paths;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">getPath</span><span class=\"params\">(TreeNode curNode, String curPath)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (curNode.left == <span class=\"keyword\">null</span> &amp;&amp; curNode.right == <span class=\"keyword\">null</span>) paths.add(curPath);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (curNode.left != <span class=\"keyword\">null</span>) getPath(curNode.left, curPath + <span class=\"string\">\"-&gt;\"</span> + curNode.left.val);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (curNode.right != <span class=\"keyword\">null</span>) getPath(curNode.right, curPath + <span class=\"string\">\"-&gt;\"</span> + curNode.right.val);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>3ms。</p>\n<p>参考：<br><a href=\"https://segmentfault.com/a/1190000003465753\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000003465753</a></p>\n","categories":["算法"],"tags":["算法","LeetCode"]},{"title":"LeetCode-203.Remove Linked List Elements","url":"http://dotrabbit.tk/算法/000056-LeetCode-203.Remove Linked List Elements/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Remove all elements from a linked list of integers that have value val.</p>\n<p>Example<br>Given: 1 –&gt; 2 –&gt; 6 –&gt; 3 –&gt; 4 –&gt; 5 –&gt; 6, val = 6<br>Return: 1 –&gt; 2 –&gt; 3 –&gt; 4 –&gt; 5</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>移除一个链表中，所有值与val相等的节点。<br>例如，<br>给出： 1 –&gt; 2 –&gt; 6 –&gt; 3 –&gt; 4 –&gt; 5 –&gt; 6， val = 6<br>返回： 1 –&gt; 2 –&gt; 3 –&gt; 4 –&gt; 5</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><p>设立两个节点，当前节点为head.next，前驱节点为head。<br>如果当前节点值与val相等，删除节点，更新当前节点；如果不相等，更新当前节点和前驱节点。<br>最后判断头结点，如果与值相等，返回head.next，否则直接返回head：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * public class ListNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode next;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">removeElements</span><span class=\"params\">(ListNode head, <span class=\"keyword\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        ListNode last = head, cur = head.next;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (cur != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cur.val == val) &#123;</span><br><span class=\"line\">                last.next = cur.next;</span><br><span class=\"line\">                cur = cur.next;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                last = cur;</span><br><span class=\"line\">                cur = cur.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head.val == val)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> head.next;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>递归解法，参考leetcode讨论区：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * public class ListNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode next;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">removeElements</span><span class=\"params\">(ListNode head, <span class=\"keyword\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        head.next = removeElements(head.next, val);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head.val == val ? head.next : head;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>参考：<br><a href=\"https://leetcode.com/discuss/33043/3-line-recursive-solution\" target=\"_blank\" rel=\"noopener\">https://leetcode.com/discuss/33043/3-line-recursive-solution</a></p>\n","categories":["算法"],"tags":["算法","LeetCode"]},{"title":"LeetCode-205.Isomorphic Strings","url":"http://dotrabbit.tk/算法/000055-LeetCode-205.Isomorphic Strings/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Given two strings <strong> <em> s </em> </strong> and <strong> <em> t </em> </strong>, determine if they are isomorphic.</p>\n<p>Two strings are isomorphic if the characters in <strong> <em> s </em> </strong> can be replaced to get <strong> <em> t </em> </strong>.</p>\n<p>All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character but a character may map to itself.</p>\n<p>For example,<br>Given <strong> “egg” </strong>, <strong> “add” </strong>, return true.</p>\n<p>Given <strong> “foo” </strong>, <strong> “bar” </strong>, return false.</p>\n<p>Given <strong> “paper” </strong>, <strong> “title” </strong>, return true.</p>\n<p>Note:<br>You may assume both <strong> <em> s </em> </strong> and <strong> <em> t </em> </strong> have the same length.</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>给出两个字符串<strong> <em> s </em> </strong>和<strong> <em> t </em> </strong>，判断它们是否是同构的。<br>如果<strong> <em> s </em> </strong>可以通过字符替换得到<strong> <em> t </em> </strong>，则说它们是同构的。<br>字符的所有出现都必须替换为另一个字符，并保持顺序。两个字符不能映射到同一个字符上，但是一个字符可以映射到自己。<br>例如，<br>给出 <strong> “egg” </strong>， <strong> “add” </strong>，返回true。<br>给出 <strong> “foo” </strong>， <strong> “bar” </strong>，返回false。<br>给出 <strong> “paper” </strong>， <strong> “title” </strong>，返回true。<br>注意：<br>你可以认为<strong> <em> s </em> </strong>和<strong> <em> t </em> </strong>有相同长度。</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><p>与290. Word Pattern类似。<br>循环判断，维护两个map，分别记录s到t的字符映射，和t到s的字符映射，保证双向映射相同且唯一：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isIsomorphic</span><span class=\"params\">(String s, String t)</span> </span>&#123;</span><br><span class=\"line\">        Map&lt;Character, Character&gt; sTot = <span class=\"keyword\">new</span> HashMap&lt;Character, Character&gt;();</span><br><span class=\"line\">        Map&lt;Character, Character&gt; tTos = <span class=\"keyword\">new</span> HashMap&lt;Character, Character&gt;();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">char</span> sChar = s.charAt(i), tChar = t.charAt(i);</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (sTot.get(sChar) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (sTot.get(sChar) != tChar) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> sTot.put(sChar, tChar);</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (tTos.get(tChar) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (tTos.get(tChar) != sChar) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> tTos.put(tChar, sChar);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","categories":["算法"],"tags":["算法","LeetCode"]},{"title":"LeetCode-38.Count and Say","url":"http://dotrabbit.tk/算法/000054-LeetCode-38.Count and Say/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>The count-and-say sequence is the sequence of integers beginning as follows:<br><strong> 1, 11, 21, 1211, 111221, … </strong></p>\n<p><strong> 1 </strong> is read off as <strong> “one 1” </strong> or <strong> 11 </strong>.<br><strong> 11 </strong> is read off as <strong> “two 1s” </strong> or <strong> 21 </strong>.<br><strong> 21 </strong> is read off as <strong> “one 2, then one 1” </strong> or <strong> 1211 </strong>.<br>Given an integer <em> n </em>, generate the <em> n </em>th sequence.</p>\n<p>Note: The sequence of integers will be represented as a string.</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>数和说序列是一个由以下数字开始的序列：<strong> 1, 11, 21, 1211, 111221, … </strong><br><strong> 1 </strong> 读作<strong> “一个1“ </strong>，或者<strong> 11 </strong>。<br><strong> 11 </strong> 读作<strong> “两个1“ </strong>，或者<strong> 21 </strong>。<br><strong> 21 </strong> 读作<strong> “一个2，然后一个1“ </strong>，或者<strong> 1211 </strong>。<br>给出一个整数<em> n </em>，生成第<em> n </em>个序列。<br>注意：数字序列应当被表示为一个字符串。</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><p>从1到n，逐个计算。<br>对于从n-1到n，先记录第一个数字，向后循环直到遇到不同数字，将个数和数字输出，更新记录的数字和个数，扫描到结尾即可：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">countAndSay</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        String say = <span class=\"string\">\"1\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">char</span> lastChar = say.charAt(<span class=\"number\">0</span>);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> count = <span class=\"number\">1</span>;</span><br><span class=\"line\">            StringBuilder saysb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt; say.length(); j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">char</span> cur = say.charAt(j);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (lastChar == cur) count++;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    saysb.append(count).append(lastChar);</span><br><span class=\"line\">                    lastChar = cur;</span><br><span class=\"line\">                    count = <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            saysb.append(count).append(lastChar);</span><br><span class=\"line\">            say = saysb.toString();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> say;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","categories":["算法"],"tags":["算法","LeetCode"]},{"title":"LeetCode-290.Word Pattern","url":"http://dotrabbit.tk/算法/000053-LeetCode-290.Word Pattern/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Given a <strong> pattern </strong> and a string <strong> str </strong>, find if <strong> str </strong> follows the same pattern.</p>\n<p>Here follow means a full match, such that there is a bijection between a letter in <strong> pattern </strong> and a non-empty word in <strong> str </strong>.</p>\n<p>Examples:<br>pattern = <strong> “abba” </strong>, str = <strong> “dog cat cat dog” </strong> should return true.<br>pattern = <strong> “abba” </strong>, str = <strong> “dog cat cat fish” </strong> should return false.<br>pattern = <strong> “aaaa” </strong>, str = <strong> “dog cat cat dog” </strong> should return false.<br>pattern = <strong> “abba” </strong>, str = <strong> “dog dog dog dog” </strong> should return false.<br>Notes:<br>You may assume <strong> pattern </strong> contains only lowercase letters, and <strong> str </strong> contains lowercase letters separated by a single space.</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>给出一个pattern和一个字符串str，判断str是否遵循一样的模式。<br>在这里遵循的意思是完全匹配，即pattern和str中的非空单词的双向对应。<br>例如：<br>pattern = <strong> “abba” </strong>, str = <strong> “dog cat cat dog” </strong> 应当返回true.<br>pattern = <strong> “abba” </strong>, str = <strong> “dog cat cat fish” </strong> 应当返回false.<br>pattern = <strong> “aaaa” </strong>, str = <strong> “dog cat cat dog” </strong> 应当返回false.<br>pattern = <strong> “abba” </strong>, str = <strong> “dog dog dog dog” </strong> 应当返回false.</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><p>与205. Isomorphic Strings类似。<br>设立一个hashmap，逐个遍历pattern和str中的单词，建立映射关系。因为要双向对应，所以非法的情况有以下：<br>1、pattern与str中的单词长度不一致；<br>2、对于同样的pattern字符，str中对应的单词不一致；<br>3、对于str中同样的单词，pattern的字符不一致：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">wordPattern</span><span class=\"params\">(String pattern, String str)</span> </span>&#123;</span><br><span class=\"line\">        String[] words = str.split(<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (words.length != pattern.length()) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        Map&lt;Character, String&gt; patternWords = <span class=\"keyword\">new</span> HashMap&lt;Character, String&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; words.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">char</span> c = pattern.charAt(i);</span><br><span class=\"line\">            String word = words[i], mapWord = patternWords.get(c);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mapWord != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!word.equals(mapWord)) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (patternWords.containsValue(word)) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> patternWords.put(c, word);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["算法"],"tags":["算法","LeetCode"]},{"title":"LeetCode-299.Bulls and Cows","url":"http://dotrabbit.tk/算法/000052-LeetCode-299.Bulls and Cows/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>You are playing the following <em> Bulls and Cows </em>(<a href=\"https://en.wikipedia.org/wiki/Bulls_and_Cows\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Bulls_and_Cows</a>) game with your friend: You write down a number and ask your friend to guess what the number is. Each time your friend makes a guess, you provide a hint that indicates how many digits in said guess match your secret number exactly in both digit and position (called “bulls”) and how many digits match the secret number but locate in the wrong position (called “cows”). Your friend will use successive guesses and hints to eventually derive the secret number.</p>\n<p>For example:</p>\n<p>Secret number:  “1807”<br>Friend’s guess: “7810”</p>\n<p>Hint: 1 bull and 3 cows. (The bull is 8, the cows are 0, 1 and 7.)<br>Write a function to return a hint according to the secret number and friend’s guess, use A to indicate the bulls and B to indicate the cows. In the above example, your function should return “1A3B”.</p>\n<p>Please note that both secret number and friend’s guess may contain duplicate digits, for example:</p>\n<p>Secret number:  “1123”<br>Friend’s guess: “0111”</p>\n<p>In this case, the 1st 1 in friend’s guess is a bull, the 2nd or 3rd 1 is a cow, and your function should return “1A1B”.<br>You may assume that the secret number and your friend’s guess only contain digits, and their lengths are always equal.</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>你在跟你的朋友玩公牛和母牛/猜数字(<a href=\"http://baike.baidu.com/subview/358630/11117097.htm\" target=\"_blank\" rel=\"noopener\">http://baike.baidu.com/subview/358630/11117097.htm</a>)游戏：你写下一个数字，并让你的朋友猜数字是什么。每次你的朋友猜一个数字，你给他提示，告诉他有多少位数跟你的数字数值和位置都一样(称作“公牛”)，多少位数跟你的数字数值一样但位置不对(称作“母牛”)。你的朋友会用连续的猜测和提示，最终得到数字。<br>例如：<br>秘密数字：1807<br>朋友猜测：7810<br>提示：1个公牛和3个母牛。(公牛是8，母牛是0、1和7)<br>编写函数返回针对秘密数字和朋友猜测的提示，使用A来代表公牛，B来表示母牛。在上面的例子中，你的函数应该返回“1A3B”。<br>请注意秘密梳子和朋友的猜测可能包含重复位，例如：<br>秘密梳子：1123<br>朋友猜测：0111<br>在这种情况下，朋友猜测的第一个1是公牛，第2和第3个1是母牛，你的函数应该返回“1A1B”。<br>你可以假设秘密梳子和朋友的猜测只包含数字，并且它们的长度总是相同的。</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><h2 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2><p>设立两个char数组，遍历一遍，计算A，并将A的位置分别置空；<br>设立一个map，统计secret里剩下的字符频率；<br>遍历guess里剩下的字符，如果map中存在并不为0，B加1，map中的频率减1：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getHint</span><span class=\"params\">(String secret, String guess)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> A = <span class=\"number\">0</span>, B = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">char</span>[] secretChar = secret.toCharArray();</span><br><span class=\"line\">        <span class=\"keyword\">char</span>[] guessChar = guess.toCharArray();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; secretChar.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (secretChar[i] == guessChar[i]) &#123;</span><br><span class=\"line\">                A++;</span><br><span class=\"line\">                secretChar[i] = <span class=\"string\">' '</span>;</span><br><span class=\"line\">                guessChar[i] = <span class=\"string\">' '</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        Map&lt;Character, Integer&gt; secretDigits = <span class=\"keyword\">new</span> HashMap&lt;Character, Integer&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">char</span> c : secretChar) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (c != <span class=\"string\">' '</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (secretDigits.containsKey(c))</span><br><span class=\"line\">                    secretDigits.put(c, secretDigits.get(c) + <span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"keyword\">else</span> secretDigits.put(c, <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">char</span> c : guessChar) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (secretDigits.containsKey(c) &amp;&amp; secretDigits.get(c) &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                B++;</span><br><span class=\"line\">                secretDigits.put(c, secretDigits.get(c) - <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> A + <span class=\"string\">\"A\"</span> + B + <span class=\"string\">\"B\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>15ms</p>\n<h2 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2><p>将上述解法的第二三个循环，合并到第一个循环中，因为只有0到9，所以设立一个长度为10的int数组，替代map，进行记录：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getHint</span><span class=\"params\">(String secret, String guess)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> A = <span class=\"number\">0</span>, B = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] nums = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; secret.length(); i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">char</span> s = secret.charAt(i), g = guess.charAt(i);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s == g) A++;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                nums[s - <span class=\"string\">'0'</span>]++;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (nums[s - <span class=\"string\">'0'</span>] &lt;= <span class=\"number\">0</span>) B++;</span><br><span class=\"line\">                nums[g - <span class=\"string\">'0'</span>]--;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (nums[g - <span class=\"string\">'0'</span>] &gt;= <span class=\"number\">0</span>) B++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> A + <span class=\"string\">\"A\"</span> + B + <span class=\"string\">\"B\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>3ms</p>\n<p>参考：<br><a href=\"http://my.oschina.net/Tsybius2014/blog/524452\" target=\"_blank\" rel=\"noopener\">http://my.oschina.net/Tsybius2014/blog/524452</a></p>\n","categories":["算法"],"tags":["算法","LeetCode"]},{"title":"LeetCode-20.Valid Parentheses","url":"http://dotrabbit.tk/算法/000051-LeetCode-20.Valid Parentheses/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Given a string containing just the characters ‘(‘, ‘)’, ‘{‘, ‘}’, ‘[‘ and ‘]’, determine if the input string is valid.</p>\n<p>The brackets must close in the correct order, “()” and “()[]{}” are all valid but “(]” and “([)]” are not.</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>给出一个字符串，只包含字符 ‘(‘ 、’)’、’{‘、’}’、’[‘ 和 ‘]’，判断输入字符串是否是合法的。<br>括号必须以正确的顺序关闭， “()” 和 “()[]{}” 都是合法的，但 “(]” 和 “([)]” 不合法。</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><h2 id=\"方法一：利用栈匹配\"><a href=\"#方法一：利用栈匹配\" class=\"headerlink\" title=\"方法一：利用栈匹配\"></a>方法一：利用栈匹配</h2><p>当栈为空时，压栈；当栈不为空时，取出顶部元素，如果与当前字符匹配为一对括号，则出栈，否则压栈。不断循环，最后如果栈为空则合法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isValid</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">    Stack&lt;Character&gt; stack = <span class=\"keyword\">new</span> Stack&lt;Character&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">char</span> curChar : s.toCharArray()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (stack.isEmpty()) &#123;</span><br><span class=\"line\">            stack.push(curChar);</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">         <span class=\"keyword\">char</span> lastChar = stack.peek();</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (lastChar == <span class=\"string\">'('</span> &amp;&amp; curChar == <span class=\"string\">')'</span>) stack.pop();</span><br><span class=\"line\">         <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (lastChar == <span class=\"string\">'['</span> &amp;&amp; curChar == <span class=\"string\">']'</span>)\tstack.pop();</span><br><span class=\"line\">         <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (lastChar == <span class=\"string\">'&#123;'</span> &amp;&amp; curChar == <span class=\"string\">'&#125;'</span>)\tstack.pop();</span><br><span class=\"line\">         <span class=\"keyword\">else</span> stack.push(curChar);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> stack.isEmpty();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"方法二：每次去除字符串中已经相邻匹配的括号，循环判断：\"><a href=\"#方法二：每次去除字符串中已经相邻匹配的括号，循环判断：\" class=\"headerlink\" title=\"方法二：每次去除字符串中已经相邻匹配的括号，循环判断：\"></a>方法二：每次去除字符串中已经相邻匹配的括号，循环判断：</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isValid</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (s.contains(<span class=\"string\">\"()\"</span>) || s.contains(<span class=\"string\">\"[]\"</span>) || s.contains(<span class=\"string\">\"&#123;&#125;\"</span>))</span><br><span class=\"line\">        s = s.replace(<span class=\"string\">\"()\"</span>, <span class=\"string\">\"\"</span>).replace(<span class=\"string\">\"[]\"</span>, <span class=\"string\">\"\"</span>).replace(<span class=\"string\">\"&#123;&#125;\"</span>, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s.length() == <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效率低一些，但是思路很新颖。</p>\n<p>参考：<br><a href=\"http://www.2cto.com/kf/201411/355360.html\" target=\"_blank\" rel=\"noopener\">http://www.2cto.com/kf/201411/355360.html</a></p>\n","categories":["算法"],"tags":["算法","LeetCode"]},{"title":"LeetCode-19.Remove Nth Node From End of List","url":"http://dotrabbit.tk/算法/000050-LeetCode-19.Remove Nth Node From End of List/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Given a linked list, remove the nth node from the end of list and return its head.</p>\n<p>For example,</p>\n<p>   Given linked list: 1-&gt;2-&gt;3-&gt;4-&gt;5, and n = 2.</p>\n<p>   After removing the second node from the end, the linked list becomes 1-&gt;2-&gt;3-&gt;5.</p>\n<p><strong> Note: </strong><br>Given n will always be valid.<br>Try to do this in one pass.</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>给出一个链表，去除从后向前第n个节点，返回链表头。<br>例如，给出链表：1-&gt;2-&gt;3-&gt;4-&gt;5，n = 2。在去除从后向前第2个节点后，链表变为1-&gt;2-&gt;3-&gt;5。<br>注意：<br>给出的n总是合法的。<br>尝试一趟完成操作。</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><p>设立快慢指针，快指针先走n步，然后快慢指针同时走，当快指针的后继为空时停止，让慢指针的后继指向其后继的后继，返回头结点。<br>需要注意的是，当快指针走n步后，如果指向空，则要删除的是头结点，直接返回head.next：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">removeNthFromEnd</span><span class=\"params\">(ListNode head, <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    ListNode slow = head, fast = head;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n-- &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        fast = fast.next;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fast == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head.next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (fast.next != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        slow = slow.next;</span><br><span class=\"line\">        fast = fast.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    slow.next = slow.next.next;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>参考：<br><a href=\"http://blog.csdn.net/yao_wust/article/details/41242805\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/yao_wust/article/details/41242805</a></p>\n","categories":["算法"],"tags":["算法","LeetCode"]},{"title":"LeetCode-58.Length of Last Word","url":"http://dotrabbit.tk/算法/000049-LeetCode-58.Length of Last Word/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Given a string s consists of upper/lower-case alphabets and empty space characters ‘ ‘, return the length of last word in the string.</p>\n<p>If the last word does not exist, return 0.</p>\n<p><strong> Note: </strong>A word is defined as a character sequence consists of non-space characters only.</p>\n<p>For example,<br>Given s = “Hello World”,<br>return 5.</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>给出一个由大小写字母和空格字符 ‘ ‘ 组成的字符串s，返回其最后一个单词的长度。<br>如果不存在最后一个单词，返回0。<br>注意：一个单词的定义是仅由非空格字符组成的字符序列。<br>例如，给出s = “Hello World”，返回5。</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><p>本题唯一的难点是，对“不存在最后一个单词”的理解……应当是s只包含空格的情况。</p>\n<h2 id=\"方法一：利用lastIndexOf接口\"><a href=\"#方法一：利用lastIndexOf接口\" class=\"headerlink\" title=\"方法一：利用lastIndexOf接口\"></a>方法一：利用lastIndexOf接口</h2><p>先trim，如果长度为0则返回0，否则取得最后一个空格的位置，截取之后的字符串取得长度即可：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">lengthOfLastWord</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">    s = s.trim();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s.length() == <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s.substring(s.lastIndexOf(<span class=\"string\">\" \"</span>) + <span class=\"number\">1</span>).length();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"方法二：利用split接口\"><a href=\"#方法二：利用split接口\" class=\"headerlink\" title=\"方法二：利用split接口\"></a>方法二：利用split接口</h2><p>对s用空格split，如果s只包含空格则字符数组长度为0。<br>s末尾的空格会自动忽略，s中间多个空格会切割为多个长度为0的字符串。<br>取最后一个字符串即可：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">lengthOfLastWord</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">    String[] words = s.split(<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = words.length;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> len == <span class=\"number\">0</span> ? <span class=\"number\">0</span> : words[len - <span class=\"number\">1</span>].length();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"方法三：从后向前遍历字符\"><a href=\"#方法三：从后向前遍历字符\" class=\"headerlink\" title=\"方法三：从后向前遍历字符\"></a>方法三：从后向前遍历字符</h2><p>从后先前遍历，首先跳过末尾的空格，然后逐步向前计算长度，遇到空格后停止循环返回。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">lengthOfLastWord</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> index = s.length() - <span class=\"number\">1</span>, res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (index &gt;= <span class=\"number\">0</span> &amp;&amp; s.charAt(index) == <span class=\"string\">' '</span>)</span><br><span class=\"line\">        index--;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (index &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s.charAt(index--) == <span class=\"string\">' '</span>)</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        res++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","categories":["算法"],"tags":["算法","LeetCode"]},{"title":"LeetCode-219.Contains Duplicate II","url":"http://dotrabbit.tk/算法/000046-LeetCode-219.Contains Duplicate II/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Given an array of integers and an integer k, find out whether there are two distinct indices i and j in the array such that nums[i] = nums[j] and the difference between i and j is at most k.</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>给出一个整型数组和一个整数k，判断是否存在不同的下标i和j，使得nums[i] = nums[j]并且i与j的差不比k大。</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><h2 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2><p>设立一个set，用来记录目前已有元素，判断是否重复。<br>设立左右两个游标，同时指向第一个元素。右游标不断后移，存入前k个元素，在过程中判断是否重复，如果有重复直接返回，如果没有左右同时后移，保证差为k，同时从set中去除左元素，加入右元素并判断是否重复。<br>需要注意k比nums长度大的情况。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">containsNearbyDuplicate</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    Set&lt;Integer&gt; numsSet = <span class=\"keyword\">new</span> HashSet&lt;Integer&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>, right = <span class=\"number\">0</span>, len = nums.length;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span> (right &lt; len &amp;&amp; right - left &lt;= k) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (numsSet.contains(nums[right]))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        numsSet.add(nums[right++]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">while</span> (right &lt; len) &#123;</span><br><span class=\"line\">        numsSet.remove(nums[left++]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (numsSet.contains(nums[right]))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        numsSet.add(nums[right++]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">containsNearbyDuplicate</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    Set&lt;Integer&gt; numsSet = <span class=\"keyword\">new</span> HashSet&lt;Integer&gt;();</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &gt; k)</span><br><span class=\"line\">            numsSet.remove(nums[i - k - <span class=\"number\">1</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!numsSet.add(nums[i]))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2><p>设立一个map，记录每个下标和数字，循环判断是否已经出现并且下标差不大于k。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">containsNearbyDuplicate</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    Map&lt;Integer, Integer&gt; numsMap = <span class=\"keyword\">new</span> HashMap&lt;Integer, Integer&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (numsMap.containsKey(nums[i]) &amp;&amp; i - numsMap.get(nums[i]) &lt;= k)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        numsMap.put(nums[i], i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","categories":["算法"],"tags":["算法","LeetCode","Array"]},{"title":"LeetCode-88.Merge Sorted Array","url":"http://dotrabbit.tk/算法/000044-LeetCode-88.Merge Sorted Array/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.</p>\n<p><strong>Note:</strong><br>You may assume that nums1 has enough space (size that is greater or equal to m + n) to hold additional elements from nums2. The number of elements initialized in nums1 and nums2 are m and n respectively.</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>给出两个排序的整型数组nums1和nums2，将nums2合并到nums1，成为一个排序数组。<br>注意：你可以认为nums1有足够的长度(长度大于等于m+n)来放置nums2中的元素。nums1和nums2中的元素数分别是m和n。</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><p>从两个数组尾部遍历，从后向前，向新数组中插入即可：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums1, <span class=\"keyword\">int</span> m, <span class=\"keyword\">int</span>[] nums2, <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (m &gt; <span class=\"number\">0</span> &amp;&amp; n &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums1[m - <span class=\"number\">1</span>] &gt; nums2[n - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                nums1[m + n - <span class=\"number\">1</span>] = nums1[m - <span class=\"number\">1</span>];</span><br><span class=\"line\">                m--;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nums1[m - <span class=\"number\">1</span>] &lt; nums2[n - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                nums1[m + n - <span class=\"number\">1</span>] = nums2[n - <span class=\"number\">1</span>];</span><br><span class=\"line\">                n--;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                nums1[m + n - <span class=\"number\">1</span>] = nums1[m - <span class=\"number\">1</span>];</span><br><span class=\"line\">                m--;</span><br><span class=\"line\">                nums1[m + n - <span class=\"number\">1</span>] = nums2[n - <span class=\"number\">1</span>];</span><br><span class=\"line\">                n--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (n &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            nums1[n - <span class=\"number\">1</span>] = nums2[n - <span class=\"number\">1</span>];</span><br><span class=\"line\">            n--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","categories":["算法"],"tags":["算法","LeetCode","Array"]},{"title":"LeetCode-160.Intersection of Two Linked Lists","url":"http://dotrabbit.tk/算法/000043-LeetCode-160.Intersection of Two Linked Lists/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Write a program to find the node at which the intersection of two singly linked lists begins.</p>\n<p>For example, the following two linked lists:</p>\n<p>A:　　　　　a1 → a2<br>　　　　　　　　　　　↘<br>　　　　　　　　　　　　　c1 → c2 → c3<br>　　　　　　　　　　　↗<br>B:　　　b1 → b2 → b3<br>begin to intersect at node c1.</p>\n<p>Notes:</p>\n<p>If the two linked lists have no intersection at all, return null.<br>The linked lists must retain their original structure after the function returns.<br>You may assume there are no cycles anywhere in the entire linked structure.<br>Your code should preferably run in O(n) time and use only O(1) memory.</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>编写程序，找到两个单链表的交叉起点。<br>例如，下面两个链表：<br>A:　　　　　a1 → a2<br>　　　　　　　　　　　↘<br>　　　　　　　　　　　　　c1 → c2 → c3<br>　　　　　　　　　　　↗<br>B:　　　b1 → b2 → b3<br>从c1节点开始交叉。<br>注意：<br>如果两个链表无交叉，返回null。<br>函数返回后链表必须保持它们起始的结构。<br>你可以认为在整个链表结构中没有循环。<br>你的代码应该在O(n)时间，并只使用O(1)的内存。</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><p>经典问题，分析可知如果两个链表有交叉，那么从交叉起点开始，两个链表后面的元素完全一样。<br>设立两个指针，首先遍历得到两个链表的长度，设长度相差n，将长的链表先走n步，然后两个链表一起遍历，如果遇到公共节点则返回，如果到尾部则无交叉，返回null：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * public class ListNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode next;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode(int x) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         val = x;</span></span><br><span class=\"line\"><span class=\"comment\"> *         next = null;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">getIntersectionNode</span><span class=\"params\">(ListNode headA, ListNode headB)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (headA == <span class=\"keyword\">null</span> || headB == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">int</span> lenA = <span class=\"number\">0</span>, lenB = <span class=\"number\">0</span>;</span><br><span class=\"line\">        ListNode tmpA = headA, tmpB = headB;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (tmpA != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            lenA++;</span><br><span class=\"line\">            tmpA = tmpA.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (tmpB != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            lenB++;</span><br><span class=\"line\">            tmpB = tmpB.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        tmpA = headA;</span><br><span class=\"line\">        tmpB = headB;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (lenA &gt; lenB) &#123;</span><br><span class=\"line\">            tmpA = tmpA.next;</span><br><span class=\"line\">            lenA--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (lenB &gt; lenA) &#123;</span><br><span class=\"line\">            tmpB = tmpB.next;</span><br><span class=\"line\">            lenB--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (tmpA != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (tmpA == tmpB)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> tmpA;</span><br><span class=\"line\">            tmpA = tmpA.next;</span><br><span class=\"line\">            tmpB = tmpB.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"延伸\"><a href=\"#延伸\" class=\"headerlink\" title=\"延伸\"></a>延伸</h1><p>1、判断两个链表是否相交：判断尾节点是否相等即可；<br>2、如果有环：<br> (1) 一个有环一个无环，无交点；<br> (2)都无环，参考本题及1；<br> (3)都有环，判断一个头结点是否在另一个的环上。</p>\n<p>参考；<br><a href=\"http://www.cnblogs.com/felixfang/p/3821923.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/felixfang/p/3821923.html</a></p>\n","categories":["算法"],"tags":["算法","LeetCode"]},{"title":"LeetCode-111.Minimum Depth of Binary Tree","url":"http://dotrabbit.tk/算法/000042-LeetCode-111.Minimum Depth of Binary Tree/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Given a binary tree, find its minimum depth.</p>\n<p>The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>给出一颗二叉树，找到其最短路径。<br>最短路径是从根节点到最近的叶子节点的最短路径上的节点数。</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><p>类似104. Maximum Depth of Binary Tree，区别在于在求左右子树的最小值时，如果左、右子树中有空树，则直接返回非空子树的高度：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * public class TreeNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode left;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode right;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">minDepth</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root.left == <span class=\"keyword\">null</span> &amp;&amp; root.right == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (root.left == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> minDepth(root.right) + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (root.right == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> minDepth(root.left) + <span class=\"number\">1</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> Math.min(minDepth(root.left) + <span class=\"number\">1</span>, minDepth(root.right) + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>方法二：根据题目，只要找到深度最低的叶子节点即可，因此使用层次遍历，找到第一个叶子节点后，返回其深度。</p>\n<p>参考：<br><a href=\"http://blog.csdn.net/sbitswc/article/details/26526031\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/sbitswc/article/details/26526031</a></p>\n","categories":["算法"],"tags":["算法","LeetCode"]},{"title":"LeetCode-225.Implement Stack using Queues","url":"http://dotrabbit.tk/算法/000041-LeetCode-225.Implement Stack using Queues/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Implement the following operations of a stack using queues.</p>\n<ul>\n<li>push(x) – Push element x onto stack.</li>\n<li>pop() – Removes the element on top of the stack.</li>\n<li>top() – Get the top element.</li>\n<li>empty() – Return whether the stack is empty.<br>Notes:</li>\n<li>You must use only standard operations of a queue – which means only push to back, peek/pop from front, size, and is empty operations are valid.</li>\n<li>Depending on your language, queue may not be supported natively. You may simulate a queue by using a list or deque (double-ended queue), as long as you use only standard operations of a queue.</li>\n<li>You may assume that all operations are valid (for example, no pop or top operations will be called on an empty stack).</li>\n</ul>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>用队列来实现以下栈操作：</p>\n<ul>\n<li>push(x) – 将元素x添加到栈上。</li>\n<li>pop() – 将队栈顶部的元素移除。</li>\n<li>top() – 获取顶部元素。</li>\n<li>empty() – 返回栈是否为空。<br>注意：</li>\n<li>只能使用队列的标准操作——只有push到尾部、从头部peek/pop、size和is empty操作是允许的。</li>\n<li>根据语言不同，队列可能不被本地支持。可以使用链表或deque(双相队列)模拟一个队列，只要只使用队列的标准操作即可。</li>\n<li>可以认为所有的操作都是合法的(例如，不会对空队列进行pop或peek操作)。</li>\n</ul>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><p>与232. Implement Queue using Stacks类似，利用两个队列，模拟栈操作：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyStack</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Queue&lt;Integer&gt; q1;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Queue&lt;Integer&gt; q2;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyStack</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        q1 = <span class=\"keyword\">new</span> LinkedList&lt;Integer&gt;();</span><br><span class=\"line\">        q2 = <span class=\"keyword\">new</span> LinkedList&lt;Integer&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Push element x onto stack.</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (q1.isEmpty())</span><br><span class=\"line\">            q2.add(x);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> q1.add(x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Removes the element on top of the stack.</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">pop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (q1.isEmpty()) &#123;</span><br><span class=\"line\">        \t<span class=\"keyword\">while</span> (q2.size() != <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        \t\tq1.add(q2.poll());</span><br><span class=\"line\">        \t&#125;</span><br><span class=\"line\">            q2.poll();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        \t<span class=\"keyword\">while</span> (q1.size() != <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        \t\tq2.add(q1.poll());</span><br><span class=\"line\">        \t&#125;</span><br><span class=\"line\">            q1.poll();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Get the top element.</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">top</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">int</span> top;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (q1.isEmpty()) &#123;</span><br><span class=\"line\">        \t<span class=\"keyword\">while</span> (q2.size() != <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        \t\tq1.add(q2.poll());</span><br><span class=\"line\">        \t&#125;</span><br><span class=\"line\">            top = q2.poll();</span><br><span class=\"line\">            q1.add(top);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        \t<span class=\"keyword\">while</span> (q1.size() != <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        \t\tq2.add(q1.poll());</span><br><span class=\"line\">        \t&#125;</span><br><span class=\"line\">            top = q1.poll();</span><br><span class=\"line\">            q2.add(top);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> top;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Return whether the stack is empty.</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">empty</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> q1.isEmpty() &amp;&amp; q2.isEmpty();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","categories":["算法"],"tags":["算法","LeetCode"]},{"title":"LeetCode-7.Reverse Integer","url":"http://dotrabbit.tk/算法/000040-LeetCode-7.Reverse Integer/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Reverse digits of an integer.</p>\n<p>Example1: x = 123, return 321<br>Example2: x = -123, return -321</p>\n<p>Have you thought about this?<br>Here are some good questions to ask before coding. Bonus points for you if you have already thought through this!</p>\n<p>If the integer’s last digit is 0, what should the output be? ie, cases such as 10, 100.</p>\n<p>Did you notice that the reversed integer might overflow? Assume the input is a 32-bit integer, then the reverse of 1000000003 overflows. How should you handle such cases?</p>\n<p>For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>反转一个整数的各位。<br>例1：x=123，返回321；<br>例2：x=-123，返回-321。</p>\n<p>你想过吗？<br>这里有一些在编码前的好问题，如果你已经想到了可以得到额外分数！<br>如果整数的最后一位是0，返回是什么？例如，10，100。<br>你是否注意到反转后的数字可能溢出？例如输入是一个32位的整数，那么1000000003的反转数溢出，你怎样处理这样的情况？<br>当反转数溢出时返回0。</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><p>需要注意的是负数的情况，以及反转越界的情况：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">reverse</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> revNum = <span class=\"number\">0</span>, flag = x &gt;= <span class=\"number\">0</span> ? <span class=\"number\">1</span> : -<span class=\"number\">1</span>;</span><br><span class=\"line\">        x *= flag;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span> (x &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> low = x % <span class=\"number\">10</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 检查越界</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (revNum &gt; Integer.MAX_VALUE / <span class=\"number\">10</span> || Integer.MAX_VALUE - revNum * <span class=\"number\">10</span> &lt; low)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            revNum = revNum * <span class=\"number\">10</span> + low;</span><br><span class=\"line\">            x /= <span class=\"number\">10</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> revNum * flag;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","categories":["算法"],"tags":["算法","LeetCode"]},{"title":"LeetCode-9.Palindrome Number","url":"http://dotrabbit.tk/算法/000039-LeetCode-9.Palindrome Number/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Determine whether an integer is a palindrome. Do this without extra space.</p>\n<p><strong> Some hints: </strong></p>\n<p>Could negative integers be palindromes? (ie, -1)</p>\n<p>If you are thinking of converting the integer to string, note the restriction of using extra space.</p>\n<p>You could also try reversing an integer. However, if you have solved the problem “Reverse Integer”, you know that the reversed integer might overflow. How would you handle such case?</p>\n<p>There is a more generic way of solving this problem.</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>判断一个整数是否是回文数。不要使用额外空间。<br>一些提示：<br>负数可以是回文数吗？(例如-1)。<br>如果你想要将数字转换为字符串，注意题中关于使用额外空间的限制。<br>你也可以反转数字。但是，如果你做过7. Reverse Integer的话，你就知道反转一个整数可能会导致溢出。你怎样处理这样的情况？<br>针对本题，有更加通用的解。</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><p>首先算出x是几位数，然后不断取最高位和最低位进行比较。如不相等，返回false；如相等，去掉最高位和最低位，循环判断：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isPalindrome</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"keyword\">int</span> multiple = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (x / multiple &gt;= <span class=\"number\">10</span>)</span><br><span class=\"line\">            multiple *= <span class=\"number\">10</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span> (x &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> high = x / multiple, low = x % <span class=\"number\">10</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (high != low)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            x =  x % multiple / <span class=\"number\">10</span>;</span><br><span class=\"line\">            multiple /= <span class=\"number\">100</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>而本题我首先使用的是反转数字，然后判断是否与原数字相等的方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isPalindrome</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> origin = x, changed = <span class=\"number\">0</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span> (origin &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            changed = changed * <span class=\"number\">10</span> + origin % <span class=\"number\">10</span>;</span><br><span class=\"line\">            origin /= <span class=\"number\">10</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> changed == x;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可能会有溢出问题。但考虑到，回文数字反转后与原数字相等，所以不会溢出；当非回文数字反转溢出时，一般溢出的结果changed不会与x相等……所以可以通过……</p>\n<p>参考：<br><a href=\"http://my.oschina.net/jdflyfly/blog/283531\" target=\"_blank\" rel=\"noopener\">http://my.oschina.net/jdflyfly/blog/283531</a></p>\n","categories":["算法"],"tags":["算法","LeetCode"]},{"title":"LeetCode-112.Path Sum","url":"http://dotrabbit.tk/算法/000038-LeetCode-112.Path Sum/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Given a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum.</p>\n<p>For example:<br>Given the below binary tree and sum = 22,<br>　　　　　5<br>　　　　/　　\\<br>　　　4　　　　8<br>　　/　\\　　　/　\\<br>　11　　　　13　　4<br>　/　\\　　　　　　　　\\<br>7　　　2　　　　　　　1<br>return true, as there exist a root-to-leaf path 5-&gt;4-&gt;11-&gt;2 which sum is 22.</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>给出一颗二叉树和一个sum，判断树上是否有一个从根到叶子节点的路径，使得该路径上所有的值相加等于给出的sum。<br>例如：<br>给出以下树，和sum=22，<br>　　　　　5<br>　　　　/　　\\<br>　　　4　　　　8<br>　　/　\\　　　/　\\<br>　11　　　　13　　4<br>　/　\\　　　　　　　　\\<br>7　　　2　　　　　　　1<br>返回true，因为有一条从根到叶子节点的路径  5-&gt;4-&gt;11-&gt;2，其和为22。</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><p>简单遍历即可，当树为空树时返回false，当根节点左右孩子都是空或叶子节点时，判断其值是否与给出的值相等。其他节点用sum减去该节点的值，递归判断：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * public class TreeNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode left;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode right;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasPathSum</span><span class=\"params\">(TreeNode root, <span class=\"keyword\">int</span> sum)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root.left == <span class=\"keyword\">null</span> &amp;&amp; root.right == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> root.val == sum;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">int</span> diff = sum - root.val;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hasPathSum(root.left, diff) || hasPathSum(root.right, diff);</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","categories":["算法"],"tags":["算法","LeetCode"]},{"title":"LeetCode-319.Bulb Switcher","url":"http://dotrabbit.tk/算法/000037-LeetCode-319.Bulb Switcher/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>There are n bulbs that are initially off. You first turn on all the bulbs. Then, you turn off every second bulb. On the third round, you toggle every third bulb (turning on if it’s off or turning off if it’s on). For the nth round, you only toggle the last bulb. Find how many bulbs are on after n rounds.</p>\n<p><strong> Example: </strong></p>\n<p>Given n = 3. </p>\n<p>At first, the three bulbs are [off, off, off].<br>After first round, the three bulbs are [on, on, on].<br>After second round, the three bulbs are [on, off, on].<br>After third round, the three bulbs are [on, off, off]. </p>\n<p>So you should return 1, because there is only one bulb is on.</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>有n个灯泡，初始状态为关闭。首先打开所有的灯泡。然后，每隔一个关闭。在第三轮，每三个灯泡切换其状态(关闭则打开，打开则关闭)。在第n轮，只切换最后一个灯泡的状态。找出在n轮过后有几个灯泡是打开的。<br><strong> 例如： </strong><br>给出n=3。<br>一开始，三个灯泡为 [关 关 关]。<br>第一轮结束，三个灯泡为 [开 开 开]。<br>第二轮结束，三个灯泡为 [开 关 开]。<br>第三轮结束，三个灯泡为 [开 关 关]。<br>所以应当返回1，因为只有一个灯泡是开着的。</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><p>可以循环模拟整个开关过程，非常耗时。<br>其实是数学问题，从1到n共n轮，初始状态为关闭，所以最后只有被切换了奇数次的灯泡是亮着的，即其编号包含奇数个因子(包括1和其本身)的灯泡最后是亮着的。<br>而对于任意正整数n，当n为平方数时，其因子数(包括1和n本身)为奇数，当n为非平方数时，其因子数(包括1和n本身)为偶数，因此小于等于n的平方数的个数，即为所求：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">bulbSwitch</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>)Math.sqrt(n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","categories":["算法"],"tags":["算法","LeetCode"]},{"title":"LeetCode-209.Minimum Size Subarray Sum","url":"http://dotrabbit.tk/算法/000036-LeetCode-209.Minimum Size Subarray Sum/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Given an array of <strong>n</strong> positive integers and a positive integer <strong>s</strong>, find the minimal length of a subarray of which the sum ≥ <strong>s</strong>. If there isn’t one, return 0 instead.</p>\n<p>For example, given the array <strong>[2,3,1,2,4,3]</strong> and <strong>s = 7</strong>,<br>the subarray <strong>[4,3]</strong> has the minimal length under the problem constraint.</p>\n<p><strong>More practice:</strong><br>If you have figured out the <em>O(n)</em> solution, try coding another solution of which the time complexity is O(n log n).</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>给出一个由<strong>n</strong>个正整数组成的数组和一个整数<strong>s</strong>，找到 sum ≥ <strong>s</strong>的长度最短的子数组。如果不存在，则返回0.<br>例如，给出数组 <strong>[2,3,1,2,4,3]</strong> 和 <strong>s = 7</strong>，子数组 <strong>[4,3]</strong> 为所求。<br><strong>更多练习：</strong><br>如果你已经找到了 <em>O(n)</em> 的解法，试着编出另外一种时间复杂度为O(nlogn)的解法。</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><p>利用滑动窗口法，时间复杂度为O(n)：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">minSubArrayLen</span><span class=\"params\">(<span class=\"keyword\">int</span> s, <span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> start = <span class=\"number\">0</span>, end = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = nums.length;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>, minLen = len + <span class=\"number\">1</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span> (start &lt; len) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (end &lt; len &amp;&amp; sum &lt; s) &#123;</span><br><span class=\"line\">                sum += nums[end++];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (end == len)</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> minLen &lt;= len ? minLen : <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            minLen = Math.min(minLen, end - start);</span><br><span class=\"line\">            sum -= nums[start];</span><br><span class=\"line\">            start++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> minLen &lt;= len ? minLen : <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>对于O(nlogn)的办法，考虑对于长度为n的数组，解的返回值共有0到n共n+1种可能。因为可以在O(n)的时间内，判断出对于给定的长度i，能否在数组中找到和大于s的子数组。因此可以对0到n+1采用二分法，每次取中值，判断该长度下是否可以找到满足的解。<br>例如，给出数组nums，长度为5，和s。首先取left=0，right=5，则mid=2，判断nums中是否存在长度为2的子数组，其和大于等于s，如果存在，更新结果为2，left=0，right=mid-1=1，循环；如果不存在，left=mid+1=3，right=5，循环判断。直到left&gt;right为止：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">minSubArrayLen</span><span class=\"params\">(<span class=\"keyword\">int</span> s, <span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> start = <span class=\"number\">0</span>, end = nums.length;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> minLen = <span class=\"number\">0</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span> (start &lt;= end) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 判断是否存在mid个元素的子数组，其和大于等于s</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> mid = (start + end) / <span class=\"number\">2</span>, sum = <span class=\"number\">0</span>, index = <span class=\"number\">0</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">while</span> (index &lt; mid)</span><br><span class=\"line\">                sum += nums[index++];</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; index &lt; nums.length &amp;&amp; sum &lt; s; i++) &#123;</span><br><span class=\"line\">                sum -= nums[i];</span><br><span class=\"line\">                sum += nums[index++];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (sum &gt;= s) &#123;</span><br><span class=\"line\">                minLen = mid;</span><br><span class=\"line\">                end = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> start = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> minLen;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>参考：<br><a href=\"http://bookshadow.com/weblog/2015/05/12/leetcode-minimum-size-subarray-sum/?utm_source=tuicool&amp;utm_medium=referral\" target=\"_blank\" rel=\"noopener\">http://bookshadow.com/weblog/2015/05/12/leetcode-minimum-size-subarray-sum/?utm_source=tuicool&amp;utm_medium=referral</a></p>\n","categories":["算法"],"tags":["算法","LeetCode","Array"]},{"title":"LeetCode-119.Pascal's Triangle II","url":"http://dotrabbit.tk/算法/000035-LeetCode-119.Pascal's Triangle II/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Given an index k, return the kth row of the Pascal’s triangle.</p>\n<p>For example, given k = 3,<br>Return [1,3,3,1].</p>\n<p><strong>Note:</strong><br>Could you optimize your algorithm to use only O(k) extra space?</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>给出下标k，返回帕斯卡三角（杨辉三角）的第k行。<br>例如，给出k=3，返回[1,3,3,1]。<br><strong>注意：</strong>你能将你的算法优化到只使用O(k)的额外空间吗？</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><p>观察三角：<br>　　　　　[1],<br>　　　　[1　,　1],<br>　　　[1　,　2　,　1],<br>　　[1　,　3　,　3　,　1],<br>　[1　,　4　,　6　,　4　,　1]<br>n=1时，返回[1，1]；<br>n=2时，返回[1，2，1]；<br>n=3时，返回[1，3，3，1]；<br>……</p>\n<h2 id=\"解法一：递推法\"><a href=\"#解法一：递推法\" class=\"headerlink\" title=\"解法一：递推法\"></a>解法一：递推法</h2><p>两层循环，外层循环从第0行(i=0，[1])开始，逐行计算，一直循环到第rowIndex行，计算结束返回；内层循环每次循环 i - 1 (第i行有 i+1 个数，第一个元素1不动，最后一个元素1循环后插入，共计算中间的 i-1 个数)次， 逐个计算更新数字，需要注意的是，因为从前向后计算会出现数字覆盖问题，故内层循环每次从后往前计算：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title\">getRow</span><span class=\"params\">(<span class=\"keyword\">int</span> rowIndex)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;Integer&gt; curRow = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= rowIndex; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i - <span class=\"number\">1</span>; j &gt; <span class=\"number\">0</span>; j--)</span><br><span class=\"line\">                curRow.set(j, curRow.get(j) + curRow.get(j - <span class=\"number\">1</span>));</span><br><span class=\"line\">            curRow.add(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> curRow;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"解法二：公式法：\"><a href=\"#解法二：公式法：\" class=\"headerlink\" title=\"解法二：公式法：\"></a>解法二：公式法：</h2><p>对于第n(n&gt;=0)行杨辉三角(共n+1个数)有：<br>a(0) = 1<br>a(i) = a(i - 1) * (n - i + 1) / i, 1 &lt;= i &lt;= n<br>另外需要注意，在n=30时会，在计算过程中会出现溢出，因此在计算时使用long，向list增加时将最终结果转换为int：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title\">getRow</span><span class=\"params\">(<span class=\"keyword\">int</span> rowIndex)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;Integer&gt; curRow = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">        curRow.add(<span class=\"number\">1</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= rowIndex; i++)</span><br><span class=\"line\">            curRow.add((<span class=\"keyword\">int</span>)((<span class=\"keyword\">long</span>)curRow.get(i - <span class=\"number\">1</span>) * (rowIndex - i + <span class=\"number\">1</span>) / i));</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> curRow;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>参考：<br><a href=\"http://www.2cto.com/kf/201401/274228.html\" target=\"_blank\" rel=\"noopener\">http://www.2cto.com/kf/201401/274228.html</a><br><a href=\"https://leetcode.com/discuss/15852/solution-based-on-mathematics\" target=\"_blank\" rel=\"noopener\">https://leetcode.com/discuss/15852/solution-based-on-mathematics</a></p>\n","categories":["算法"],"tags":["算法","LeetCode","Array"]},{"title":"LeetCode-172.Factorial Trailing Zeroes","url":"http://dotrabbit.tk/算法/000034-LeetCode-172.Factorial Trailing Zeroes/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Given an integer n, return the number of trailing zeroes in n!.</p>\n<p><strong> Note: </strong> Your solution should be in logarithmic time complexity.</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>给出一个整数n，返回n!末尾有几个0。<br><strong> 注意：</strong> 你的解时间复杂度应控制在O(logn)。</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><p>开始考虑当遇到2、5、10的时候会出现末尾的0，但忽略了像25这种，会产生两个0的数字。<br>因此分别算出n中包含几个5、几个25、几个125……即可，然后加和：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">trailingZeroes</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> trailingZeroes = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (n &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            trailingZeroes += n / <span class=\"number\">5</span>;</span><br><span class=\"line\">            n /= <span class=\"number\">5</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> trailingZeroes;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>参考：<br><a href=\"http://blog.csdn.net/doc_sgl/article/details/42344441\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/doc_sgl/article/details/42344441</a></p>\n","categories":["算法"],"tags":["算法","LeetCode"]},{"title":"LeetCode-118.Pascal's Triangle","url":"http://dotrabbit.tk/算法/000033-LeetCode-118.Pascal's Triangle/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Given numRows, generate the first numRows of Pascal’s triangle.</p>\n<p>For example, given numRows = 5,<br>Return</p>\n<p>[<br>　　　　　[1],<br>　　　　[1　,　1],<br>　　　[1　,　2　,　1],<br>　　[1　,　3　,　3　,　1],<br>　[1　,　4　,　6　,　4　,　1]<br>]</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>给出numRows，生成帕斯卡三角（杨辉三角）的前numRows行。<br>例如，numRows=5，<br>返回<br>[<br>　　　　　[1],<br>　　　　[1　,　1],<br>　　　[1　,　2　,　1],<br>　　[1　,　3　,　3　,　1],<br>　[1　,　4　,　6　,　4　,　1]<br>]</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><p>杨辉三角的特点，左右两边均为1，中间每一行的数字，等于上一行上方两个数的和。<br>需注意当numRows=0时，返回长度为0的list。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; generate(<span class=\"keyword\">int</span> numRows) &#123;</span><br><span class=\"line\">        List&lt;List&lt;Integer&gt;&gt; pascalTri = <span class=\"keyword\">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (numRows &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> pascalTri;</span><br><span class=\"line\">        </span><br><span class=\"line\">        List&lt;Integer&gt; lastRow = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">        lastRow.add(<span class=\"number\">1</span>);</span><br><span class=\"line\">        pascalTri.add(lastRow);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> row = <span class=\"number\">2</span>; row &lt;= numRows; row++) &#123;</span><br><span class=\"line\">            List&lt;Integer&gt; curRow = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">            curRow.add(<span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; lastRow.size(); i++)</span><br><span class=\"line\">                curRow.add(lastRow.get(i - <span class=\"number\">1</span>) + lastRow.get(i));</span><br><span class=\"line\">            curRow.add(<span class=\"number\">1</span>);</span><br><span class=\"line\">            pascalTri.add(curRow);</span><br><span class=\"line\">            lastRow = curRow;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> pascalTri;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["算法"],"tags":["算法","LeetCode","Array"]},{"title":"LeetCode-66.Plus one","url":"http://dotrabbit.tk/算法/000032-LeetCode-66.Plus one/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Given a non-negative number represented as an array of digits, plus one to the number.</p>\n<p>The digits are stored such that the most significant digit is at the head of the list.</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>给出表示一个非负数各位数字的数组，给该数字加一。<br>数组中最高位在前。</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><p>唯一需要考虑的是进位问题，从低位到高位，如果遇到9，则该位置0，向左移动一位；如果遇到不是9的数，直接加1，返回数组。特殊情况是全部位均为9，则新建数组，第一位是1，其他位均置0：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] plusOne(<span class=\"keyword\">int</span>[] digits) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> index = digits.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (index &gt;= <span class=\"number\">0</span> &amp;&amp; digits[index] == <span class=\"number\">9</span>)</span><br><span class=\"line\">            digits[index--] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            digits[index] += <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> digits;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        digits = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[digits.length + <span class=\"number\">1</span>];</span><br><span class=\"line\">        digits[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; digits.length; i++)</span><br><span class=\"line\">            digits[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> digits;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","categories":["算法"],"tags":["算法","LeetCode","Array"]},{"title":"LeetCode-26.Remove Duplicates from Sorted Array","url":"http://dotrabbit.tk/算法/000031-LeetCode-26.Remove Duplicates from Sorted Array/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Given a sorted array, remove the duplicates in place such that each element appear only once and return the new length.</p>\n<p>Do not allocate extra space for another array, you must do this in place with constant memory.</p>\n<p>For example,<br>Given input array <em>nums</em> = <strong>[1,1,2]</strong>,</p>\n<p>Your function should return length = <strong>2</strong>, with the first two elements of <em>nums</em> being <strong>1</strong> and <strong>2</strong> respectively. It doesn’t matter what you leave beyond the new length.</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>给出一个有序数组，原地移除其中的重复元素，确保每个元素只出现一次，返回新的长度。<br>不要申请额外空间新建数组，必须用常数内存原地完成操作。<br>例如，<br>给出输入数据 <em>nums</em> =  <strong>[1,1,2]</strong>,<br>你的函数应当返回 length = 2，<em>nums</em>的第一个和第二个元素应当分别为1和2。剩下的元素无所谓。</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><p>类似283.Move Zeroes和27.Remove Element，设立两个指针，一个不断向后扫，一个记录新数组长度，因为是有序数组，所以只要判断大小即可得出新数组中是否已存在：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">removeDuplicates</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums == <span class=\"keyword\">null</span> || nums.length == <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> newLen = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[i] &gt; nums[i - <span class=\"number\">1</span>])</span><br><span class=\"line\">                nums[newLen++] = nums[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> newLen;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>另外，如果给出的是普通数组，则可先排序，再应用以上方法；如果可以利用额外空间，则可设立一个HashSet，记录已存在的数字：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">removeDuplicates</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">        Set&lt;Integer&gt; newNums = <span class=\"keyword\">new</span> HashSet&lt;Integer&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> newLen = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!newNums.contains(nums[i])) &#123;</span><br><span class=\"line\">                nums[newLen++] = nums[i];</span><br><span class=\"line\">                newNums.add(nums[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> newLen;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","categories":["算法"],"tags":["算法","LeetCode","Array"]},{"title":"LeetCode-198.House Robber","url":"http://dotrabbit.tk/算法/000030-LeetCode-198.House Robber/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security system connected and <strong> it will automatically contact the police if two adjacent houses were broken into on the same night. </strong></p>\n<p>Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight <strong> without alerting the police </strong>.</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>你是一个职业小偷，计划去抢一条街上的房子。每栋房子藏着一定数量的钱，唯一能阻止你偷盗的限制是，相邻的房子有相连的安全系统，并且会在相邻的两栋房子在同一晚被侵入后自动报警。<br>给出一个非负整数的数组代表每个房子的钱数，计算出在不会惊动警察的前提下你可以偷得的最大钱数。</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><h2 id=\"方法一：O-n\"><a href=\"#方法一：O-n\" class=\"headerlink\" title=\"方法一：O(n)\"></a>方法一：O(n)</h2><p>动态规划，对于第 i 所房子有抢和不抢两种可能。<br>如果偷，则第 i - 1 所不能偷；如果不偷，则问题与 i - 1 所房子一致。<br>所以 dp[i] = max( dp(i - 1), dp[i - 2] + nums[i])：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">rob</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = nums.length;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (len == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (len == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] bestSum = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[len];</span><br><span class=\"line\">        bestSum[<span class=\"number\">0</span>] = nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">        bestSum[<span class=\"number\">1</span>] = Math.max(nums[<span class=\"number\">0</span>], nums[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt; len; i++)</span><br><span class=\"line\">            bestSum[i] = Math.max(bestSum[i - <span class=\"number\">1</span>], bestSum[i - <span class=\"number\">2</span>] + nums[i]);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> bestSum[len - <span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"方法二：O-1\"><a href=\"#方法二：O-1\" class=\"headerlink\" title=\"方法二：O(1)\"></a>方法二：O(1)</h2><p>动态规划，如方法一分析，在计算第 i 所房子时，只需要偷与不偷第 i - 1 所房子可得到的最大值两个临时变量即可，因为：<br>dp[i - 1] = take(i - 1)<br>dp[i - 2] = notake(i - 1)<br>dp[i] = max( dp(i - 1), dp[i - 2] + nums[i]) = max( take(i - 1), notake(i - 1) + nums[i])<br>而 take(i) = notake[i - 1] + nums[i]，notake(i) = dp[i - 1]。<br>从 1 所房子一直循环到 sums.length 所房子，每次循环计算当前房子的take和notake，以及maxSum。下次循环时， newTake = notake + sums[i]，newNoTake = maxSum，newMaxSum = Math.max(take, notake)：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">rob</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> take = <span class=\"number\">0</span>, notake = <span class=\"number\">0</span>, maxSum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">            take = notake + nums[i];</span><br><span class=\"line\">            notake = maxSum;</span><br><span class=\"line\">            maxSum = Math.max(take, notake);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> maxSum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>参考：<br><a href=\"http://www.meetqun.com/thread-8777-1-1.html\" target=\"_blank\" rel=\"noopener\">http://www.meetqun.com/thread-8777-1-1.html</a></p>\n","categories":["算法"],"tags":["算法","LeetCode"]},{"title":"LeetCode-27.Remove Element","url":"http://dotrabbit.tk/算法/000029-LeetCode-27.Remove Element/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Given an array and a value, remove all instances of that value in place and return the new length.</p>\n<p>The order of elements can be changed. It doesn’t matter what you leave beyond the new length.</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>给出一个数组和一个值，原地移除所有该值的实例并返回新的长度。<br>元素的顺序可以被打乱。新数组中，新的长度后的元素状态可以不必关心。</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><p>开始没理解题意，以为是计算除去给定值的元素的所有元素个数即可，还想怎么这么简单……<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">removeElement</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = nums.length;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> num : nums)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (num == val)</span><br><span class=\"line\">                len--;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> len;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>报错：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input:[<span class=\"number\">4</span>,<span class=\"number\">5</span>], <span class=\"number\">4</span></span><br><span class=\"line\">Output:[<span class=\"number\">4</span>]</span><br><span class=\"line\">Expected:[<span class=\"number\">5</span>]</span><br></pre></td></tr></table></figure></p>\n<p>才明白了题意，是要把所有的非给定值的元素都移动到前面，再返回新的长度，而其他元素的值可以不用管。<br>首先想到了283题，Move Zeroes(<a href=\"https://leetcode.com/problems/move-zeroes/\" target=\"_blank\" rel=\"noopener\">https://leetcode.com/problems/move-zeroes/</a>) ，用两个指针，不断将0/val移动到数组末端。<br>但本题要求返回新数组的长度，不只是维护一个长度数字那么简单，经过试错，需要考虑到所有数字都是val、nums中没有元素的情况，都应返回0：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">removeElement</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums == <span class=\"keyword\">null</span> || nums.length == <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = nums.length;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> slow = <span class=\"number\">0</span>, fast = <span class=\"number\">0</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span> (fast &lt; nums.length) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[fast] == val)</span><br><span class=\"line\">                len--;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[fast] != val &amp;&amp; nums[slow] == val) &#123;</span><br><span class=\"line\">                nums[slow] = nums[fast];</span><br><span class=\"line\">                nums[fast] = val;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[slow] != val)</span><br><span class=\"line\">                slow++;</span><br><span class=\"line\">            fast++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[<span class=\"number\">0</span>] == val)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> len;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>因为不用考虑新数组的新长度之后的元素，所以只要一次遍历就可以统计出新数组的新长度，同时只要不断将不等于val的值向前压缩即可(类似Move Zeroes解法一)：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">removeElement</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> newLen = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[i] != val)</span><br><span class=\"line\">                nums[newLen++] = nums[i];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> newLen;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>参考：<br><a href=\"http://www.programcreek.com/2014/04/leetcode-remove-element-java/\" target=\"_blank\" rel=\"noopener\">http://www.programcreek.com/2014/04/leetcode-remove-element-java/</a></p>\n","categories":["算法"],"tags":["算法","LeetCode"]},{"title":"LeetCode-110.Balanced Binary Tree","url":"http://dotrabbit.tk/算法/000028-LeetCode-110.Balanced Binary Tree/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Given a binary tree, determine if it is height-balanced.</p>\n<p>For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>给出一颗二叉树，判断其是否是高度平衡的。<br>对于本题，对于一颗二叉树的每个节点，其左右子树的高度差都不超过1，则定义为一颗高度平衡的二叉树。</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><p>最朴素的做法，对于每个节点，求出其左右子树的深度，判断是否是平衡子树，遍历二叉树得到结果，效率很低：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * public class TreeNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode left;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode right;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isBalanced</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root ==<span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Math.abs(getDepth(root.left) - getDepth(root.right)) &gt; <span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> isBalanced(root.left) &amp;&amp; isBalanced(root.right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getDepth</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> Math.max(getDepth(root.left), getDepth(root.right)) + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>过程中在遍历每个节点判断是否平衡树中，重复计算了各个子节点的深度，因此可以维护一个map，记录每个节点的深度，优化算法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * public class TreeNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode left;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode right;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;TreeNode, Integer&gt; depthMap = <span class=\"keyword\">new</span> HashMap&lt;TreeNode, Integer&gt;();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isBalanced</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Math.abs(getDepth(root.left) - getDepth(root.right)) &gt; <span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> isBalanced(root.left) &amp;&amp; isBalanced(root.right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getDepth</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!depthMap.containsKey(root)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> height = Math.max(getDepth(root.left), getDepth(root.right)) + <span class=\"number\">1</span>;</span><br><span class=\"line\">            depthMap.put(root, height);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> depthMap.get(root);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>另外一种算法，在计算节点深度的同时，判断以该节点为根的子树是否是平衡二叉树，省去了判断每颗子树是否是平衡二叉树的递归过程：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * public class TreeNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode left;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode right;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isBalanced</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getDepth(root) != -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 用-1标注以该节点为根的子树不是平衡二叉树</span></span><br><span class=\"line\">    <span class=\"comment\">// (左子树不为平衡二叉树或右子树不为平衡二叉树或左右子树深度差大于1)</span></span><br><span class=\"line\">    <span class=\"comment\">// 否则返回深度</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getDepth</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"keyword\">int</span> leftDepth = getDepth(root.left);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (leftDepth == -<span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"keyword\">int</span> rightDepth = getDepth(root.right);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rightDepth == -<span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">int</span> diff = Math.abs(leftDepth - rightDepth);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (diff &gt; <span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Math.max(leftDepth, rightDepth) + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>另外，在《Cracking the code interview》中有一道题，判断一颗二叉树是否平衡，其对平衡的定义是树中不存在深度差大于1的叶子节点：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isBalanced</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> getMaxDepth(root) - getMinDepth(root) &lt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getMaxDepth</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">       </span><br><span class=\"line\">    <span class=\"keyword\">return</span> Math.max(getMaxDepth(root.left), getMaxDepth(root.right)) + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getMinDepth</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"keyword\">return</span> Math.min(getMinDepth(root.left), getMinDepth(root.right)) + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>参考：<br><a href=\"http://www.algoqueue.com/algoqueue/default/view/8912896/check-binary-tree-balanced-or-not\" target=\"_blank\" rel=\"noopener\">http://www.algoqueue.com/algoqueue/default/view/8912896/check-binary-tree-balanced-or-not</a><br>Gayle Laakmann. Cracking the Coding Interview, Fourth Edition[M]. CreateSpace, 2008-10-15.</p>\n","categories":["算法"],"tags":["算法","LeetCode"]},{"title":"LeetCode-232.Implement Queue using Stacks","url":"http://dotrabbit.tk/算法/000027-LeetCode-232.Implement Queue using Stacks/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Implement the following operations of a queue using stacks.</p>\n<ul>\n<li>push(x) – Push element x to the back of queue.</li>\n<li>pop() – Removes the element from in front of queue.</li>\n<li>peek() – Get the front element.</li>\n<li>empty() – Return whether the queue is empty.<br>Notes:</li>\n<li>You must use only standard operations of a stack – which means only push to top, peek/pop from top, size, and is empty operations are valid.</li>\n<li>Depending on your language, stack may not be supported natively. You may simulate a stack by using a list or deque (double-ended queue), as long as you use only standard operations of a stack.</li>\n<li>You may assume that all operations are valid (for example, no pop or peek operations will be called on an empty queue).</li>\n</ul>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>用栈来实现以下队列操作：</p>\n<ul>\n<li>push(x) – 将元素x添加到队列尾部。</li>\n<li>pop() – 将队列头部的元素移除。</li>\n<li>peek() – 获取头部元素。</li>\n<li>empty() – 返回队列是否为空。<br>注意：</li>\n<li>只能使用栈的标准操作——只有push到头部、从头部peek/pop、size和is empty操作是允许的。</li>\n<li>根据语言不同，栈可能不被本地支持。可以使用链表或deque(双相队列)模拟一个栈，只要只使用栈的标准操作即可。</li>\n<li>可以认为所有的操作都是合法的(例如，不会对空队列进行pop或peek操作)。</li>\n</ul>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><p>设立两个栈，一个进栈，一个出栈。用两个栈模拟队列。</p>\n<ul>\n<li>push：进队永远向进栈push；</li>\n<li>pop：最早入队的元素一定在进栈的底端(出栈为空)或出栈的顶端(出栈不为空)，所以出队操作时，只要返回出栈顶端元素(出栈不为空)，或将进栈元素逐个压向出栈，再返回出栈顶端元素即可(出栈为空)；</li>\n<li>peek：操作与pop同理；</li>\n<li>isEmpty：两个栈都为空时即队列为空。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyQueue</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Stack&lt;Integer&gt; inStack = <span class=\"keyword\">new</span> Stack&lt;Integer&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Stack&lt;Integer&gt; outStack = <span class=\"keyword\">new</span> Stack&lt;Integer&gt;();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Push element x to the back of queue.</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">        inStack.push(x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Removes the element from in front of queue.</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">pop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!outStack.isEmpty())</span><br><span class=\"line\">        \toutStack.pop();</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (!inStack.isEmpty()) &#123;</span><br><span class=\"line\">\t\t\t\toutStack.push(inStack.peek());</span><br><span class=\"line\">\t\t\t\tinStack.pop();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\toutStack.pop();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Get the front element.</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">peek</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span> (outStack.isEmpty()) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (!inStack.isEmpty()) &#123;</span><br><span class=\"line\">\t\t\t\toutStack.push(inStack.peek());</span><br><span class=\"line\">\t\t\t\tinStack.pop();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> outStack.peek();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Return whether the queue is empty.</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">empty</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> inStack.isEmpty() &amp;&amp; outStack.isEmpty();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["算法"],"tags":["算法","LeetCode"]},{"title":"LeetCode-21.Merge Two Sorted Lists","url":"http://dotrabbit.tk/算法/000026-LeetCode-21.Merge Two Sorted Lists/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>将两个已排序链表混合并返回一个新的链表。新的链表应该由前两个链表黏接而成。</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * public class ListNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode next;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">mergeTwoLists</span><span class=\"params\">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (l1 == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> l2;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (l2 == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> l1;</span><br><span class=\"line\">        </span><br><span class=\"line\">        ListNode head = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>), tmp = head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (l1.val &lt; l2.val) &#123;</span><br><span class=\"line\">                tmp.val = l1.val;</span><br><span class=\"line\">                l1 = l1.next;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (l1.val &gt; l2.val) &#123;</span><br><span class=\"line\">                tmp.val = l2.val;</span><br><span class=\"line\">                l2 = l2.next;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                tmp.val = l1.val;</span><br><span class=\"line\">                tmp.next = <span class=\"keyword\">new</span> ListNode(l2.val);</span><br><span class=\"line\">                tmp = tmp.next;</span><br><span class=\"line\">                l1 = l1.next;</span><br><span class=\"line\">                l2 = l2.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (l1 == <span class=\"keyword\">null</span> || l2 == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            tmp.next = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</span><br><span class=\"line\">            tmp = tmp.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span> (l1 != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            tmp.next = <span class=\"keyword\">new</span> ListNode(l1.val);</span><br><span class=\"line\">            tmp = tmp.next;</span><br><span class=\"line\">            l1 = l1.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (l2 != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            tmp.next = <span class=\"keyword\">new</span> ListNode(l2.val);</span><br><span class=\"line\">            tmp = tmp.next;</span><br><span class=\"line\">            l2 = l2.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>后来突然发现题中要求用原链表的节点黏接而成，修改算法如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * public class ListNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode next;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">mergeTwoLists</span><span class=\"params\">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (l1 == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> l2;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (l2 == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> l1;</span><br><span class=\"line\">        </span><br><span class=\"line\">        ListNode head = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>), tmp = head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (l1 != <span class=\"keyword\">null</span> &amp;&amp; l2 != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (l1.val &lt;= l2.val) &#123;</span><br><span class=\"line\">                tmp.next = l1;</span><br><span class=\"line\">                l1 = l1.next;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                tmp.next = l2;</span><br><span class=\"line\">                l2 = l2.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            tmp = tmp.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (l1 != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            tmp.next = l1;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (l2 != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            tmp.next = l2;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> head.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>参考：<br><a href=\"http://www.programcreek.com/2012/12/leetcode-merge-two-sorted-lists-java/\" target=\"_blank\" rel=\"noopener\">http://www.programcreek.com/2012/12/leetcode-merge-two-sorted-lists-java/</a></p>\n","categories":["算法"],"tags":["算法","LeetCode"]},{"title":"LeetCode-202.Happy Number","url":"http://dotrabbit.tk/算法/000025-LeetCode-202.Happy Number/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Write an algorithm to determine if a number is “happy”.</p>\n<p>A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers.</p>\n<p>Example: 19 is a happy number</p>\n<p>1^2 + 9^2 = 82<br>8^2 + 2^2 = 68<br>6^2 + 8^2 = 100<br>1^2 + 0^2 + 0^2 = 1</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>编写算法判断一个数字是否“开心”。<br>开心数可以被以下过程定义：从任意一个正整数开始，将数字替换为其各位的平方和，不断重复该过程，直到数字为1(它将保持这个结果)，或者无限循环为不包括1的结果。那些可以以1结束的数字称为开心数。<br>例如：19是一个开心数<br>1^2 + 9^2 = 82<br>8^2 + 2^2 = 68<br>6^2 + 8^2 = 100<br>1^2 + 0^2 + 0^2 = 1</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><p>以2为例：2 -&gt; 4 -&gt; 16 -&gt; 37 -&gt; 58 -&gt; 89 -&gt; 145 -&gt; 42 -&gt; 20 -&gt; 4<br>可知，只要在变换路径中出现非1的重复数字，即为非开心数，出现1则为开心数：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isHappy</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        Set&lt;Integer&gt; process = <span class=\"keyword\">new</span> HashSet&lt;Integer&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (n != <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            n = getSquareSum(n);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (process.contains(n))</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            process.add(n);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getSquareSum</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (n != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            sum += (n % <span class=\"number\">10</span>) * (n % <span class=\"number\">10</span>);</span><br><span class=\"line\">            n /= <span class=\"number\">10</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","categories":["算法"],"tags":["算法","LeetCode"]},{"title":"LeetCode-326.Power of Three","url":"http://dotrabbit.tk/算法/000024-LeetCode-326.Power of Three/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Given an integer, write a function to determine if it is a power of three.</p>\n<p><strong> Follow up: </strong><br>Could you do it without using any loop / recursion?</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>给出一个整数，编写函数确定它是否是3的幂。<br>追加：<br>你是否可以不用循环或递归？</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><h2 id=\"循环\"><a href=\"#循环\" class=\"headerlink\" title=\"循环\"></a>循环</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isPowerOfThree</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (n % <span class=\"number\">3</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">            n /= <span class=\"number\">3</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> n == <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isPowerOfThree</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n % <span class=\"number\">3</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> isPowerOfThree(n / <span class=\"number\">3</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"不用循环和递归\"><a href=\"#不用循环和递归\" class=\"headerlink\" title=\"不用循环和递归\"></a>不用循环和递归</h2><h3 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h3><p>取得3的最大幂，然后判断n是否是其因子：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isPowerOfThree</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 0x7fffffff为最大的long int的最大值</span></span><br><span class=\"line\">        <span class=\"comment\">// (int)(Math.log(0x7fffffff) / Math.log(3))为3的最大幂</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> n &gt; <span class=\"number\">0</span> &amp;&amp; Math.pow(<span class=\"number\">3</span>, (<span class=\"keyword\">int</span>)(Math.log(<span class=\"number\">0x7fffffff</span>) / Math.log(<span class=\"number\">3</span>))) % n == <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>或：<br>由于输入是int，正数范围是0-2^31，在此范围中允许的最大的3的次方数为3^19=1162261467，那么我们只要看这个数能否被n整除即可<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isPowerOfThree</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> n &gt; <span class=\"number\">0</span> &amp;&amp; (<span class=\"number\">1162261467</span> % n == <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h3><p>如果log10(n) / log10(3)返回整数，则n是3的幂。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isPowerOfThree</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">double</span> res = Math.log(n) / Math.log(<span class=\"number\">3</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Math.abs(res - Math.round(res)) &lt; epsilon;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>参考：<br><a href=\"http://www.cnblogs.com/EdwardLiu/p/5115390.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/EdwardLiu/p/5115390.html</a><br><a href=\"http://blog.csdn.net/cwj649956781/article/details/8589981\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/cwj649956781/article/details/8589981</a><br><a href=\"http://98sky.com/info/52594.html\" target=\"_blank\" rel=\"noopener\">http://98sky.com/info/52594.html</a><br><a href=\"http://blog.csdn.net/u010025211/article/details/50484747\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/u010025211/article/details/50484747</a></p>\n","categories":["算法"],"tags":["算法","LeetCode"]},{"title":"LeetCode-231.Power of Two","url":"http://dotrabbit.tk/算法/000023-LeetCode-231.Power of Two/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Given an integer, write a function to determine if it is a power of two.</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>给出一个整数，编写函数确定它是否是2的幂。</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><p>利用2的幂的性质，即二进制表示中，只有最高位是1。</p>\n<h2 id=\"位运算法\"><a href=\"#位运算法\" class=\"headerlink\" title=\"位运算法\"></a>位运算法</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isPowerOfTwo</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> n &gt; <span class=\"number\">0</span> &amp;&amp; ((n &amp; (n - <span class=\"number\">1</span>)) == <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"计数法\"><a href=\"#计数法\" class=\"headerlink\" title=\"计数法\"></a>计数法</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isPowerOfTwo</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> numOf1 = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (n &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((n &amp; <span class=\"number\">1</span>) == <span class=\"number\">1</span>)</span><br><span class=\"line\">                numOf1++;</span><br><span class=\"line\">            n &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> numOf1 == <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>参考：<br><a href=\"http://www.2cto.com/kf/201507/415383.html\" target=\"_blank\" rel=\"noopener\">http://www.2cto.com/kf/201507/415383.html</a><br><a href=\"http://www.bubuko.com/infodetail-953320.html\" target=\"_blank\" rel=\"noopener\">http://www.bubuko.com/infodetail-953320.html</a></p>\n","categories":["算法"],"tags":["算法","LeetCode"]},{"title":"LeetCode-263.Ugly Number","url":"http://dotrabbit.tk/算法/000022-LeetCode-263.Ugly Number/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Write a program to check whether a given number is an ugly number.</p>\n<p>Ugly numbers are positive numbers whose prime factors only include 2, 3, 5. For example, 6, 8 are ugly while 14 is not ugly since it includes another prime factor 7.</p>\n<p>Note that 1 is typically treated as an ugly number.</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>编写程序，验证一个给出数字是否为丑数。<br>丑数是质因子只有2、3、5的正数。例如，6、8是丑的，14不是，因为它有质因子7。<br>另外1也被当作丑数。</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><p>丑数具有如下性质：当一个数排除所有的2、3、5因子后，等于1（注意对0的操作）：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isUgly</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (num % <span class=\"number\">2</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">            num /= <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (num % <span class=\"number\">3</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">            num /= <span class=\"number\">3</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (num % <span class=\"number\">5</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">            num /= <span class=\"number\">5</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> num == <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","categories":["算法"],"tags":["算法","LeetCode"]},{"title":"LeetCode-70.Climbing Stairs","url":"http://dotrabbit.tk/算法/000021-LeetCode-70.Climbing Stairs/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>You are climbing a stair case. It takes n steps to reach to the top.</p>\n<p>Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>有一个n阶的楼梯，每次你爬1或2阶，共有多少种不同的方法爬到顶？</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><p>实际为斐波那契数列。到达n层台阶，有两种方法：从n-1爬一阶，或从n-2爬两阶。</p>\n<h2 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">climbStairs</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span> || n == <span class=\"number\">2</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> climbStairs(n - <span class=\"number\">1</span>) + climbStairs(n - <span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但当n = 44时，报Time Limit Exceeded。<br>循环求第n个斐波那契数。</p>\n<h2 id=\"非递归\"><a href=\"#非递归\" class=\"headerlink\" title=\"非递归\"></a>非递归</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">climbStairs</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span> || n == <span class=\"number\">2</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> first = <span class=\"number\">1</span>, second = <span class=\"number\">2</span>, current = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            current = first + second;</span><br><span class=\"line\">            first = second;</span><br><span class=\"line\">            second = current;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> current;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>参考：<br><a href=\"http://www.tuicool.com/articles/EVFn6f\" target=\"_blank\" rel=\"noopener\">http://www.tuicool.com/articles/EVFn6f</a></p>\n","categories":["算法"],"tags":["算法","LeetCode"]},{"title":"LeetCode-206.Reverse Linked List","url":"http://dotrabbit.tk/算法/000020-LeetCode-206.Reverse Linked List/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Reverse a singly linked list.</p>\n<p><strong> Hint: </strong><br>A linked list can be reversed either iteratively or recursively. Could you implement both?</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>反转一个单链表。<br>提示：<br>单链表反转可以使用递归和非递归方法，你能都实现吗？</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><p>经典问题，没什么好讲解。</p>\n<h2 id=\"非递归\"><a href=\"#非递归\" class=\"headerlink\" title=\"非递归\"></a>非递归</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * public class ListNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode next;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">reverseList</span><span class=\"params\">(ListNode head)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head == <span class=\"keyword\">null</span> || head.next == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">        ListNode left = head.next, right;</span><br><span class=\"line\">        head.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            right = left.next;</span><br><span class=\"line\">            left.next = head;</span><br><span class=\"line\">            head = left;</span><br><span class=\"line\">            left = right;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * public class ListNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode next;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">reverseList</span><span class=\"params\">(ListNode head)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head == <span class=\"keyword\">null</span> || head.next == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">        ListNode newHead = reverseList(head.next);</span><br><span class=\"line\">        head.next.next = head;</span><br><span class=\"line\">        head.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> newHead;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["算法"],"tags":["算法","LeetCode"]},{"title":"LeetCode-169.Majority Element","url":"http://dotrabbit.tk/算法/000019-LeetCode-169.Majority Element/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Given an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times.</p>\n<p>You may assume that the array is non-empty and the majority element always exist in the array.</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>给出一个大小为n的数组，找出其中的多数元素。<br>多数元素是指出现 ⌊ n/2 ⌋ 次以上的元素。<br>你可以认为数组是非空的，并且数组中多数元素一定存在。 </p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><p>《数学之美》上的原题，用的Moore’s Voting Algorithm：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// todo</span></span><br></pre></td></tr></table></figure></p>\n<p>其实解法比较多：<br>1、排序<br>因为题中说可以认为一定存在，所以取中间位置的元素即可：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">majorityElement</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">        Arrays.sort(nums);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nums[nums.length / <span class=\"number\">2</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Runtime: 3 ms<br>2、遍历数组<br>记录每个元素出现的次数，次数大于n/2即为所求：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">majorityElement</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">        Map&lt;Integer, Integer&gt; times = <span class=\"keyword\">new</span> HashMap&lt;Integer, Integer&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i : nums) times.put(i, times.get(i) == <span class=\"keyword\">null</span> ? <span class=\"number\">1</span> : times.get(i) + <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Map.Entry&lt;Integer, Integer&gt; entry : times.entrySet())</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (entry.getValue() &gt; nums.length / <span class=\"number\">2</span>) <span class=\"keyword\">return</span> entry.getKey();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Runtime: 34 ms<br>3、顺序取<br>分别计算次数，因为所求出现次数大于1/2，所以取到可能性很大：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">majorityElement</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; ; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> times = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; nums.length; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (nums[j] == nums[i]) times++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (times &gt; nums.length / <span class=\"number\">2</span>) <span class=\"keyword\">return</span> nums[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>超时……<br>4、比较有趣，随机选择一个元素，然后统计其出现次数判断是否为所求。期望查找次数&lt;2，平均时间复杂度为O(n)；</p>\n<p>参考：<br><a href=\"http://www.cnblogs.com/fanyabo/p/4178993.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/fanyabo/p/4178993.html</a></p>\n","categories":["算法"],"tags":["算法","LeetCode","Array"]},{"title":"LeetCode-217.Contains Duplicate","url":"http://dotrabbit.tk/算法/000018-LeetCode-217.Contains Duplicate/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Given an array of integers, find if the array contains any duplicates. Your function should return true if any value appears at least twice in the array, and it should return false if every element is distinct.</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>给出一个整数数组，判断其中是否有重复元素。如果数组中的任何值出现了至少两次，返回true，如果每一个元素都是不同的返回false。</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><p>遍历数组，放进set里，每次判断是否已存在即可：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">containsDuplicate</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">        Set&lt;Integer&gt; numsSet = <span class=\"keyword\">new</span> HashSet&lt;Integer&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> num : nums) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (numsSet.contains(num))</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            numsSet.add(num);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","categories":["算法"],"tags":["算法","LeetCode","Array"]},{"title":"LeetCode-104.Maximum Depth of Binary Tree","url":"http://dotrabbit.tk/算法/000017-LeetCode-104.Maximum Depth of Binary Tree/","content":"<p>题目：<br>Given a binary tree, find its maximum depth.</p>\n<p>The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>给出一颗二叉树，找到他的最大深度。<br>最大深度是指从根节点到最远的叶子节点的最长路径上节点的数目。</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><p>递归求解，树的深度等于，左子树和右子树深度中较大的一个值，加1：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * public class TreeNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode left;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode right;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">maxDepth</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> leftDepth = maxDepth(root.left);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> rightDepth = maxDepth(root.right);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> leftDepth &gt; rightDepth ? leftDepth + <span class=\"number\">1</span> : rightDepth + <span class=\"number\">1</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","categories":["算法"],"tags":["算法","LeetCode"]},{"title":"LeetCode-292.Nim Game","url":"http://dotrabbit.tk/算法/000016-LeetCode-292.Nim Game/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>You are playing the following Nim Game with your friend: There is a heap of stones on the table, each time one of you take turns to remove 1 to 3 stones. The one who removes the last stone will be the winner. You will take the first turn to remove the stones.</p>\n<p>Both of you are very clever and have optimal strategies for the game. Write a function to determine whether you can win the game given the number of stones in the heap.</p>\n<p>For example, if there are 4 stones in the heap, then you will never win the game: no matter 1, 2, or 3 stones you remove, the last stone will always be removed by your friend.</p>\n<p><strong> Hint: </strong></p>\n<p>If there are 5 stones in the heap, could you figure out a way to remove the stones such that you will always be the winner?</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>你在与你的朋友玩Nim游戏：桌子上有一堆石子，每次你们中的一人拿走其中的1到3块。拿走最后一块石头的人将取得胜利。从你开始拿石子。<br>你们都很聪明，并且都会采取最优策略。编写函数，判断对于给出的石子数，你是否可以取得胜利。<br>例如，如果有4个石子，那么你将永远赢不了游戏：不管你拿走1、2还是3颗石子，你的朋友都将拿走最后一块。<br>提示：<br>如果有5个石子，你能够找到确保你获得胜利的方法吗？</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><p>本题主要考虑对经典的博弈论模型Nim游戏的理解，在第一次取走石子之后，将两个人各取一次作为一轮，如果要确保胜利，则每轮拿走的石子数一样，均为4即可：对方1自己3、对方2自己2、对方1自己3。所以只要第一轮可以取到石子即可保证自己最后一个拿：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">canWinNim</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (n % <span class=\"number\">4</span> != <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","categories":["算法"],"tags":["算法","LeetCode"]},{"title":"LeetCode-171.Excel Sheet Column Number","url":"http://dotrabbit.tk/算法/000015-LeetCode-171.Excel Sheet Column Number/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Related to question Excel Sheet Column Title</p>\n<p>Given a column title as appear in an Excel sheet, return its corresponding column number.</p>\n<p>For example:</p>\n<p>　　A -&gt; 1<br>　　B -&gt; 2<br>　　C -&gt; 3<br>　　…<br>　　Z -&gt; 26<br>　　AA -&gt; 27<br>　　AB -&gt; 28 </p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>相关问题为168. Excel Sheet Column Title。<br>给出一个Excel表的列名，返回其对应的列数。<br>例如：<br>　　A -&gt; 1<br>　　B -&gt; 2<br>　　C -&gt; 3<br>　　…<br>　　Z -&gt; 26<br>　　AA -&gt; 27<br>　　AB -&gt; 28 </p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><p>与168相反，26进制转换10进制：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">titleToNumber</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> number = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = s.length() - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--)</span><br><span class=\"line\">            number += (s.charAt(i) - <span class=\"string\">'A'</span> + <span class=\"number\">1</span>) * Math.pow(<span class=\"number\">26</span>, s.length() - <span class=\"number\">1</span> - i);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> number;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","categories":["算法"],"tags":["算法","LeetCode"]},{"title":"LeetCode-168.Excel Sheet Column Title","url":"http://dotrabbit.tk/算法/000014-LeetCode-168.Excel Sheet Column Title/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Given a positive integer, return its corresponding column title as appear in an Excel sheet.</p>\n<p>For example:</p>\n<p>　　1 -&gt; A<br>　　2 -&gt; B<br>　　3 -&gt; C<br>　　…<br>　　26 -&gt; Z<br>　　27 -&gt; AA<br>　　28 -&gt; AB </p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>给出一个正整数，返回它在Excel表中对应的列名。<br>例如：<br>　　1 -&gt; A<br>　　2 -&gt; B<br>　　3 -&gt; C<br>　　…<br>　　26 -&gt; Z<br>　　27 -&gt; AA<br>　　28 -&gt; AB </p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><p>其实就是把数字转换为26进制数，并用大写字母表示。<br>需要注意A到Z对应1到26而不是0到25，所以在求余和整除时，都需要做-1操作：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">convertToTitle</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        String title = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (n != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            title = (<span class=\"keyword\">char</span>)(<span class=\"string\">'A'</span> + ((n - <span class=\"number\">1</span>) % <span class=\"number\">26</span>)) + title;</span><br><span class=\"line\">            n = (n - <span class=\"number\">1</span>) / <span class=\"number\">26</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> title;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>参考：<br><a href=\"http://www.cnblogs.com/ganganloveu/p/4175848.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/ganganloveu/p/4175848.html</a></p>\n","categories":["算法"],"tags":["算法","LeetCode"]},{"title":"LeetCode-12.Integer to Roman","url":"http://dotrabbit.tk/算法/000013-LeetCode-12.Integer to Roman/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Given an integer, convert it to a roman numeral.</p>\n<p>Input is guaranteed to be within the range from 1 to 3999.</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>给出一个整数，将其转换为罗马数字。<br>输入范围为1到3999。</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><p>本题需要先弄明白罗马数字的表示规律：<br>罗马数字采用七个罗马字母作数字、即Ⅰ（1）、X（10）、C（100）、M（1000）、V（5）、L（50）、D（500）。<br>记数的方法：<br>(1) 相同的数字连写，所表示的数等于这些数字相加得到的数，如 Ⅲ=3；<br>(2) 小的数字在大的数字的右边，所表示的数等于这些数字相加得到的数，如 Ⅷ=8、Ⅻ=12；<br>(3) 小的数字（限于 Ⅰ、X 和 C）在大的数字的左边，所表示的数等于大数减小数得到的数，如 Ⅳ=4、Ⅸ=9；<br>(4) 在一个数的上面画一条横线，表示这个数增值 1,000 倍。<br>例如：Ⅲ=3、Ⅳ=4、Ⅵ=6、XIX=19、XX=20、XLV=45、MCMLXXX=1980。</p>\n<p>总结可知，罗马数字可以逐位计算，而每个阿拉伯数字由一位或两位罗马数字组成。<br>因为题中说明数字不超过3999，所以可以采用列举的办法，从M开始，分别用M、CM、D、CD、C、XC、L、XL、X、IX、V、IV、I，表示1000、900、500、400、100、90、50、40、10、9、5、4、1，逐个从阿拉伯数字中减去，拼接字符串：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">intToRoman</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span> </span>&#123;</span><br><span class=\"line\">        String intString = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        String[] romanNum = &#123;<span class=\"string\">\"M\"</span>, <span class=\"string\">\"CM\"</span>, <span class=\"string\">\"D\"</span>, <span class=\"string\">\"CD\"</span>, <span class=\"string\">\"C\"</span>, <span class=\"string\">\"XC\"</span>, <span class=\"string\">\"L\"</span>, <span class=\"string\">\"XL\"</span>, <span class=\"string\">\"X\"</span>, <span class=\"string\">\"IX\"</span>, <span class=\"string\">\"V\"</span>, <span class=\"string\">\"IV\"</span>, <span class=\"string\">\"I\"</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] integers = &#123;<span class=\"number\">1000</span>, <span class=\"number\">900</span>, <span class=\"number\">500</span>, <span class=\"number\">400</span>, <span class=\"number\">100</span>, <span class=\"number\">90</span>, <span class=\"number\">50</span>, <span class=\"number\">40</span>, <span class=\"number\">10</span>, <span class=\"number\">9</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; romanNum.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (num &gt; integers[i]) &#123;</span><br><span class=\"line\">                num -= integers[i];</span><br><span class=\"line\">                intString += romanNum[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> intString;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>参考：<br><a href=\"http://baike.baidu.com/link?url=slAoUSP15GV-2m_cctYO8-lzUECMQiWBKMumDSFfYgYzIGc50jXAQuCR4TFd80NyMT3alfEuBG6V3o1MQICJ4K\" target=\"_blank\" rel=\"noopener\">http://baike.baidu.com/link?url=slAoUSP15GV-2m_cctYO8-lzUECMQiWBKMumDSFfYgYzIGc50jXAQuCR4TFd80NyMT3alfEuBG6V3o1MQICJ4K</a><br><a href=\"http://blog.csdn.net/havenoidea/article/details/11848921\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/havenoidea/article/details/11848921</a></p>\n","categories":["算法"],"tags":["算法","LeetCode"]},{"title":"LeetCode-13.Roman to Integer","url":"http://dotrabbit.tk/算法/000012-LeetCode-13.Roman to Integer/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Given a roman numeral, convert it to an integer.</p>\n<p>Input is guaranteed to be within the range from 1 to 3999.</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>给出一个罗马数字，将其转换为一个整数。<br>输入范围为1到3999。</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><p>本题需要先弄明白罗马数字的表示规律：<br>罗马数字采用七个罗马字母作数字、即Ⅰ（1）、X（10）、C（100）、M（1000）、V（5）、L（50）、D（500）。<br>记数的方法：<br>(1) 相同的数字连写，所表示的数等于这些数字相加得到的数，如 Ⅲ=3；<br>(2) 小的数字在大的数字的右边，所表示的数等于这些数字相加得到的数，如 Ⅷ=8、Ⅻ=12；<br>(3) 小的数字（限于 Ⅰ、X 和 C）在大的数字的左边，所表示的数等于大数减小数得到的数，如 Ⅳ=4、Ⅸ=9；<br>(4) 在一个数的上面画一条横线，表示这个数增值 1,000 倍。<br>例如：Ⅲ=3、Ⅳ=4、Ⅵ=6、XIX=19、XX=20、XLV=45、MCMLXXX=1980。</p>\n<p>总结可知，罗马数字可以逐位计算，而每个阿拉伯数字由一位或两位罗马数字组成。<br>从左向右，如果第一位比第二位罗马数字小，则总和应加上第二位罗马数字减去第一位罗马数字的差；如果第一位不小于第二位罗马数字，则总和应加上第一位罗马数字。依次向右循环判断，直到末位：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">romanToInt</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; s.length() - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> curNum = getNum(s.charAt(i));</span><br><span class=\"line\">            <span class=\"keyword\">int</span> nextNum = getNum(s.charAt(i + <span class=\"number\">1</span>));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (curNum &gt;= nextNum) &#123;</span><br><span class=\"line\">                sum += curNum;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                sum -= curNum;</span><br><span class=\"line\">                sum += nextNum;</span><br><span class=\"line\">                i += <span class=\"number\">2</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i == s.length() - <span class=\"number\">1</span>)</span><br><span class=\"line\">            sum += getNum(s.charAt(i));</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getNum</span><span class=\"params\">(<span class=\"keyword\">char</span> c)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (c) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'I'</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'V'</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">5</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'X'</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'L'</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">50</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'C'</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">100</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'D'</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">500</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'M'</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">1000</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>参考：<br><a href=\"http://baike.baidu.com/link?url=slAoUSP15GV-2m_cctYO8-lzUECMQiWBKMumDSFfYgYzIGc50jXAQuCR4TFd80NyMT3alfEuBG6V3o1MQICJ4K\" target=\"_blank\" rel=\"noopener\">http://baike.baidu.com/link?url=slAoUSP15GV-2m_cctYO8-lzUECMQiWBKMumDSFfYgYzIGc50jXAQuCR4TFd80NyMT3alfEuBG6V3o1MQICJ4K</a></p>\n","categories":["算法"],"tags":["算法","LeetCode"]},{"title":"LeetCode-191.Number of 1 Bits","url":"http://dotrabbit.tk/算法/000011-LeetCode-191.Number of 1 Bits/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Write a function that takes an unsigned integer and returns the number of ’1’ bits it has (also known as the Hamming weight).</p>\n<p>For example, the 32-bit integer ’11’ has binary representation 00000000000000000000000000001011, so the function should return 3.</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>编写函数，以一个无符号整数为参数，返回它包含的’1’的位数(也被称为汉明重量<a href=\"http://en.wikipedia.org/wiki/Hamming_weight\" target=\"_blank\" rel=\"noopener\">http://en.wikipedia.org/wiki/Hamming_weight</a>) 。<br>例如，32位整数’11’的二进制形式为00000000000000000000000000001011，所以函数应当返回3。</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><p>投机取巧的办法，利用JDK的Integer.toBinaryString(int)函数……<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// you need to treat n as an unsigned value</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">hammingWeight</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        String binaryString = Integer.toBinaryString(n);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> hammingWeight = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">char</span> c : binaryString.toCharArray())</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (c == <span class=\"string\">'1'</span>)</span><br><span class=\"line\">                hammingWeight++;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hammingWeight;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>但本题其实考察的是对位操作的理解：<br>1、n &amp; (n - 1)每次可以去掉最末位的1（多少个1操作多少次）：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// you need to treat n as an unsigned value</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">hammingWeight</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> hammingWeight = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (n != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            n &amp;= n - <span class=\"number\">1</span>;</span><br><span class=\"line\">            hammingWeight++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hammingWeight;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>2、Java中无符号移位操作符&gt;&gt;&gt;（多少位操作多少次）。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// you need to treat n as an unsigned value</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">hammingWeight</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> hammingWeight = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (n != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((n &amp; <span class=\"number\">1</span>) == <span class=\"number\">1</span>)</span><br><span class=\"line\">                hammingWeight++;</span><br><span class=\"line\">            n &gt;&gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hammingWeight;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>参考：<br><a href=\"http://www.tuicool.com/articles/YBbY3m\" target=\"_blank\" rel=\"noopener\">http://www.tuicool.com/articles/YBbY3m</a><br><a href=\"http://blog.csdn.net/guang09080908/article/details/44457603\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/guang09080908/article/details/44457603</a><br><a href=\"http://www.07net01.com/2015/08/892764.html\" target=\"_blank\" rel=\"noopener\">http://www.07net01.com/2015/08/892764.html</a></p>\n","categories":["算法"],"tags":["算法","LeetCode"]},{"title":"LeetCode-235.Lowest Common Ancestor of a Binary Search Tree","url":"http://dotrabbit.tk/算法/000010-LeetCode-235.Lowest Common Ancestor of a Binary Search Tree/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.</p>\n<p>According to the definition of LCA on Wikipedia(<a href=\"https://en.wikipedia.org/wiki/Lowest_common_ancestor)\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Lowest_common_ancestor)</a>: “The lowest common ancestor is defined between two nodes v and w as the lowest node in T that has both v and w as descendants (where we allow a node to be a descendant of itself).”</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>给出一个二叉搜索树(BST)，寻找给出两个节点在BST上的最小公共祖先(LCA)。<br>根据Wikipedia上对LCA的定义(<a href=\"https://en.wikipedia.org/wiki/Lowest_common_ancestor\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Lowest_common_ancestor</a>) ：“对于两个节点v和w，在树T中，深度最小的、v和w同时为其后代的节点，定义为v和w的最小公共祖先(节点是自身的后代)”。<br>　　　　6<br>　　　/　　\\<br>　　2　　　　8<br>　/　\\　　　/　　\\<br>0　　　4　7　　　9<br>　　　/　\\<br>　　3　　5<br>例如，2和8的最小公共祖先(LCA)是6，2和4的最小公共祖先是2，因为根据LCA的定义节点可以是自身的后代。</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><p>利用二叉搜索树的性质，左子树上的所有节点值都比根节点值小，右子树上所有节点值都比根节点大，递归判断：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * public class TreeNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode left;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode right;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> TreeNode <span class=\"title\">lowestCommonAncestor</span><span class=\"params\">(TreeNode root, TreeNode p, TreeNode q)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span> || p == <span class=\"keyword\">null</span> || q == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p.val &lt; root.val &amp;&amp; q.val &lt; root.val)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> lowestCommonAncestor(root.left, p, q);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p.val &gt; root.val &amp;&amp; q.val &gt; root.val)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> lowestCommonAncestor(root.right, p, q);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>另外，本题有两个追加条件：<br>1、如果p和q不在树上；<br>2、如果是一颗普通二叉树。<br>对于1，我们可以编写一个函数，递归查找节点，判断是否在树上，任何一个节点不在树上，返回null即可。<br>对于2，方法为编写一个函数，记录从根节点到该节点的路径上经过的所有节点，然后遍历从根节点分别到p和q的路径节点，直到路径节点不同或其中一条路径走完为止，返回最后一个相同路径节点。在寻找路径的同时，可以解决问题1。<br>代码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * public class TreeNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode left;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode right;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> TreeNode <span class=\"title\">lowestCommonAncestor</span><span class=\"params\">(TreeNode root, TreeNode p, TreeNode q)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;TreeNode&gt; pPath = <span class=\"keyword\">new</span> ArrayList&lt;TreeNode&gt;();</span><br><span class=\"line\">        List&lt;TreeNode&gt; qPath = <span class=\"keyword\">new</span> ArrayList&lt;TreeNode&gt;();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!getPath(root, p, pPath) || !getPath(root, q, qPath))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        TreeNode lowestCommonAncestor = root;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; pPath.size() &amp;&amp; i &lt; qPath.size(); i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (pPath.get(i) == qPath.get(i))</span><br><span class=\"line\">                lowestCommonAncestor = pPath.get(i);</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> lowestCommonAncestor;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">getPath</span><span class=\"params\">(TreeNode root, TreeNode t, List&lt;TreeNode&gt; path)</span> </span>&#123;</span><br><span class=\"line\">        path.add(root);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 是否为根</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == t)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"comment\">// 是否在左子树</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (getPath(root.left, t, path))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> path.remove(path.size() - <span class=\"number\">1</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 是否在右子树</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (getPath(root.right, t, path))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> path.remove(path.size() - <span class=\"number\">1</span>);</span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>参考：<br><a href=\"http://www.cnblogs.com/lihaozy/archive/2012/12/03/2799408.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/lihaozy/archive/2012/12/03/2799408.html</a><br><a href=\"http://blog.csdn.net/xudli/article/details/46838747\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/xudli/article/details/46838747</a></p>\n","categories":["算法"],"tags":["算法","LeetCode"]},{"title":"LeetCode-328.Odd Even Linked List","url":"http://dotrabbit.tk/算法/000009-LeetCode-328.Odd Even Linked List/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Given a singly linked list, group all odd nodes together followed by the even nodes. Please note here we are talking about the node number and not the value in the nodes.</p>\n<p>You should try to do it in place. The program should run in O(1) space complexity and O(nodes) time complexity.</p>\n<p>Example:<br>Given 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL,<br>return 1-&gt;3-&gt;5-&gt;2-&gt;4-&gt;NULL.</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>给出一个单链表，将所有的奇数节点放在偶数节点前面。注意这里说的是节点排序数而不是节点的值。<br>要求原地操作。程序空间复杂度应为O(1)，时间复杂度为O(nodes)。<br>例如：<br>给出 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL,<br>返回 1-&gt;3-&gt;5-&gt;2-&gt;4-&gt;NULL.</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><h2 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2><p>考虑替换值，可以遍历链表得出链表长度，然后新建一个相同长度的数组，再次遍历链表，将值储存在数组里，最后遍历，依次取出数组中存储的奇数位置和偶数位置的值，替换链表值。但空间复杂度与时间复杂度都是O(nodes)。</p>\n<h2 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2><p>思路是将所有奇数节点串成一个单链表，所有偶数节点串成一个单链表，最后将奇数节点链表的尾与偶数节点链表的头连接起来即可。<br>首先设立一个指向第二个节点的指针evenHead，保存偶数节点链表的头。<br>设立两个指针，一个指向奇数节点odd，和一个指向下一个相邻的偶数节点even。<br>每次循环，使odd的next指到下一个奇数节点(即even的next)，更新odd为下一个奇数节点，even的next指向下一个偶数节点(即odd的next)，更新even为下一个偶数节点，一轮循环结束。当even为空(共奇数个节点)或even.next为空(共偶数个节点)时，停止循环。<br>此时奇数节点链表和偶数节点链表均已就绪，只要将奇数节点链表的尾(odd.next)指向偶数节点链表的头(even)即可：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * public class ListNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode next;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">oddEvenList</span><span class=\"params\">(ListNode head)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">        </span><br><span class=\"line\">        ListNode odd = head, even = head.next, evenHead = head.next;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (even != <span class=\"keyword\">null</span> &amp;&amp; even.next != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            odd.next = even.next;</span><br><span class=\"line\">            odd = even.next;</span><br><span class=\"line\">            even.next = odd.next;</span><br><span class=\"line\">            even = odd.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        odd.next = evenHead;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["算法"],"tags":["算法","LeetCode"]},{"title":"LeetCode-242.Valid Anagram","url":"http://dotrabbit.tk/算法/000008-LeetCode-242.Valid Anagram/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Given two strings s and t, write a function to determine if t is an anagram of s.</p>\n<p>For example,<br>s = “anagram”, t = “nagaram”, return true.<br>s = “rat”, t = “car”, return false.</p>\n<p>Note:<br>You may assume the string contains only lowercase alphabets.</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>给出两个字符串s和t，编写函数确定t与s是否是变位词。<br>例如：<br>s = “anagram”， t = “nagaram”， 返回true。<br>s = “rat”， t = “car”， 返回false。<br>注：<br>可以认为字符串只包含小写字母。</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><h2 id=\"解法一\"><a href=\"#解法一\" class=\"headerlink\" title=\"解法一\"></a>解法一</h2><p>先转换为char数组，然后排序，然后转换为字符串，比较是否相等：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isAnagram</span><span class=\"params\">(String s, String t)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span>[] sArr = s.toCharArray();</span><br><span class=\"line\">    <span class=\"keyword\">char</span>[] tArr = t.toCharArray();</span><br><span class=\"line\">    </span><br><span class=\"line\">    Arrays.sort(sArr);</span><br><span class=\"line\">    Arrays.sort(tArr);</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">return</span> String.valueOf(sArr).equals(String.valueOf(tArr));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"解法二\"><a href=\"#解法二\" class=\"headerlink\" title=\"解法二\"></a>解法二</h2><p>因为题中说明只包含小写字母，所以可以新建一个大小为26的int数组，记录两个字符串每个字母包含的个数，最后比较是否每个字符数都一样即可：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isAnagram</span><span class=\"params\">(String s, String t)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s.length() != t.length())</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] chars = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">26</span>]; <span class=\"comment\">// 因为说明都是小写字母，所以26足够</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class=\"line\">        chars[s.charAt(i) - <span class=\"string\">'a'</span>]++;</span><br><span class=\"line\">        chars[t.charAt(i) - <span class=\"string\">'a'</span>]--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">       </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i : chars)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i != <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>参考：<br><a href=\"http://blog.csdn.net/xudli/article/details/47208047\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/xudli/article/details/47208047</a><br><a href=\"http://www.cnblogs.com/ganganloveu/p/4694703.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/ganganloveu/p/4694703.html</a></p>\n","categories":["算法"],"tags":["算法","LeetCode"]},{"title":"LeetCode-100.Same Tree","url":"http://dotrabbit.tk/算法/000007-LeetCode-100.Same Tree/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Given two binary trees, write a function to check if they are equal or not.</p>\n<p>Two binary trees are considered equal if they are structurally identical and the nodes have the same value.</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>给出两颗二叉树，编写函数检查它们是否相等。<br>两颗二叉树相等的定义是它们的结构相同并且对应节点有相同的值。</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><p>遍历二叉树，当遇到节点时，首先非空判断，然后检查根的值，然后检查左右子树是否相等。<br>递归：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * public class TreeNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode left;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode right;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isSameTree</span><span class=\"params\">(TreeNode p, TreeNode q)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p == <span class=\"keyword\">null</span> &amp;&amp; q == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p == <span class=\"keyword\">null</span> || q == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> (p.val == q.val &amp;&amp; isSameTree(p.left, q.left) &amp;&amp; isSameTree(p.right, q.right));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","categories":["算法"],"tags":["算法","LeetCode"]},{"title":"LeetCode-226.Invert Binary Tree","url":"http://dotrabbit.tk/算法/000006-LeetCode-226.Invert Binary Tree/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Invert a binary tree.</p>\n<p>　　　　4<br>　　　/　　\\<br>　　2　　　　7<br>　/　\\　　　/　　\\<br>1　　　3　6　　　9</p>\n<p>To</p>\n<p>　　　　4<br>　　　/　　\\<br>　　7　　　　2<br>　/　\\　　　/　　\\<br>9　　　6　3　　　1</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>反转一颗二叉树。<br>　　　　4<br>　　　/　　\\<br>　　2　　　　7<br>　/　\\　　　/　　\\<br>1　　　3　6　　　9</p>\n<p>为</p>\n<p>　　　　4<br>　　　/　　\\<br>　　7　　　　2<br>　/　\\　　　/　　\\<br>9　　　6　3　　　1</p>\n<p>题目中标注了本题的灵感来自于 Max Howell(<a href=\"https://twitter.com/mxcl\" target=\"_blank\" rel=\"noopener\">https://twitter.com/mxcl</a>) 的一条 twitter(<a href=\"https://twitter.com/mxcl/status/608682016205344768)\" target=\"_blank\" rel=\"noopener\">https://twitter.com/mxcl/status/608682016205344768)</a>:<br>Google: 90% of our engineers use the software you wrote (Homebrew), but you can’t invert a binary tree on a whiteboard so fuck off.<br>（Google：我们90%的工程师都用你写的软件（Homebrew），但你不能在白板上反转一颗二叉树，所以滚蛋吧。）<br>很严重的样子……</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><p>其实就是遍历二叉树，在遍历过程中，顺便把左右子节点交换位置即可。<br>递归：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> TreeNode <span class=\"title\">invertTree</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">    TreeNode tmp = invertTree(root.left);</span><br><span class=\"line\">    root.left = invertTree(root.right);</span><br><span class=\"line\">    root.right = tmp;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","categories":["算法"],"tags":["算法","LeetCode"]},{"title":"LeetCode-283.Move Zeroes","url":"http://dotrabbit.tk/算法/000005-LeetCode-283.Move Zeroes/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Given an array nums, write a function to move all 0’s to the end of it while maintaining the relative order of the non-zero elements.</p>\n<p>For example, given nums = [0, 1, 0, 3, 12], after calling your function, nums should be [1, 3, 12, 0, 0].</p>\n<p>Note:<br>You must do this in-place without making a copy of the array.<br>Minimize the total number of operations.</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>给出一个数组nums，编写一个函数，把所有的0都移动到数组的末端，同时保持非零元素的相对顺序。<br>例如，nums= [0, 1, 0, 3, 12]，在调用函数之后，nums应变成 [1, 3, 12, 0, 0]。<br>注意：<br>必须原地操作，不能拷贝数组。<br>最小化总操作次数。</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><p>不能新建数组，两种思路：<br>1、把所有的非0都挪到前面，后面全部赋值0；<br>2、将排在前面的0和排在后面的非0对调，逐个操作。<br>因为要最小化操作次数，所以选择第二种：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">moveZeroes</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> zeroIndex = -<span class=\"number\">1</span>, i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt; nums.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[i] != <span class=\"number\">0</span> &amp;&amp; zeroIndex &lt; i) &#123;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        zeroIndex = i;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (++i == nums.length)</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[i] == <span class=\"number\">0</span>)</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            nums[zeroIndex] = nums[i];</span><br><span class=\"line\">            nums[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            i = zeroIndex + <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>代码不简洁，而且运行时间为21ms………</p>\n<p>参考网上资料，基本两个嵌套循环的算法都可以淘汰掉了……<br>但思路都是两个指针：<br>第一种：不断把非0数向前压缩。<br>一个指针不断向后遍历，另一个指针指向最后一个非零数，一次遍历之后，将最后一个非零数之后的数都置为0。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">moveZeroes</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> lastNonZeroIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[i] != <span class=\"number\">0</span>)</span><br><span class=\"line\">            nums[lastNonZeroIndex++] = nums[i];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span> (lastNonZeroIndex &lt; nums.length)</span><br><span class=\"line\">        nums[lastNonZeroIndex++] = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>第二种：还是两个指针，快指针每次前进，慢指针不为0时前进，遇到0时暂停，当快指针遇到非0数时与慢指针交换，保证快慢指针之间永远只有0，当快指针到尾端时算法停止：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">moveZeroes</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> slow = <span class=\"number\">0</span>, fast = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (fast &lt; nums.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[slow] == <span class=\"number\">0</span> &amp;&amp; nums[fast] != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            nums[slow] = nums[fast];</span><br><span class=\"line\">            nums[fast] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[slow] != <span class=\"number\">0</span>)</span><br><span class=\"line\">            slow++;</span><br><span class=\"line\">        fast++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>参考：<br><a href=\"http://segmentfault.com/a/1190000003768716\" target=\"_blank\" rel=\"noopener\">http://segmentfault.com/a/1190000003768716</a><br><a href=\"http://www.oschina.net/code/snippet_2377480_51062\" target=\"_blank\" rel=\"noopener\">http://www.oschina.net/code/snippet_2377480_51062</a></p>\n","categories":["算法"],"tags":["算法","LeetCode","Array"]},{"title":"LeetCode-237.Delete Node in a Linked List","url":"http://dotrabbit.tk/算法/000004-LeetCode-237.Delete Node in a Linked List/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Write a function to delete a node (except the tail) in a singly linked list, given only access to that node.</p>\n<p>Supposed the linked list is 1 -&gt; 2 -&gt; 3 -&gt; 4 and you are given the third node with value 3, the linked list should become 1 -&gt; 2 -&gt; 4 after calling your function.</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>编写一个从一个单链表中删除节点（非尾节点）的函数，输入仅为被删除节点的引用。<br>例如链表为1 -&gt; 2 -&gt; 3 -&gt; 4，给出值为3的节点，在调用函数后链表应变为1 -&gt; 2 -&gt; 4。</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><p>无法获取前一节点引用，所以除节点操作外，考虑值操作。<br>思路为将当前被删除节点的值，修改为下一节点的值，然后删除下一节点（当前节点直接指向下一节点的下一节点或空）。<br>因题中已说明被删除的节点非尾节点，因此不需要做非空判断。<br>代码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteNode</span><span class=\"params\">(ListNode node)</span> </span>&#123;</span><br><span class=\"line\">    node.val = node.next.val;</span><br><span class=\"line\">    node.next = node.next.next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","categories":["算法"],"tags":["算法","LeetCode"]},{"title":"LeetCode-258.Add Digits","url":"http://dotrabbit.tk/算法/000003-LeetCode-258.Add Digits/","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>Given a non-negative integer num, repeatedly add all its digits until the result has only one digit.</p>\n<p>For example:</p>\n<p>Given num = 38, the process is like: 3 + 8 = 11, 1 + 1 = 2. Since 2 has only one digit, return it.</p>\n<p>Follow up:<br>Could you do it without any loop/recursion in O(1) runtime?</p>\n<h1 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h1><p>给出一个非负整数num，反复叠加其各位直到结果只有一位为止。<br>例如：<br>给出num=38，过程如下：3+8=11,1+1=2。因为2只有一位，返回。<br>追加：<br>能否给出不用任何循环或递归的O(1)运行时间的算法？</p>\n<h1 id=\"解\"><a href=\"#解\" class=\"headerlink\" title=\"解\"></a>解</h1><p>最直接的思路，按照题中给出的过程，逐步计算，返回结果：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 递归</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">addDigits</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (num &lt; <span class=\"number\">10</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> num;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (num != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        sum += num % <span class=\"number\">10</span>;</span><br><span class=\"line\">        num /= <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> addDigits(sum);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 非递归</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">addDigits</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (num &gt;= <span class=\"number\">10</span>)</span><br><span class=\"line\">        num = getSum(num);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getSum</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (num != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        sum += num % <span class=\"number\">10</span>;</span><br><span class=\"line\">        num /= <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但题中给出了追加问题，能否在O(1)时间内解出？<br>并给出了四个提示：<br>1.A naive implementation of the above process is trivial. Could you come up with other methods?<br>2.What are all the possible results?<br>3.How do they occur, periodically or randomly?<br>4.You may find this Wikipedia article useful.(<a href=\"https://en.wikipedia.org/wiki/Digital_root\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Digital_root</a>)</p>\n<p>翻译如下：<br>1.简单地实现上述计算过程是很普通的，你能想出其他办法么？<br>2.都有哪些可能结果？<br>3.它们是周期性地还是随机地出现？<br>4.这篇维基百科文章可能会有所帮助。(<a href=\"https://en.wikipedia.org/wiki/Digital_root\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Digital_root</a>)</p>\n<p>从中我们可以得知：<br>Result = 1 + ( ( num - 1 ) mod 9 )</p>\n<p>算法如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">addDigits</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span> + (num - <span class=\"number\">1</span>) % <span class=\"number\">9</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>运行时间均为2ms</p>\n","categories":["算法"],"tags":["算法","LeetCode"]},{"title":"Markdown语法","url":"http://dotrabbit.tk/工具/000002-Markdown语法/","content":"<p>　　Markdown是一个讲纯文本转换为HTML的工具，通过自定义的语法，很简单地写出有着通用样式的页面，可以让用户更加专注在文字，而不是格式或字符转义上。<br>　　官网介绍很详细，除了背景太黑，字太小之外，没什么缺点了……</p>\n<h1 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h1><p>文字前加#号<br>如：<br># 一级标题<br>## 二级标题<br>### 三级标题<br>以此类推，总共六级标题，建议在井号后加一个空格，这是最标准的 Markdown 语法</p>\n<h1 id=\"粗体\"><a href=\"#粗体\" class=\"headerlink\" title=\"粗体\"></a>粗体</h1><p>文本前后加两个 *<br>如：<br>** 这里是粗体 **</p>\n<h1 id=\"斜体\"><a href=\"#斜体\" class=\"headerlink\" title=\"斜体\"></a>斜体</h1><p>文本前后加一个 *<br>如：<br>* 这里是斜体 *</p>\n<h1 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h1><p>无序表(用点号列表)：文字前加 * 或 + 或 -<br>有序表(用序号列表)：文字前加 1. 2. 3.<br>符号和文字之间加上一个字符的空格<br>如：<br>* 1<br>* 2<br>1. 1<br>2. 2<br>有序表可以通过转义符使用纯文本，如1986\\. What a great season.</p>\n<h1 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h1><p>在文本前加入大于号 &gt;<br>如：<br>&gt; 这里是引用<br>引用可以嵌套其他元素，如标题、序号等</p>\n<h1 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h1><p>中括号和小括号连接，形如 []()，中括号中内容为显示的文本，小括号中内容为链接的URL<br>如：<br>[Baidu](<a href=\"http://baidu.com\" target=\"_blank\" rel=\"noopener\">http://baidu.com</a>)</p>\n<h1 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h1><p>叹号加中括号和小括号连接，形如 ![]() ，中括号中内容为图片的alt内容，小括号中内容为图片的URL(必须使用网络图片)<br>如：<br>![Baidu logo](<a href=\"https://ss0.bdstatic.com/5aV1bjqh_Q23odCf/static/superman/img/logo/bd_logo1_31bdc765.png\" target=\"_blank\" rel=\"noopener\">https://ss0.bdstatic.com/5aV1bjqh_Q23odCf/static/superman/img/logo/bd_logo1_31bdc765.png</a>)</p>\n<h1 id=\"分割线\"><a href=\"#分割线\" class=\"headerlink\" title=\"分割线\"></a>分割线</h1><p>三个 * 号<br>如：<br>***</p>\n<h1 id=\"代码段\"><a href=\"#代码段\" class=\"headerlink\" title=\"代码段\"></a>代码段</h1><p>使用4个空格或tab即可：<br>　　　　public static void main(String[] args) {<br>　　　　　　　　System.out.println(&quot;Hello World!&quot;)<br>　　　　}<br>会在代码前后加上&lt;pre&gt;&lt;code&gt;和&lt;/pre&gt;&lt;/code&gt;</p>\n<h1 id=\"代码行\"><a href=\"#代码行\" class=\"headerlink\" title=\"代码行\"></a>代码行</h1><p>代码前后加 `<br>如：<br>Use the `printf()` function.<br>会变成<br>&lt;p&gt;Use the &lt;code&gt;printf()&lt;/code&gt; function.&lt;/p&gt;</p>\n<p>当代码中包含 ` 符号时，可使用 `` 包裹<br>如：<br>``There is a literal backtick (`) here.``<br>会变成<br>&lt;p&gt;&lt;code&gt;There is a literal backtick (`) here.&lt;/code&gt;&lt;/p&gt;</p>\n<p>当代码首尾出现 ` 符号时，可使用空格隔开<br>如：<br>A single backtick in a code span: `` ` ``<br>A backtick-delimited string in a code span: `` `foo` ``<br>会变成<br>&lt;p&gt;A single backtick in a code span: &lt;code&gt;`&lt;/code&gt;&lt;/p&gt;<br>&lt;p&gt;A backtick-delimited string in a code span: &lt;code&gt;`foo`&lt;/code&gt;&lt;/p&gt;</p>\n<h1 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h1><p>Mac：Mou<br>Windows：MarkPad<br>Web：Github pages、简书</p>\n<h1 id=\"拓展\"><a href=\"#拓展\" class=\"headerlink\" title=\"拓展\"></a>拓展</h1><p><a href=\"https://www.zybuluo.com/mdeditor\" target=\"_blank\" rel=\"noopener\">https://www.zybuluo.com/mdeditor</a></p>\n<p>参考：<br><a href=\"https://daringfireball.net/projects/markdown/\" target=\"_blank\" rel=\"noopener\">https://daringfireball.net/projects/markdown/</a><br><a href=\"http://www.jianshu.com/p/1e402922ee32\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/1e402922ee32</a></p>\n","categories":["工具"],"tags":["工具","Markdown"]},{"title":"为什么写博客？","url":"http://dotrabbit.tk/生活杂记/000001-为什么写博客？/","content":"<p>　　长久以来，本着买到书就学会了知识的原则，买了很多书，却没记住多少知识。<br>　　小时候总听到大人们老师们说好记性不如烂笔头，从不服气，认为自己写下来东西真是太麻烦了，直接记住不就好了。可能那时记忆好，可能那时知识少，所以也没碰到什么大问题。<br>　　最近几年越来越感觉到记录的重要性了，无论是知识理论、日常感悟，还是生活状态，如果不记录，时光匆匆，一不留神，就从指缝溜走了，颇感遗憾。于是喊出了口号，记录下来，就是胜利，从此坚持写日记，已有一年有余。<br>　　这个博客还是定位在技术博客，不敢说分享知识，出发点是记录下来自己的所学所悟，写的时候加强总结，看的时候查漏补缺。如果其他人看到了哪篇文章，能有所收获甚至有所启发，那就更好不过了。<br>　　偶尔分享生活感悟，爱电影，爱音乐，是逗逼，逐年稳重……<br>　　算是一段新的旅程，希望可以一路顺风。用《疯狂动物城》的话讲，<em> No matter what type of animal you are, change starts with you. </em></p>\n","categories":["生活杂记"],"tags":["生活杂记"]},{"title":"about","url":"http://dotrabbit.tk/about/index.html","content":"","categories":[],"tags":[]},{"title":"category","url":"http://dotrabbit.tk/category/index.html","content":"","categories":[],"tags":[]},{"title":"link","url":"http://dotrabbit.tk/link/index.html","content":"","categories":[],"tags":[]},{"title":"tag","url":"http://dotrabbit.tk/tag/index.html","content":"","categories":[],"tags":[]},{"title":"search","url":"http://dotrabbit.tk/search/index.html","content":"","categories":[],"tags":[]}]